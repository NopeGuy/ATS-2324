/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 14 17:47:13 GMT 2024
 */

package poligono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import poligono.Poligono;
import poligono.PoligonoConvexo;
import poligono.Ponto;
import poligono.Retangulo;
import poligono.Triangulo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Poligono_ESTest extends Poligono_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Triangulo triangulo0 = new Triangulo(ponto0, ponto0, ponto0);
      boolean boolean0 = triangulo0.eConvexo();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Retangulo retangulo0 = new Retangulo();
      double double0 = retangulo0.perimetro();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Ponto ponto1 = new Ponto((-2329.055958536868), (-2329.055958536868));
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto1);
      double double0 = retangulo0.perimetro();
      assertEquals(6587.565048177415, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Triangulo triangulo0 = new Triangulo();
      List<Ponto> list0 = triangulo0.getPoligono();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ponto ponto0 = new Ponto(0.0, 0.0);
      Triangulo triangulo0 = new Triangulo(ponto0, ponto0, ponto0);
      ponto0.decCoord((-1602.584563404), 0.0);
      triangulo0.addPonto(ponto0);
      boolean boolean0 = triangulo0.fechada();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Triangulo triangulo0 = new Triangulo(ponto0, ponto0, ponto0);
      Poligono poligono0 = triangulo0.clone();
      assertTrue(poligono0.eConvexo());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto0);
      double double0 = retangulo0.area();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Ponto ponto1 = ponto0.clone();
      ponto0.setY((-1.0));
      Ponto ponto2 = new Ponto((-1.0), (-641.510879));
      Retangulo retangulo0 = new Retangulo(ponto2, ponto1, ponto0, ponto2);
      double double0 = retangulo0.area();
      assertEquals(0.5000000014168695, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Triangulo triangulo0 = new Triangulo(ponto0, ponto0, ponto0);
      // Undeclared exception!
      try { 
        triangulo0.setPoligono((List<Ponto>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("poligono.Poligono", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Triangulo triangulo0 = new Triangulo(ponto0, ponto0, ponto0);
      PoligonoConvexo poligonoConvexo0 = triangulo0.clone();
      // Undeclared exception!
      try { 
        poligonoConvexo0.fechada();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Retangulo retangulo0 = new Retangulo();
      // Undeclared exception!
      try { 
        retangulo0.area();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Triangulo triangulo0 = new Triangulo();
      // Undeclared exception!
      try { 
        triangulo0.addPonto((Ponto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("poligono.Poligono", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ponto ponto0 = new Ponto((-1955.04718062236), (-1955.04718062236));
      Ponto ponto1 = new Ponto();
      Ponto ponto2 = new Ponto();
      ponto2.setX((-1955.04718062236));
      Retangulo retangulo0 = new Retangulo(ponto1, ponto2, ponto0, ponto1);
      boolean boolean0 = retangulo0.eConvexo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Ponto> linkedList0 = new LinkedList<Ponto>();
      Ponto ponto0 = new Ponto();
      linkedList0.add(ponto0);
      PoligonoConvexo poligonoConvexo0 = new PoligonoConvexo(linkedList0);
      boolean boolean0 = poligonoConvexo0.eConvexo();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ponto ponto0 = new Ponto(0.0, (-2534.64));
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto0);
      List<Ponto> list0 = retangulo0.getPoligono();
      retangulo0.setPoligono(list0);
      assertTrue(list0.contains(ponto0));
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Triangulo triangulo0 = new Triangulo(ponto0, ponto0, ponto0);
      boolean boolean0 = triangulo0.fechada();
      assertTrue(boolean0);
  }
}
