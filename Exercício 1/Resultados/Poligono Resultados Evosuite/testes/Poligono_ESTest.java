/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 16 17:16:33 GMT 2024
 */

package poligono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import poligono.Poligono;
import poligono.PoligonoConvexo;
import poligono.Ponto;
import poligono.Retangulo;
import poligono.Triangulo;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)

public class Poligono_ESTest extends Poligono_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ponto ponto0 = new Ponto((-2245.5346019856), (-2245.5346019856));
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto0);
      boolean boolean0 = retangulo0.eConvexo();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Retangulo retangulo0 = new Retangulo();
      double double0 = retangulo0.perimetro();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Ponto ponto1 = new Ponto(2755.490616794547, 2755.490616794547);
      Triangulo triangulo0 = new Triangulo(ponto0, ponto1, ponto0);
      double double0 = triangulo0.perimetro();
      assertEquals(7793.704402525306, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoligonoConvexo poligonoConvexo0 = new PoligonoConvexo();
      List<Ponto> list0 = poligonoConvexo0.getPoligono();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ponto ponto0 = new Ponto((-2012.4729584290887), (-2012.4729584290887));
      Ponto ponto1 = new Ponto();
      Ponto ponto2 = new Ponto(ponto0);
      Retangulo retangulo0 = new Retangulo(ponto2, ponto2, ponto0, ponto0);
      retangulo0.addPonto(ponto1);
      boolean boolean0 = retangulo0.fechada();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ponto ponto0 = new Ponto((-2245.5346019856), (-2245.5346019856));
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto0);
      Poligono poligono0 = retangulo0.clone();
      assertTrue(poligono0.eConvexo());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto0);
      double double0 = retangulo0.area();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Ponto> linkedList0 = new LinkedList<Ponto>();
      Ponto ponto0 = new Ponto();
      linkedList0.add(ponto0);
      Ponto ponto1 = new Ponto(1.0, 355445.21397847764);
      linkedList0.add(ponto1);
      Ponto ponto2 = new Ponto(1.0, 2.0);
      linkedList0.add(ponto2);
      PoligonoConvexo poligonoConvexo0 = new PoligonoConvexo(linkedList0);
      double double0 = poligonoConvexo0.area();
      assertEquals(710890.6640263395, poligonoConvexo0.perimetro(), 0.01);
      assertEquals(177721.60700648642, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto0);
      Retangulo retangulo1 = retangulo0.clone();
      // Undeclared exception!
      try { 
        retangulo1.fechada();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoligonoConvexo poligonoConvexo0 = new PoligonoConvexo();
      // Undeclared exception!
      try { 
        poligonoConvexo0.area();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Retangulo retangulo0 = new Retangulo();
      // Undeclared exception!
      try { 
        retangulo0.addPonto((Ponto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("poligono.Poligono", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ponto ponto0 = new Ponto((-2012.4729584290887), (-2012.4729584290887));
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto0);
      List<Ponto> list0 = retangulo0.getPoligono();
      retangulo0.setPoligono(list0);
      assertTrue(list0.contains(ponto0));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoligonoConvexo poligonoConvexo0 = new PoligonoConvexo();
      LinkedList<Ponto> linkedList0 = new LinkedList<Ponto>();
      linkedList0.add((Ponto) null);
      // Undeclared exception!
      try { 
        poligonoConvexo0.setPoligono(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("poligono.Poligono", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Ponto ponto1 = new Ponto(7.009455898172669E22, 7.009455898172669E22);
      Ponto ponto2 = new Ponto((-1934.9094155290343), 7.009455898172669E22);
      Triangulo triangulo0 = new Triangulo(ponto1, ponto2, ponto0);
      boolean boolean0 = triangulo0.eConvexo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto0);
      Retangulo retangulo1 = retangulo0.clone();
      boolean boolean0 = retangulo1.eConvexo();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ponto ponto0 = new Ponto();
      Retangulo retangulo0 = new Retangulo(ponto0, ponto0, ponto0, ponto0);
      boolean boolean0 = retangulo0.fechada();
      assertTrue(boolean0);
  }
}
