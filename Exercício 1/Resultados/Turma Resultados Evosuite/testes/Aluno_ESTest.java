/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 16 17:49:46 GMT 2024
 */

package turma;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import turma.Aluno;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Aluno_ESTest extends Aluno_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-2979.0));
      hashMap0.put("", double0);
      Aluno aluno0 = new Aluno("turma.NotaInvalidaException", "turma.NotaInvalidaException", hashMap0);
      aluno0.incrementaNota(", Notas: ", (-2979.0));
      double double1 = aluno0.media();
      assertEquals((-2979.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Aluno aluno0 = new Aluno("m$e?='nVuL-`u", "m$e?='nVuL-`u");
      aluno0.setNota("{/~JR~M][N", 20.0);
      assertEquals("m$e?='nVuL-`u", aluno0.getNome());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("U<rGj3PrQq", "", hashMap0);
      aluno0.incrementaNota("", 1.0);
      double double0 = aluno0.media();
      assertEquals(1.0, double0, 0.01);
      assertEquals("U<rGj3PrQq", aluno0.getNome());
      assertEquals("", aluno0.getNumero());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.incrementaNota("0&D>JF=:P6,", (-2083.09619));
      double double0 = aluno0.media();
      assertEquals("0", aluno0.getNumero());
      assertEquals((-2083.09619), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno((String) null, (String) null, hashMap0);
      String string0 = aluno0.getNumero();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.setNumero("");
      String string0 = aluno0.getNumero();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("U<rGj3PrQq", "", hashMap0);
      aluno0.incrementaNota("", 1.0);
      double double0 = aluno0.getNota("");
      assertEquals(1.0, double0, 0.01);
      assertEquals("U<rGj3PrQq", aluno0.getNome());
      assertEquals("", aluno0.getNumero());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("turma.NotaInvalidaException", "turma.NotaInvalidaException", hashMap0);
      aluno0.incrementaNota(", Notas: ", (-2979.0));
      double double0 = aluno0.getNota(", Notas: ");
      assertEquals((-2979.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.setNome((String) null);
      aluno0.getNome();
      assertEquals("0", aluno0.getNumero());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("turma.NotaInvalidaException", "turma.NotaInvalidaException", hashMap0);
      String string0 = aluno0.getNome();
      assertEquals("turma.NotaInvalidaException", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Aluno aluno0 = new Aluno("<(sXr;f~v", "<(sXr;f~v", (Map<String, Double>) null);
      // Undeclared exception!
      try { 
        aluno0.setNota("<(sXr;f~v", 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("'&K5h", "'&K5h", hashMap0);
      hashMap0.put("", (Double) null);
      // Undeclared exception!
      try { 
        aluno0.media();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Aluno aluno0 = new Aluno("'el:4K,s~a#_4qn", "'el:4K,s~a#_4qn", (Map<String, Double>) null);
      // Undeclared exception!
      try { 
        aluno0.incrementaNota("turma.NotaInvalidaException", (-5406.925));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Aluno aluno0 = new Aluno("Nota inv\u00E1lida", "Nota inv\u00E1lida");
      aluno0.setNumero((String) null);
      Aluno aluno1 = aluno0.clone();
      // Undeclared exception!
      try { 
        aluno0.equals(aluno1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Aluno aluno0 = new Aluno("_9i3ZY|p/Jq", "_9i3ZY|p/Jq", (Map<String, Double>) null);
      // Undeclared exception!
      try { 
        aluno0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Aluno aluno0 = null;
      try {
        aluno0 = new Aluno((Aluno) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      String string0 = aluno0.getNumero();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Aluno aluno1 = new Aluno(aluno0);
      assertEquals("0", aluno1.getNumero());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Aluno aluno0 = new Aluno("", "");
      String string0 = aluno0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      double double0 = aluno0.media();
      assertEquals("0", aluno0.getNumero());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Aluno aluno0 = new Aluno("turma.Aluno", "turma.Aluno");
      aluno0.setNota((String) null, 0.0);
      double double0 = aluno0.media();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno(")ptR]'YW[=8j:o(", (String) null, hashMap0);
      try { 
        aluno0.setNota(")ptR]'YW[=8j:o(", 1176.17);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nota inv\u00E1lida
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Aluno aluno0 = new Aluno("", "");
      try { 
        aluno0.setNota("", (-1060.613));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nota inv\u00E1lida
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Aluno aluno0 = new Aluno("", "");
      Double double0 = new Double(0.0);
      boolean boolean0 = aluno0.equals(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Aluno aluno0 = new Aluno("turma.Aluno", "turma.Aluno");
      boolean boolean0 = aluno0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Aluno aluno0 = new Aluno("turma.Aluno", "turma.Aluno");
      boolean boolean0 = aluno0.equals(aluno0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Aluno aluno0 = new Aluno("", "");
      Aluno aluno1 = new Aluno("Nome: , N\u00FAmero: , Notas: {}", "");
      boolean boolean0 = aluno0.equals(aluno1);
      assertEquals("", aluno1.getNumero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Aluno aluno0 = new Aluno("", "");
      aluno0.setNome("Nome: , N\u00FAmero: , Notas: {}");
      Aluno aluno1 = new Aluno("Nome: , N\u00FAmero: , Notas: {}", "");
      boolean boolean0 = aluno0.equals(aluno1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("", "", hashMap0);
      hashMap0.put("turma.Aluno", (Double) null);
      // Undeclared exception!
      try { 
        aluno0.getNota("turma.Aluno");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Aluno aluno0 = new Aluno("", "");
      String string0 = aluno0.toString();
      assertEquals("Nome: , N\u00FAmero: , Notas: {}", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Aluno aluno0 = new Aluno("", "");
      aluno0.incrementaNota("", 0.0);
      aluno0.setNome("Nome: , N\u00FAmero: , Notas: {}");
      Aluno aluno1 = new Aluno("Nome: , N\u00FAmero: , Notas: {}", "");
      boolean boolean0 = aluno0.equals(aluno1);
      assertEquals("", aluno1.getNumero());
      assertEquals("Nome: , N\u00FAmero: , Notas: {}", aluno1.getNome());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Aluno aluno1 = aluno0.clone();
      assertEquals("0", aluno0.getNumero());
      
      aluno0.setNumero("1");
      boolean boolean0 = aluno0.equals(aluno1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Aluno aluno0 = new Aluno("Nota inv\u00E1lida", "Nota inv\u00E1lida");
      double double0 = aluno0.getNota("Nota inv\u00E1lida");
      assertEquals(0.0, double0, 0.01);
  }
}
