/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 16 15:19:22 GMT 2024
 */

package turma;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import turma.Aluno;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Aluno_ESTest extends Aluno_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Aluno aluno0 = new Aluno("", "");
      aluno0.incrementaNota("", 0.0);
      aluno0.incrementaNota("turma.NotaInvalidaException", 20.0);
      double double0 = aluno0.media();
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.setNota("", 20.0);
      assertEquals("0", aluno0.getNumero());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Aluno aluno0 = new Aluno("#|&=GQr$y7&:puZI", "#|&=GQr$y7&:puZI");
      aluno0.incrementaNota("#|&=GQr$y7&:puZI", (-1.0));
      double double0 = aluno0.media();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("", (String) null, hashMap0);
      String string0 = aluno0.getNumero();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Aluno aluno0 = new Aluno("LBq=}2OZvL", "LBq=}2OZvL");
      String string0 = aluno0.getNumero();
      assertEquals("LBq=}2OZvL", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.incrementaNota("", 62.9);
      double double0 = aluno0.getNota("");
      assertEquals(62.9, double0, 0.01);
      assertEquals("0", aluno0.getNumero());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.incrementaNota("", (-2650.15642788));
      double double0 = aluno0.getNota("");
      assertEquals("0", aluno0.getNumero());
      assertEquals((-2650.15642788), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Aluno aluno0 = new Aluno((String) null, "3<9VA^Ey;(p");
      String string0 = aluno0.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Aluno aluno0 = new Aluno("LBq=}2OZvL", "LBq=}2OZvL");
      String string0 = aluno0.getNome();
      assertEquals("LBq=}2OZvL", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Aluno aluno0 = new Aluno((String) null, (String) null, (Map<String, Double>) null);
      // Undeclared exception!
      try { 
        aluno0.setNota("", 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("", "", hashMap0);
      hashMap0.put((String) null, (Double) null);
      // Undeclared exception!
      try { 
        aluno0.media();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      hashMap0.put((String) null, (Double) null);
      Aluno aluno0 = new Aluno("", "", hashMap0);
      // Undeclared exception!
      try { 
        aluno0.incrementaNota((String) null, (-1323.99426602319));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("", "", hashMap0);
      hashMap0.put((String) null, (Double) null);
      // Undeclared exception!
      try { 
        aluno0.getNota((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Aluno aluno0 = new Aluno((String) null, (String) null);
      Aluno aluno1 = new Aluno();
      // Undeclared exception!
      try { 
        aluno0.equals(aluno1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Aluno aluno0 = null;
      try {
        aluno0 = new Aluno((Aluno) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("", "", hashMap0);
      String string0 = aluno0.getNumero();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("", "", hashMap0);
      String string0 = aluno0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Aluno aluno0 = new Aluno((String) null, (String) null);
      double double0 = aluno0.media();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      try { 
        aluno0.setNota("!", 2038.5227100748411);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nota inv\u00E1lida
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Aluno aluno0 = new Aluno((String) null, (String) null);
      try { 
        aluno0.setNota("1s8>At{jic65:N", (-1.0));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nota inv\u00E1lida
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Aluno aluno0 = new Aluno("8", "8");
      Aluno aluno1 = new Aluno(aluno0);
      boolean boolean0 = aluno0.equals(aluno1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Aluno aluno1 = aluno0.clone();
      assertEquals("0", aluno1.getNumero());
      
      aluno1.setNumero("/");
      boolean boolean0 = aluno1.equals(aluno0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Aluno aluno0 = new Aluno("8", "8");
      Aluno aluno1 = new Aluno(aluno0);
      assertTrue(aluno1.equals((Object)aluno0));
      
      aluno0.setNome("9");
      boolean boolean0 = aluno1.equals(aluno0);
      assertFalse(aluno1.equals((Object)aluno0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      boolean boolean0 = aluno0.equals("Nome: , N\u00FAmero: 0, Notas: {null=15.510097403095033}");
      assertEquals("0", aluno0.getNumero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      boolean boolean0 = aluno0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("0", aluno0.getNumero());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Aluno aluno0 = new Aluno((String) null, (String) null);
      boolean boolean0 = aluno0.equals(aluno0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Aluno aluno1 = aluno0.clone();
      assertTrue(aluno1.equals((Object)aluno0));
      
      aluno0.setNota((String) null, 15.510097403095033);
      boolean boolean0 = aluno0.equals(aluno1);
      assertFalse(aluno1.equals((Object)aluno0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Aluno aluno0 = new Aluno((String) null, "UpB87\"DJ c76:A{%.[", (Map<String, Double>) null);
      // Undeclared exception!
      try { 
        aluno0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      String string0 = aluno0.toString();
      assertEquals("Nome: , N\u00FAmero: 0, Notas: {}", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Aluno aluno0 = new Aluno((String) null, (String) null);
      double double0 = aluno0.getNota((String) null);
      assertEquals(0.0, double0, 0.01);
  }
}
