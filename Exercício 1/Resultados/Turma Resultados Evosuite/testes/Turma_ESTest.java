/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 16 15:21:01 GMT 2024
 */

package turma;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import turma.Aluno;
import turma.Turma;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Turma_ESTest extends Turma_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno();
      aluno0.setNota("", 10.0);
      turma0.addAluno(aluno0);
      List<Aluno> list0 = turma0.reprovados();
      assertFalse(list0.contains(aluno0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno();
      aluno0.setNota("", 10.0);
      turma0.addAluno(aluno0);
      double double0 = turma0.media();
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-1150.621819724));
      hashMap0.put("#=TEe]f9J]_", double0);
      Aluno aluno0 = new Aluno("yA${:b,6)(", "~w6U<Us;RogX'+", hashMap0);
      turma0.addAluno(aluno0);
      double double1 = turma0.media();
      assertEquals((-1150.621819724), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno("", "");
      turma0.addAluno(aluno0);
      List<Aluno> list0 = turma0.getAlunos();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Aluno> linkedList0 = new LinkedList<Aluno>();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(0, 168.0F);
      Aluno aluno0 = new Aluno("XJl!z", "", hashMap0);
      linkedList0.add(aluno0);
      Turma turma0 = new Turma(linkedList0);
      Aluno aluno1 = turma0.getAluno("");
      assertEquals("XJl!z", aluno1.getNome());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Turma turma0 = new Turma();
      // Undeclared exception!
      try { 
        turma0.setAlunos((List<Aluno>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      hashMap0.put("LF", (Double) null);
      Aluno aluno0 = new Aluno("", "", hashMap0);
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.reprovados();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("I)GyjMf}bXuOd", (String) null, hashMap0);
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.removeAluno("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Aluno> linkedList0 = new LinkedList<Aluno>();
      Turma turma0 = new Turma(linkedList0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      hashMap0.put("SQF#+C,,%", (Double) null);
      Aluno aluno0 = new Aluno("SQF#+C,,%", "SQF#+C,,%", hashMap0);
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.media();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Aluno> linkedList0 = new LinkedList<Aluno>();
      Aluno aluno0 = new Aluno("turma.Turma", (String) null);
      linkedList0.add(aluno0);
      Turma turma0 = new Turma(linkedList0);
      // Undeclared exception!
      try { 
        turma0.getAluno((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Aluno> linkedList0 = new LinkedList<Aluno>();
      Turma turma0 = new Turma(linkedList0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno((String) null, (String) null, hashMap0);
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.containsAluno("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Turma turma0 = new Turma();
      // Undeclared exception!
      try { 
        turma0.addAluno((Aluno) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Turma turma0 = null;
      try {
        turma0 = new Turma((Turma) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Turma turma0 = null;
      try {
        turma0 = new Turma((List<Aluno>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Turma turma0 = new Turma();
      List<Aluno> list0 = turma0.getAlunos();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Turma turma0 = new Turma();
      LinkedList<Aluno> linkedList0 = new LinkedList<Aluno>();
      Aluno aluno0 = new Aluno();
      linkedList0.add(aluno0);
      aluno0.setNota("Sugk!W<_.{2Aup", 20.0);
      turma0.setAlunos(linkedList0);
      List<Aluno> list0 = turma0.reprovados();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno("", "");
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.reprovados();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno("", "");
      turma0.addAluno(aluno0);
      double double0 = turma0.media();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Turma turma0 = new Turma();
      double double0 = turma0.media();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno("", "");
      turma0.addAluno(aluno0);
      aluno0.incrementaNota((String) null, Double.NaN);
      turma0.addAluno(aluno0);
      turma0.removeAluno("");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno();
      turma0.addAluno(aluno0);
      try { 
        turma0.removeAluno("EDRIX}OR[.L(v");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // EDRIX}OR[.L(v
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno("", "");
      turma0.addAluno(aluno0);
      boolean boolean0 = turma0.containsAluno("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Turma turma0 = new Turma();
      boolean boolean0 = turma0.containsAluno("D=;X~^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("", "", hashMap0);
      turma0.addAluno(aluno0);
      turma0.addAluno(aluno0);
      assertEquals("", aluno0.getNumero());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Aluno> linkedList0 = new LinkedList<Aluno>();
      Turma turma0 = new Turma(linkedList0);
      Turma turma1 = new Turma(turma0);
      assertFalse(turma1.equals((Object)turma0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Aluno> linkedList0 = new LinkedList<Aluno>();
      Turma turma0 = new Turma(linkedList0);
      try { 
        turma0.getAluno((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Turma", e);
      }
  }
}
