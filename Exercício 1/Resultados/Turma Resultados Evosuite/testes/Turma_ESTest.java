/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 16 17:51:25 GMT 2024
 */

package turma;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import turma.Aluno;
import turma.Turma;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Turma_ESTest extends Turma_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Aluno> linkedList0 = new LinkedList<Aluno>();
      Aluno aluno0 = new Aluno("", " ,<.");
      aluno0.incrementaNota("", 20.0);
      aluno0.setNota("OF+021%!mGH3", 0.0);
      linkedList0.add(aluno0);
      Turma turma0 = new Turma(linkedList0);
      List<Aluno> list0 = turma0.reprovados();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(2870.3098652726258);
      hashMap0.put("WM<H6CwIc<X0", double0);
      Aluno aluno0 = new Aluno("WM<H6CwIc<X0", "WM<H6CwIc<X0", hashMap0);
      turma0.addAluno(aluno0);
      double double1 = turma0.media();
      assertEquals(2870.3098652726258, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno(", N\u00FAmero: ", ", N\u00FAmero: ", hashMap0);
      Double double0 = new Double((-1263.4236235968422));
      hashMap0.put("turma.AlunoInexistenteException", double0);
      turma0.addAluno(aluno0);
      double double1 = turma0.media();
      assertEquals((-1263.4236235968422), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno((String) null, (String) null, hashMap0);
      turma0.addAluno(aluno0);
      List<Aluno> list0 = turma0.getAlunos();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("WM<H6CwIc<X0", "WM<H6CwIc<X0", hashMap0);
      turma0.addAluno(aluno0);
      Aluno aluno1 = turma0.getAluno("WM<H6CwIc<X0");
      assertNotSame(aluno1, aluno0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Turma turma0 = new Turma();
      // Undeclared exception!
      try { 
        turma0.setAlunos((List<Aluno>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno(", N\u00FAmeOro: ", ", N\u00FAmeOro: ", hashMap0);
      turma0.addAluno(aluno0);
      hashMap0.put(", N\u00FAmeOro: ", (Double) null);
      turma0.addAluno(aluno0);
      turma0.removeAluno(", N\u00FAmeOro: ");
      // Undeclared exception!
      try { 
        turma0.reprovados();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno();
      aluno0.setNumero((String) null);
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.removeAluno("5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("XV^2KH<u.T", "XV^2KH<u.T", hashMap0);
      hashMap0.put("3Zf^f", (Double) null);
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.media();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Aluno", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno("turma.AlunoInexistenteException", (String) null, hashMap0);
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.containsAluno("~q;v\"GU=n07N^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Turma turma0 = new Turma();
      // Undeclared exception!
      try { 
        turma0.addAluno((Aluno) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Turma turma0 = null;
      try {
        turma0 = new Turma((Turma) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Turma turma0 = null;
      try {
        turma0 = new Turma((List<Aluno>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Turma turma0 = new Turma();
      List<Aluno> list0 = turma0.getAlunos();
      turma0.setAlunos(list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno("", "");
      aluno0.setNota("", Double.NaN);
      turma0.addAluno(aluno0);
      List<Aluno> list0 = turma0.reprovados();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno(", N\u00FAmeOro: ", ", N\u00FAmeOro: ", hashMap0);
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.reprovados();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno(", N\u00FAmero: ", ", N\u00FAmero: ", hashMap0);
      turma0.addAluno(aluno0);
      double double0 = turma0.media();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Turma turma0 = new Turma();
      double double0 = turma0.media();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno(", N\u00FAmero: ", ", N\u00FAmero: ", hashMap0);
      turma0.addAluno(aluno0);
      try { 
        turma0.removeAluno("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 0
         //
         verifyException("turma.Turma", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno(", N\u00FAmero: ", ", N\u00FAmero: ", hashMap0);
      turma0.addAluno(aluno0);
      boolean boolean0 = turma0.containsAluno(", N\u00FAmero: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Turma turma0 = new Turma();
      boolean boolean0 = turma0.containsAluno("]>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Turma turma0 = new Turma();
      Aluno aluno0 = new Aluno();
      turma0.addAluno(aluno0);
      turma0.addAluno(aluno0);
      assertEquals("", aluno0.getNome());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Turma turma0 = new Turma();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Aluno aluno0 = new Aluno((String) null, (String) null, hashMap0);
      turma0.addAluno(aluno0);
      // Undeclared exception!
      try { 
        turma0.getAluno("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Turma turma0 = new Turma();
      Turma turma1 = new Turma(turma0);
      assertFalse(turma1.equals((Object)turma0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Turma turma0 = new Turma();
      try { 
        turma0.getAluno("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("turma.Turma", e);
      }
  }
}
