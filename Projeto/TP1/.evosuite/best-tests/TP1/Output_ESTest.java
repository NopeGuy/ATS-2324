/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 16:56:37 GMT 2024
 */

package TP1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TP1.Artigo;
import TP1.Encomenda;
import TP1.Output;
import TP1.TShirt;
import TP1.Transportadoras;
import java.time.LocalDate;
import java.time.Month;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Output_ESTest extends Output_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Output output0 = new Output();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "M";
      stringArray0[2] = "q/<Bwi\">:E";
      stringArray0[3] = "";
      stringArray0[4] = "EXPEDIDA";
      output0.printMenus(stringArray0, "M", (-3337));
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Output output0 = new Output();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^W0ljH";
      stringArray0[1] = "";
      stringArray0[2] = "V*S_ujJnay#)3kNg";
      stringArray0[3] = "$VALUES";
      output0.printMenus(stringArray0, "<61E+an+sQ%z(i(", 1933);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Output output0 = new Output();
      // Undeclared exception!
      try { 
        output0.printTransportadoras((Map<String, Transportadoras>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Output output0 = new Output();
      // Undeclared exception!
      try { 
        output0.printTop10((Map<String, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Output output0 = new Output();
      // Undeclared exception!
      try { 
        output0.printMenus((String[]) null, "c?F_VATTD", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Output output0 = new Output();
      // Undeclared exception!
      try { 
        output0.printEncomendas((List<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Output output0 = new Output();
      // Undeclared exception!
      try { 
        output0.printCarrinho((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Output output0 = new Output();
      Month month0 = Month.OCTOBER;
      LocalDate localDate0 = MockLocalDate.of(10, month0, 10);
      // Undeclared exception!
      try { 
        output0.printArtigos((List<Artigo>) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Output output0 = new Output();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-1.0));
      hashMap0.put("w!1:<", double0);
      output0.printTop10(hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Output output0 = new Output();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2096));
      linkedList0.add(integer0);
      output0.printCarrinho(linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Output output0 = new Output();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.addLast(encomenda0);
      output0.printEncomendas(linkedList0);
      assertTrue(linkedList0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Output output0 = new Output();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      LocalDate localDate0 = MockLocalDate.now();
      TShirt tShirt0 = new TShirt();
      linkedList0.add((Artigo) tShirt0);
      output0.printArtigos(linkedList0, localDate0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Output output0 = new Output();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Function<Object, Transportadoras> function0 = (Function<Object, Transportadoras>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Transportadoras transportadoras0 = hashMap0.computeIfAbsent("\n", function0);
      hashMap0.put("TP1.Encomenda$Estado_Encomenda", transportadoras0);
      output0.printTransportadoras(hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Output output0 = new Output();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nah";
      output0.printMenus(stringArray0, "nah", 0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Output output0 = new Output();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&_^RLT&%LwCR+)m,;";
      output0.printMenus(stringArray0, "TP1.Encoenda$Dimensao_Mmbalagem", 4446);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Output output0 = new Output();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "E}IvV9GXWj";
      stringArray0[1] = "z%WbP7hCl%{";
      stringArray0[2] = "";
      stringArray0[3] = "2E";
      stringArray0[4] = "f`_4V9Pw{";
      stringArray0[5] = "]%9$zW<";
      output0.printMenus(stringArray0, "]%9$zW<", 2097);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Output output0 = new Output();
      output0.formulasTransportadora();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Output output0 = new Output();
      output0.printMessage("B' MWGB}|1IvK");
  }
}
