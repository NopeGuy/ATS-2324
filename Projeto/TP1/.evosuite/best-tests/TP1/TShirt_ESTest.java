/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 16:59:50 GMT 2024
 */

package TP1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TP1.Artigo;
import TP1.TShirt;
import java.time.LocalDate;
import java.time.Month;
import java.time.chrono.HijrahDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TShirt_ESTest extends TShirt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.L;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.LISO;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, (String) null, artigo_Estado0, 3433, artigo_Avaliação0, "*J[F}[cu", "", (String) null, 3433, 3433, (String) null);
      tShirt0.setPrecoBase((-142.4759103692987));
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3433);
      double double0 = tShirt0.precoFinal(localDate0);
      assertEquals((-142.4759103692987), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.M;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "TP1.TShirt$Tamanho", artigo_Estado0, (-1511), artigo_Avaliação0, "TP1.TShirt$Tamanho", "Transportadora: ", "TP1.TShirt$Tamanho", 1536.2139335432973, (-1.0), "SB)\"\"=ZU8+{nP!8'0W");
      TShirt.Tamanho tShirt_Tamanho1 = tShirt0.getTamanho();
      assertEquals(TShirt.Tamanho.M, tShirt_Tamanho1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.L;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.LISO;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, (String) null, artigo_Estado0, 3433, artigo_Avaliação0, "*J[F}[cu", "", (String) null, 3433, 3433, (String) null);
      TShirt.Padrao tShirt_Padrao1 = tShirt0.getPadrao();
      assertSame(tShirt_Padrao1, tShirt_Padrao0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.M;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.PALMEIRAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.IMPECÁVEL;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "NOVO", artigo_Estado0, (-3735), artigo_Avaliação0, "(fkTX[", "d=WmDz@#mAK~W&oN%", (String) null, 5179.0, 5179.0, "FTa_:d5lRVEfMZ.o");
      TShirt tShirt1 = tShirt0.clone();
      assertTrue(tShirt1.equals((Object)tShirt0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      tShirt0.setId(0);
      TShirt tShirt1 = tShirt0.clone();
      assertNull(tShirt1.getEstado());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.M;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.IMPECÁVEL;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "LISO", artigo_Estado0, (-940), artigo_Avaliação0, "Padrao: ", "LISO", (String) null, (-940), 0.0, "Padrao: ");
      tShirt0.setId((-940));
      TShirt tShirt1 = tShirt0.clone();
      assertTrue(tShirt1.equals((Object)tShirt0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.L;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.LISO;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, (String) null, artigo_Estado0, 3433, artigo_Avaliação0, "*J[F}[cu", "", (String) null, 3433, 3433, (String) null);
      TShirt tShirt1 = tShirt0.clone();
      assertTrue(tShirt1.equals((Object)tShirt0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.L;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "Tipo: ", artigo_Estado0, (-2072), artigo_Avaliação0, "Tipo: ", "TP1.Artigo$Estado", "W6Hy%S=goo", (-1050.1495), (-2072), "TP1.Artigo$Estado");
      TShirt tShirt1 = tShirt0.clone();
      assertTrue(tShirt1.equals((Object)tShirt0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TShirt tShirt0 = null;
      try {
        tShirt0 = new TShirt((TShirt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1866L);
      double double0 = tShirt0.precoFinal(localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.M;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "TP1.TShirt$Tamanho", artigo_Estado0, (-1511), artigo_Avaliação0, "TP1.TShirt$Tamanho", "Transportadora: ", "TP1.TShirt$Tamanho", 1536.2139335432973, (-1.0), "SB)\"\"=ZU8+{nP!8'0W");
      double double0 = tShirt0.precoFinal((LocalDate) null);
      assertEquals(1536.2139335432973, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      tShirt0.getTamanho();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      tShirt0.getPadrao();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt tShirt1 = new TShirt(tShirt0);
      assertNull(tShirt1.getPadrao());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.L;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.LISO;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, (String) null, artigo_Estado0, 3433, artigo_Avaliação0, "*J[F}[cu", "", (String) null, 3433, 3433, (String) null);
      TShirt.Padrao tShirt_Padrao1 = TShirt.Padrao.PALMEIRAS;
      tShirt0.setPadrao(tShirt_Padrao1);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3433);
      double double0 = tShirt0.precoFinal(localDate0);
      assertEquals(1716.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      Month month0 = Month.JULY;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      tShirt0.setPadrao(tShirt_Padrao0);
      String string0 = tShirt0.toString(localDate0);
      assertEquals("ID: 1\nTipo: \nEstado: null\nN\u00FAmero de Donos: 0\nAvalia\u00E7\u00E3o: null\nDescri\u00E7\u00E3o: \nMarca: \nC\u00F3digo: \nPre\u00E7o Base: 0.0\nCorre\u00E7\u00E3o do Pre\u00E7o: 0.0\nTransportadora: null\nTamanho: null\nPadrao: RISCAS\nPre\u00E7o Final: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt tShirt1 = new TShirt();
      boolean boolean0 = tShirt0.equals(tShirt1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      boolean boolean0 = tShirt0.equals(hijrahDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      boolean boolean0 = tShirt0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      boolean boolean0 = tShirt0.equals(tShirt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt tShirt1 = new TShirt();
      assertTrue(tShirt1.equals((Object)tShirt0));
      
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      tShirt0.setPadrao(tShirt_Padrao0);
      boolean boolean0 = tShirt0.equals(tShirt1);
      assertFalse(tShirt1.equals((Object)tShirt0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.XL;
      tShirt0.setTamanho(tShirt_Tamanho0);
      assertEquals("", tShirt0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.XL;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.PALMEIRAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "B<J[b4Vo8By`-", artigo_Estado0, (-2336), artigo_Avaliação0, "B<J[b4Vo8By`-", "B<J[b4Vo8By`-", "B<J[b4Vo8By`-", (-2336), (-2336), "B<J[b4Vo8By`-");
      TShirt tShirt1 = new TShirt();
      boolean boolean0 = tShirt0.equals(tShirt1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      tShirt0.setPadrao(tShirt_Padrao0);
      tShirt0.setNumeroDonos((-2654));
      String string0 = tShirt0.toString((LocalDate) null);
      assertEquals("ID: 1\nTipo: \nEstado: null\nN\u00FAmero de Donos: -2654\nAvalia\u00E7\u00E3o: null\nDescri\u00E7\u00E3o: \nMarca: \nC\u00F3digo: \nPre\u00E7o Base: 0.0\nCorre\u00E7\u00E3o do Pre\u00E7o: 0.0\nTransportadora: null\nTamanho: null\nPadrao: RISCAS\nPre\u00E7o Final: 0.0\n", string0);
  }
}
