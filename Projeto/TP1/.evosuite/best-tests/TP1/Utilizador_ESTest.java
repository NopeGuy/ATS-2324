/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 16:47:12 GMT 2024
 */

package TP1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TP1.Artigo;
import TP1.Malas;
import TP1.TShirt;
import TP1.Utilizador;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.ofYearDay(4, 4);
      utilizador0.calculaFaturacaoIntervalo((LocalDate) null, localDate0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.adicionaFaturacao(localDate0, 273.7800225822);
      utilizador0.adicionaFaturacao(localDate0, 1608.2995759011394);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Period period0 = Period.ofYears(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      utilizador0.adicionaFaturacao(localDate0, 1522.0401975405);
      Double double0 = new Double(0);
      utilizador0.removeFaturacao(localDate0, double0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Double double0 = new Double(807);
      hashMap0.put((LocalDate) null, double0);
      Utilizador utilizador1 = new Utilizador("t:^9YI{);", "t:^9YI{);", "t:^9YI{);", "t:^9YI{);", 807, list0, list0, list0, hashMap0);
      utilizador1.removeFaturacao((LocalDate) null, double0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals(807, utilizador1.getNif());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-1.0F), "4|UPmZU/ActKbYn[|'", 0, "qt{", artigo_Estado0, (-1144), artigo_Avaliação0, "qt{", "`C^ZMTQdJ|Va", "`C^ZMTQdJ|Va", 0, (-4616), "");
      linkedList0.offerLast(malas0);
      utilizador0.setVendas(linkedList0);
      utilizador0.removeVenda((-4616));
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender(47);
      assertNull(artigo0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      utilizador0.removeCompras(list0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 416.0F, (String) null, 47, (String) null, artigo_Estado0, 47, artigo_Avaliação0, (String) null, (String) null, (String) null, 416.0F, 47, "");
      malas0.setId((-4616));
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender((-4616));
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      malas0.setId((-4616));
      malas0.setNumeroDonos((-4616));
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender((-4616));
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      malas0.setId(0);
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender(0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 416.0F, (String) null, 47, (String) null, artigo_Estado0, 47, artigo_Avaliação0, (String) null, (String) null, (String) null, 416.0F, 47, "");
      malas0.setId(47);
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender(47);
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-87), (String) null, (-87), (String) null, artigo_Estado0, (-87), artigo_Avaliação0, (String) null, (String) null, (String) null, (-87), (-87), (String) null);
      malas0.setId((-4650));
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender((-4650));
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "", "", "0ZHKVm23@", (-1), linkedList0, linkedList0, linkedList0, hashMap0);
      utilizador0.getVendas();
      assertEquals((-1), utilizador0.getNif());
      assertEquals("", utilizador0.getPassword());
      assertEquals("0ZHKVm23@", utilizador0.getMorada());
      assertEquals("", utilizador0.getEmail());
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador((String) null, (String) null, "", "", 0, linkedList0, linkedList0, linkedList0, map0);
      String string0 = utilizador1.getPassword();
      assertNull(string0);
      assertEquals(0, utilizador1.getNif());
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador1 = new Utilizador("t:^9YI{);", "t:^9YI{);", "t:^9YI{);", "t:^9YI{);", 807, list0, list0, list0, hashMap0);
      utilizador1.getPassword();
      assertEquals(807, utilizador1.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador((String) null, "_>~XM!8+'R.PV{s5ST", (String) null, "", (-1), linkedList0, linkedList0, linkedList0, map0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      String string0 = utilizador2.getNome();
      assertEquals("", utilizador2.getMorada());
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador2.getId());
      assertEquals("_>~XM!8+'R.PV{s5ST", utilizador2.getPassword());
      assertEquals((-1), utilizador2.getNif());
      assertEquals(1, utilizador0.getId());
      assertEquals((-1), utilizador1.getNif());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome("{(get'yWiT");
      utilizador0.getNome();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNif(1708);
      int int0 = utilizador0.getNif();
      assertEquals(1708, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("C l~cl[oeY\"]1", "{(get'yWiT", "", "", (-2194), list0, list0, list0, map0);
      int int0 = utilizador1.getNif();
      assertEquals((-2194), int0);
      assertEquals("{(get'yWiT", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getMorada());
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals("C l~cl[oeY\"]1", utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("Por Vender: ", (String) null, "Por Vender: ", (String) null, (-1), linkedList0, linkedList0, linkedList0, map0);
      String string0 = utilizador1.getMorada();
      assertEquals((-1), utilizador1.getNif());
      assertEquals(2, utilizador1.getId());
      assertNull(string0);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("Tamanho: ", "AJJ{z~", "Tamanho: ", "Tamanho: ", (-1), list0, list0, list0, map0);
      String string0 = utilizador1.getMorada();
      assertEquals(2, utilizador1.getId());
      assertEquals("Tamanho: ", utilizador1.getEmail());
      assertEquals("AJJ{z~", utilizador1.getPassword());
      assertEquals("Tamanho: ", utilizador1.getNome());
      assertEquals((-1), utilizador1.getNif());
      assertEquals("Tamanho: ", string0);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(1, utilizador0.getId());
      
      utilizador0.setId(0);
      int int0 = utilizador0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("uk2,", "uk2,", "#J^GExX", "\n", 0, list0, list0, list0, map0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      Utilizador utilizador3 = new Utilizador(utilizador2);
      utilizador3.setId((-1));
      int int0 = utilizador3.getId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Double double0 = new Double(807);
      hashMap0.put((LocalDate) null, double0);
      Utilizador utilizador1 = new Utilizador("t:^9YI{);", "t:^9YI{);", "t:^9YI{);", "t:^9YI{);", 807, list0, list0, list0, hashMap0);
      utilizador1.getFaturacao();
      assertEquals(0, utilizador0.getNif());
      assertEquals(807, utilizador1.getNif());
      assertEquals(2, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador((String) null, (String) null, (String) null, (String) null, 0, linkedList0, linkedList0, linkedList0, map0);
      utilizador1.getEmail();
      assertEquals(2, utilizador1.getId());
      assertEquals(0, utilizador0.getNif());
      assertEquals(0, utilizador1.getNif());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("Tamanho: ", "AJJ{z~", "Tamanho: ", "Tamanho: ", (-1), list0, list0, list0, map0);
      String string0 = utilizador1.getEmail();
      assertEquals(2, utilizador1.getId());
      assertEquals(0, utilizador0.getNif());
      assertEquals("Tamanho: ", utilizador1.getNome());
      assertEquals("AJJ{z~", utilizador1.getPassword());
      assertEquals("Tamanho: ", utilizador1.getMorada());
      assertEquals((-1), utilizador1.getNif());
      assertEquals("Tamanho: ", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      assertEquals(0, utilizador0.getNif());
      
      utilizador0.setNif(1);
      utilizador0.setVendas(list0);
      utilizador0.clone();
      assertEquals(1, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(1, utilizador0.getId());
      
      utilizador0.setId(0);
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      utilizador0.setVendas(linkedList0);
      utilizador0.clone();
      assertEquals(0, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "", "", "0ZHKVm23@", (-1), linkedList0, linkedList0, linkedList0, hashMap0);
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals(1, utilizador1.getId());
      assertEquals("0ZHKVm23@", utilizador1.getMorada());
      assertEquals((-1), utilizador0.getNif());
      assertEquals((-1), utilizador1.getNif());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getPassword());
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("uk2,", "uk2,", "#J^GExX", "\n", 0, list0, list0, list0, map0);
      utilizador1.setId((-1));
      utilizador1.clone();
      assertEquals((-1), utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Double double0 = new Double(807);
      hashMap0.put((LocalDate) null, double0);
      Utilizador utilizador1 = new Utilizador("t:^9YI{);", "t:^9YI{);", "t:^9YI{);", "t:^9YI{);", 807, list0, list0, list0, hashMap0);
      double double1 = utilizador1.calculaFaturacaoSempre();
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals(807, utilizador1.getNif());
      assertEquals(807.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "", "", "0ZHKVm23@", (-1), linkedList0, linkedList0, linkedList0, hashMap0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      utilizador0.adicionaFaturacao(localDate0, (-1.0));
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador0.getNome());
      assertEquals("0ZHKVm23@", utilizador0.getMorada());
      assertEquals("", utilizador0.getPassword());
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1), utilizador0.getNif());
      assertEquals("", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setVendas((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      linkedList0.add((Artigo) null);
      // Undeclared exception!
      try { 
        utilizador0.setPorVender(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturacao((Map<LocalDate, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setCompras((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.removeVenda(710);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.getVendas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, 0.0);
      // Undeclared exception!
      try { 
        utilizador0.calculaFaturacaoIntervalo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.adicionarPorVender((Artigo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("FqST7}XnZk:k`mX:", "m G/B|z~r(1tSr2@<", "m G/B|z~r(1tSr2@<", "7Jt|2QR>[", 3, (List<Artigo>) null, (List<Artigo>) null, (List<Artigo>) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "", ",)iqz`:P", "", 0, linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getMorada();
      assertEquals(0, utilizador0.getNif());
      assertEquals("", string0);
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador0.getEmail());
      assertEquals(",)iqz`:P", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      utilizador0.setFaturacao(hashMap0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "", "", "0ZHKVm23@", (-1), linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getNome();
      assertEquals("0ZHKVm23@", utilizador0.getMorada());
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", string0);
      assertEquals((-1), utilizador0.getNif());
      assertEquals("", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getId();
      assertEquals(1, int0);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getPassword();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getEmail();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getNif();
      assertEquals(0, int0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      utilizador0.adicionaFaturacao(localDate0, 3764.11451);
      // Undeclared exception!
      try { 
        utilizador0.removeFaturacao(localDate0, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(790L);
      Double double0 = new Double(790L);
      utilizador0.removeFaturacao(localDate0, double0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertEquals(0, utilizador1.getNif());
      assertEquals(2, utilizador1.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertEquals(1, utilizador0.getId());
      assertFalse(boolean0);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertEquals(0, utilizador0.getNif());
      assertTrue(boolean0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(linkedList0);
      assertEquals(0, utilizador0.getNif());
      assertFalse(boolean0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("6 ie,t2k[", "6 ie,t2k[", "6 ie,t2k[", "6 ie,t2k[", (-1), linkedList0, linkedList0, linkedList0, hashMap0);
      TShirt tShirt0 = new TShirt();
      utilizador0.adicionaVendas(tShirt0);
      utilizador0.removeVenda(1);
      assertEquals((-1), utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas malas0 = new Malas();
      linkedList0.add((Artigo) malas0);
      utilizador0.setVendas(linkedList0);
      utilizador0.removeVenda(774);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 416.0F, (String) null, 47, (String) null, artigo_Estado0, 47, artigo_Avaliação0, (String) null, (String) null, (String) null, 416.0F, 47, "");
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender((-4616));
      assertEquals(1, utilizador0.getId());
      assertNull(artigo0);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas malas0 = new Malas();
      linkedList0.add((Artigo) malas0);
      utilizador0.setVendas(linkedList0);
      List<Artigo> list0 = utilizador0.getVendas();
      assertEquals(1, utilizador0.getId());
      assertFalse(list0.isEmpty());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas malas0 = new Malas();
      linkedList0.add((Artigo) malas0);
      utilizador0.setPorVender(linkedList0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas malas0 = new Malas();
      linkedList0.add((Artigo) malas0);
      utilizador0.setCompras(linkedList0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      utilizador0.adicionaCompra(tShirt0);
      List<Artigo> list0 = utilizador0.getCompras();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      // Undeclared exception!
      try { 
        utilizador0.adicionaVendas(tShirt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada("Pul");
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.toString();
      assertEquals("----------------------------------------\n               UTILIZADOR               \n----------------------------------------\nUtilizador: 1\nEmail: \nPassword: \nNome: \nMorada: \nNIF: 0\nPor Vender: []\n", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword("uk2yd");
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(1, utilizador0.getId());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail("uk2yd");
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.adicionaCompra((Artigo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.removeCompras((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      utilizador0.adicionarPorVender(malas0);
      List<Artigo> list0 = utilizador0.getPorVender();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = null;
      try {
        utilizador1 = new Utilizador(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }
}
