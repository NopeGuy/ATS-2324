/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 16:43:11 GMT 2024
 */

package TP1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TP1.Artigo;
import TP1.Encomenda;
import TP1.Malas;
import TP1.Sapatilhas;
import TP1.Transportadoras;
import TP1.Utilizador;
import TP1.Vintage;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Vintage_ESTest extends Vintage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(4296L);
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoIntervalo((LocalDate) null, localDate0, "ky}`t9sSWL~PpG,`1c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(4296L);
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "ky}`t9NsSWL~PpG,`1c", "", "ky}`t9NsSWL~PpG,`1c", (-1), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      String string0 = vintage0.calculaMaiorFauracaoIntevalo((LocalDate) null, localDate0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        vintage0.aterarTransportadora((String) null, (Double) null, double0, (-1638));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      vintage0.adiarPrazoLimite(1524, 1524);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.adiarPrazoLimite((-66), (-2147483645));
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      vintage0.devolverEncomenda(1685);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      encomenda0.setPrazoLimite(localDate0);
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      vintage0.avancarTempo();
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      Double double0 = new Double(0.0);
      vintage0.aterarTransportadora("", double0, double0, 10);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(4301L);
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "ky}`t9NsSWL~PpG,`1c", "", "ky}`t9NsSWL~PpG,`1c", (-1), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      Sapatilhas.Tipos_Sapatilhas sapatilhas_Tipos_Sapatilhas0 = Sapatilhas.Tipos_Sapatilhas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      Sapatilhas sapatilhas0 = new Sapatilhas((-1), false, (String) null, localDate0, sapatilhas_Tipos_Sapatilhas0, "", artigo_Estado0, (-839), artigo_Avaliação0, "Encomendas: ", "C", ":PM3gI'/WC?iBZ(hL.", 0L, (-1341.345609349496), "ky}`t9NsSWL~PpG,`1c");
      vintage0.adicionarPorVender(sapatilhas0, "");
      assertNull(sapatilhas0.getCor());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      Transportadoras transportadoras1 = vintage0.getTransportadora("");
      assertFalse(transportadoras1.isPremium());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.SetSessaoAtual("9w~}dPgD$m9");
      String string0 = vintage0.getSessaoAtual();
      assertEquals("9w~}dPgD$m9", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Period period0 = Period.ofDays(50);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Vintage vintage1 = new Vintage("", map0, linkedList0, map1, localDate0);
      String string0 = vintage1.getSessaoAtual();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      double double0 = vintage0.getMaiorVolFaturacao("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      Long long0 = new Long(1L);
      transportadoras0.calculaPrecoExpedicao(long0);
      vintage0.adicionarTransportadora(transportadoras0);
      double double0 = vintage0.getMaiorVolFaturacao("");
      assertEquals(1.1700000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.addVolFaturacao((-1.0));
      vintage0.adicionarTransportadora(transportadoras0);
      double double0 = vintage0.getMaiorVolFaturacao("");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("%j@.#'|);Z%~e", "Y*P|3", "aapu`", ")i{YY*m+pBPVxj8U", (-2), list0, list0, list0, map0);
      hashMap0.put("aapu`", utilizador1);
      List<Encomenda> list1 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      Vintage vintage1 = new Vintage("", hashMap0, list1, map1, (LocalDate) null);
      double double0 = vintage1.getMaiorFaturacaoSempre("aapu`");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Double double0 = new Double((-1));
      hashMap0.put((LocalDate) null, double0);
      Utilizador utilizador0 = new Utilizador("", "ky}`t9NsSWL~PpG,`1c", "", "ky}`t9NsSWL~PpG,`1c", (-1), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      double double1 = vintage0.getMaiorFaturacaoSempre("");
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "ky}`t9NsSWL~PpG,`1c", "", "ky}`t9NsSWL~PpG,`1c", (-1), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      double double0 = vintage0.getMaiorFaturacaoIntervalo((LocalDate) null, (LocalDate) null, "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.getEncomendas();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      HashMap<String, Transportadoras> hashMap1 = new HashMap<String, Transportadoras>();
      Vintage vintage1 = new Vintage("Tamanho: ", hashMap0, list0, hashMap1, (LocalDate) null);
      LocalDate localDate0 = vintage1.getDataPrograma();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "ky}`t9NsSWL~PpG,`1c", "", "ky}`t9NsSWL~PpG,`1c", (-1), list0, list0, list0, hashMap0);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      utilizador0.adicionarPorVender(sapatilhas0);
      vintage0.adicionaUtilizador(utilizador0);
      List<Artigo> list1 = vintage0.getArtigosVenda();
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      HashMap<String, Transportadoras> hashMap1 = new HashMap<String, Transportadoras>();
      Period period0 = Period.ofWeeks(30);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      Vintage vintage0 = new Vintage(")pj", hashMap0, linkedList0, hashMap1, localDate0);
      LinkedList<Artigo> linkedList1 = new LinkedList<Artigo>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        vintage0.trataEncomenda((List<Integer>) null, linkedList1, hashMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.addEncomenda((Encomenda) null);
      // Undeclared exception!
      try { 
        vintage0.totalDinheiroVintage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.setTransportadoras((Map<String, Transportadoras>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.setEncomendas((List<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        vintage0.getUtilizadores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      vintage0.addEncomenda(encomenda1);
      // Undeclared exception!
      try { 
        vintage0.encomendasParaDevolver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      LocalDate localDate0 = MockLocalDate.now();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Double double0 = new Double((-1));
      hashMap0.put(localDate0, double0);
      Utilizador utilizador0 = new Utilizador("", "ky}`t9NsSWL~PpG,`1c", "", "ky}`t9NsSWL~PpG,`1c", (-1), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        vintage0.calculaMaiorFauracaoIntevalo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      // Undeclared exception!
      try { 
        vintage0.calculaCustoExpedicao((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      Vintage vintage1 = new Vintage("", hashMap0, list0, map0, (LocalDate) null);
      Encomenda encomenda0 = new Encomenda();
      vintage1.addEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        vintage1.avancarTempo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.adicionarTransportadora((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.adicionaUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vintage vintage0 = null;
      try {
        vintage0 = new Vintage((Vintage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage0.setUtizadores(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put("", utilizador0);
      // Undeclared exception!
      try { 
        vintage0.setUtizadores(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = vintage0.getDataPrograma();
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      String string0 = vintage0.getSessaoAtual();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      double double0 = vintage0.totalDinheiroVintage();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      LocalDate localDate0 = MockLocalDate.now();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "ky}`t9NsSWL~PpG,`1c", "", "ky}`t9NsSWL~PpG,`1c", (-1), list0, list0, list0, hashMap0);
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-86.6225F), "ky}`t9NsSWL~PpG,`1c", (-1), "----------------------------------------\n", artigo_Estado0, (-731), artigo_Avaliação0, "ky}`t9NsSWL~PpG,`1c", "ky}`t9NsSWL~PpG,`1c", "----------------------------------------\n", 0.0, 0.0, "ky}`t9NsSWL~PpG,`1c");
      utilizador0.adicionaCompra(malas0);
      vintage0.adicionaUtilizador(utilizador0);
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      Map<String, Double> map0 = vintage0.top10Compradores(localDate0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("%j@.#'|);Z%~e", "", "", ")i{YY*m+pBPVxj8U", (-9), list0, list0, list0, map0);
      Period period0 = Period.of((-9), (-9), 45);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Sapatilhas.Tipos_Sapatilhas sapatilhas_Tipos_Sapatilhas0 = Sapatilhas.Tipos_Sapatilhas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      Sapatilhas sapatilhas0 = new Sapatilhas((-3567), false, "u{yxIZ8:e<w~r4", localDate0, sapatilhas_Tipos_Sapatilhas0, "%j@.#'|);Z%~e", artigo_Estado0, 0, artigo_Avaliação0, "", "Encomendas: ", "", (-3567), (-9), ")i{YY*m+pBPVxj8U");
      utilizador1.adicionaVendas(sapatilhas0);
      hashMap0.put("", utilizador1);
      List<Encomenda> list1 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Vintage vintage1 = new Vintage("", hashMap0, list1, map1, (LocalDate) null);
      Map<String, Double> map2 = vintage1.top10Vendedores((LocalDate) null);
      assertEquals(1, map2.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.now();
      Map<String, Double> map0 = vintage0.top10Compradores(localDate0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Double> map0 = vintage0.top10Vendedores((LocalDate) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("%j@.#'|);Z%~e", "Y*P|3", "aapu`", "%j@.#'|);Z%~e", 8, list0, list0, list0, map0);
      hashMap0.put("aapu`", utilizador1);
      List<Encomenda> list1 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      Vintage vintage1 = new Vintage("", hashMap0, list1, map1, (LocalDate) null);
      List<Artigo> list2 = vintage1.listarVendas("aapu`");
      assertTrue(list2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.listarVendas("aapu`");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("gln9Z=HB/WkdoV$!}O}", 398.60287284, (-1572.4013991), false, 1.0);
      vintage0.adicionarTransportadora(transportadoras0);
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertEquals("gln9Z=HB/WkdoV$!}O}", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("%j@.#'|);Z%~e", "", "", ")i{YY*m+pBPVxj8U", (-9), list0, list0, list0, map0);
      hashMap0.put("", utilizador1);
      List<Encomenda> list1 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Vintage vintage1 = new Vintage("", hashMap0, list1, map1, (LocalDate) null);
      String string0 = vintage1.calculaMaiorFaturacaoSempre();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      double double0 = vintage0.calculaCustoExpedicao(list0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.offerFirst(integer0);
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      vintage0.trataEncomenda(linkedList0, list0, hashMap0);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.adiarPrazoLimite(1, 1);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.devolverEncomenda(0);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        vintage0.devolverEncomenda(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Encomenda encomenda0 = new Encomenda();
      Map<Integer, String> map0 = encomenda0.getVendedores();
      Encomenda encomenda1 = new Encomenda("Q`lc", list0, (-1341.345609349496), localDate0, map0);
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.DEVOLVIDA;
      encomenda1.setEstado(encomenda_Estado_Encomenda0);
      vintage0.addEncomenda(encomenda1);
      vintage0.avancarTempo();
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2158);
      Encomenda encomenda0 = new Encomenda();
      Map<Integer, String> map0 = encomenda0.getVendedores();
      Encomenda encomenda1 = new Encomenda("gln9Z=HB/WkdoV$!}O}", linkedList0, 0.0, localDate0, map0);
      vintage0.addEncomenda(encomenda1);
      vintage0.avancarTempo();
      double double0 = vintage0.totalDinheiroVintage();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.avancarTempo();
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "ky}`t9NsSWL~PpG,`1c", "", "ky}`t9NsSWL~PpG,`1c", (-1), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      boolean boolean0 = vintage0.existeUser("", "ky}`t9NsSWL~PpG,`1c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.existeUser("gln9Z=HB/WkdoV$!}O}", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.existeEmail("Transportadoras: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      Vintage vintage1 = new Vintage("", hashMap0, list0, map0, (LocalDate) null);
      Encomenda encomenda0 = new Encomenda();
      vintage1.addEncomenda(encomenda0);
      List<Encomenda> list1 = vintage1.getEncomendasSessaoAtual();
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      assertFalse(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.setPremium(true);
      vintage0.adicionarTransportadora(transportadoras0);
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Period period0 = Period.ofMonths(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Vintage vintage1 = new Vintage("Ano da cole\u00E7\u00E3o: ", map0, linkedList0, map1, localDate0);
      Vintage vintage2 = new Vintage(vintage1);
      boolean boolean0 = vintage2.equals(vintage1);
      assertFalse(vintage2.equals((Object)vintage0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("%j@.#'|);Z%~e", "Y*P|3", "aapu`", "%j@.#'|);Z%~e", 8, list0, list0, list0, map0);
      hashMap0.put("aapu`", utilizador1);
      List<Encomenda> list1 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      Vintage vintage1 = new Vintage("", hashMap0, list1, map1, (LocalDate) null);
      Vintage vintage2 = new Vintage("", hashMap0, list1, map1, (LocalDate) null);
      boolean boolean0 = vintage1.equals(vintage2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Period period0 = Period.ofMonths(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Vintage vintage1 = new Vintage("Ano da cole\u00E7\u00E3o: ", map0, linkedList0, map1, localDate0);
      boolean boolean0 = vintage1.equals(vintage0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      boolean boolean0 = vintage0.equals(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.equals(vintage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      Vintage vintage1 = new Vintage("", hashMap0, list0, map0, (LocalDate) null);
      Vintage vintage2 = new Vintage(vintage1);
      Encomenda encomenda0 = new Encomenda();
      vintage2.addEncomenda(encomenda0);
      boolean boolean0 = vintage2.equals(vintage1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Transportadoras transportadoras0 = new Transportadoras("D/D!!^D", (-457.7892524274), 566.45477988564, false, 0.0);
      hashMap0.put("D/D!!^D", transportadoras0);
      vintage0.setTransportadoras(hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      // Undeclared exception!
      try { 
        vintage0.getEncomendasSessaoAtual();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("%j@.#'|);Z%~e", "", "", ")i{YY*m+pBPVxj8U", (-9), list0, list0, list0, map0);
      hashMap0.put("", utilizador1);
      List<Encomenda> list1 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Vintage vintage1 = new Vintage("", hashMap0, list1, map1, (LocalDate) null);
      Map<String, Utilizador> map2 = vintage1.getUtilizadores();
      assertFalse(map2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getMaiorVolFaturacao("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getTransportadora("._XAZJWO@q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      List<Encomenda> list0 = vintage0.getEncomendas();
      assertTrue(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      // Undeclared exception!
      try { 
        vintage0.adicionarPorVender(sapatilhas0, "aEXmp$H/NW,r[m5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.setDataPrograma((LocalDate) null);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "ky}`t9NsSWL~PpG,`1c", "", "ky}`t9NsSWL~PpG,`1c", (-1), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      boolean boolean0 = vintage0.existeEmail("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      String string0 = vintage0.toString();
      assertEquals("----------------------------------------\n               VINTAGE                  \n----------------------------------------\nSess\u00E3o Atual: null\nUtilizadores: {}\nEncomendas: []\nTransportadoras: {}\nData do Programa: 2014-02-14\n", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoSempre(")i{YY*m+pBPVxj8U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("gln9Z=HB/WkdoV$!}O}", 398.60287284, (-1572.4013991), false, (-1.0));
      vintage0.adicionarTransportadora(transportadoras0);
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      // Undeclared exception!
      try { 
        vintage1.equals(vintage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      LocalDate localDate0 = MockLocalDate.ofYearDay(2650, 30);
      Vintage vintage1 = null;
      try {
        vintage1 = new Vintage("", (Map<String, Utilizador>) null, list0, hashMap0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP1.Vintage", e);
      }
  }
}
