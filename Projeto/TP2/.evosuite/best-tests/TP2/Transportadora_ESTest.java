/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 23:29:16 GMT 2024
 */

package TP2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TP2.Transportadora;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadora_ESTest extends Transportadora_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      
      double double0 = transportadora0.preco_transportadora3(2);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("CM't/7", (-2592.0), (-2592.0), (-2592.0), 0.0, (-2592.0), true, 2);
      assertNotNull(transportadora0);
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-2592.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-2592.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals((-2592.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-2592.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("CM't/7", transportadora0.getNome());
      
      double double0 = transportadora0.preco_transportadora2(2);
      assertTrue(transportadora0.isPremium());
      assertEquals(4701110.399999999, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-2592.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-2592.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals((-2592.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-2592.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(2, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("CM't/7", transportadora0.getNome());
      assertEquals(4701110.399999999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 1.0, 1.0, 1.0, (-1.0), 1.0, true, (-1));
      assertNotNull(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-1), transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora0.isPremium());
      
      double double0 = transportadora0.preco_transportadora1(2);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-1), transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertNotNull(transportadora1);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora0.setFormula(1320);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1320, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertFalse(transportadora0.equals((Object)transportadora1));
      
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1320, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("7V7&Z3c", 0.0, 0.0, (-468.8), (-1.0), 2088.755673360323, true, (-2554));
      assertNotNull(transportadora0);
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertTrue(transportadora1.isPremium());
      assertEquals((-2554), transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(2088.755673360323, transportadora1.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("7V7&Z3c", transportadora1.getNome());
      assertEquals((-1.0), transportadora1.getImpostos(), 0.01);
      assertEquals((-468.8), transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setTotalLucro((-1.0));
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertTrue(transportadora1.isPremium());
      assertEquals((-2554), transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(2088.755673360323, transportadora1.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("7V7&Z3c", transportadora1.getNome());
      assertEquals((-1.0), transportadora1.getImpostos(), 0.01);
      assertEquals((-468.8), transportadora1.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora1.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertTrue(transportadora1.isPremium());
      assertEquals((-2554), transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(2088.755673360323, transportadora1.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("7V7&Z3c", transportadora1.getNome());
      assertEquals((-1.0), transportadora1.getImpostos(), 0.01);
      assertEquals((-468.8), transportadora1.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora1.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertFalse(transportadora1.isPremium());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setMargemlucro((-1));
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertFalse(transportadora1.isPremium());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertFalse(transportadora1.isPremium());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      assertNotNull(transportadora0);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("", transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("", transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-692.0), transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertEquals("", transportadora1.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertEquals((-4035.7), transportadora1.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setImpostos(552.0282766);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("", transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertEquals("", transportadora1.getNome());
      assertEquals(552.0282766, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertEquals((-4035.7), transportadora1.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("", transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertEquals("", transportadora1.getNome());
      assertEquals(552.0282766, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertEquals((-4035.7), transportadora1.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      assertNotNull(transportadora0);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertNotNull(transportadora1);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertEquals("", transportadora1.getNome());
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-4035.7), transportadora1.getMargemlucro(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals((-692.0), transportadora1.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora0.setValor_pequenas(203.19049);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(203.19049, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertFalse(transportadora0.equals((Object)transportadora1));
      
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(203.19049, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertEquals("", transportadora1.getNome());
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-4035.7), transportadora1.getMargemlucro(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals((-692.0), transportadora1.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertNotNull(transportadora1);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setValor_medio(0.7);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.7, transportadora1.getValor_medio(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.7, transportadora1.getValor_medio(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      assertNotNull(transportadora0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertNotNull(transportadora1);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-4035.7), transportadora1.getMargemlucro(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertEquals((-692.0), transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("", transportadora1.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora0.setValor_grande(-0.0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(-0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertFalse(transportadora0.equals((Object)transportadora1));
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(-0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-4035.7), transportadora1.getMargemlucro(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertEquals((-692.0), transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("", transportadora1.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setId(2L);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(2L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(2L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("DL`", 1194.976138074924, 0.0, 0.0, 1194.976138074924, 1194.976138074924, false, 5);
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("DL`", transportadora0.getNome());
      assertEquals(1194.976138074924, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1194.976138074924, transportadora0.getImpostos(), 0.01);
      assertEquals(5, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1194.976138074924, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      
      double double0 = transportadora0.preco_transportadora3(1);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("DL`", transportadora0.getNome());
      assertEquals(1194.976138074924, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1194.976138074924, transportadora0.getImpostos(), 0.01);
      assertEquals(5, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(2.56172342810273E9, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1194.976138074924, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(2.56172342810273E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (-3282.33), (-3282.33), 0.7, 0.7, 0.7, true, 958);
      assertNotNull(transportadora0);
      assertEquals((-3282.33), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.7, transportadora0.getImpostos(), 0.01);
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals((-3282.33), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(958, transportadora0.getFormula());
      assertNull(transportadora0.getNome());
      
      transportadora0.setImpostos((-2407));
      assertEquals((-3282.33), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals((-3282.33), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-2407.0), transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(958, transportadora0.getFormula());
      assertNull(transportadora0.getNome());
      
      double double0 = transportadora0.preco_transportadora3(102);
      assertEquals((-3282.33), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals((-3282.33), transportadora0.getValor_medio(), 0.01);
      assertEquals((-1768.4099999999999), transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-2407.0), transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(958, transportadora0.getFormula());
      assertNull(transportadora0.getNome());
      assertEquals((-1768.4099999999999), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(")*F|U8`u3I", 0.0, 62.449, (-872.048829512902), 62.449, 0.0, false, 1183);
      assertNotNull(transportadora0);
      assertEquals(62.449, transportadora0.getValor_medio(), 0.01);
      assertEquals(1183, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(")*F|U8`u3I", transportadora0.getNome());
      assertEquals(62.449, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals((-872.048829512902), transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      
      double double0 = transportadora0.preco_transportadora2(963);
      assertEquals(62.449, transportadora0.getValor_medio(), 0.01);
      assertEquals(1183, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(")*F|U8`u3I", transportadora0.getNome());
      assertEquals(62.449, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals((-872.048829512902), transportadora0.getValor_grande(), 0.01);
      assertEquals((-38731.438328634875), transportadora0.getTotalLucro(), 0.01);
      assertEquals((-38731.438328634875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("-^.lC*E^(c*380Q,N", (-2050.26), (-297.585586697011), (-2050.26), (-297.585586697011), 1587.9, true, (-2191));
      assertNotNull(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1587.9, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-297.585586697011), transportadora0.getImpostos(), 0.01);
      assertEquals((-2050.26), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-297.585586697011), transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-2191), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("-^.lC*E^(c*380Q,N", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-2050.26), transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      
      double double0 = transportadora0.preco_transportadora1(5);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1587.9, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-297.585586697011), transportadora0.getImpostos(), 0.01);
      assertEquals((-2050.26), transportadora0.getValor_grande(), 0.01);
      assertEquals(1.2613267098676082E8, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-297.585586697011), transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-2191), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("-^.lC*E^(c*380Q,N", transportadora0.getNome());
      assertEquals((-2050.26), transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(1.2613267098676082E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 1.0, 1.0, 1.0, 1.0, 0.9, true, (-1));
      assertNotNull(transportadora0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1), transportadora0.getFormula());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.9, transportadora0.getMargemlucro(), 0.01);
      
      boolean boolean0 = transportadora0.isPremium();
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1), transportadora0.getFormula());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.9, transportadora0.getMargemlucro(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      transportadora0.setValor_pequenas(1.0);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      double double0 = transportadora0.getValor_pequenas();
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("CM't/7", (-2592.0), (-2592.0), (-2592.0), 0.0, (-2592.0), true, 2);
      assertNotNull(transportadora0);
      assertEquals((-2592.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-2592.0), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-2592.0), transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("CM't/7", transportadora0.getNome());
      assertEquals((-2592.0), transportadora0.getValor_grande(), 0.01);
      assertEquals(2, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      
      double double0 = transportadora0.getValor_pequenas();
      assertEquals((-2592.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-2592.0), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-2592.0), transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("CM't/7", transportadora0.getNome());
      assertEquals((-2592.0), transportadora0.getValor_grande(), 0.01);
      assertEquals(2, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-2592.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      
      double double0 = transportadora0.getValor_medio();
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(")*F|U8`u3I", 0.0, 62.449, (-872.048829512902), 62.449, 0.0, false, 1183);
      assertNotNull(transportadora0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(62.449, transportadora0.getValor_medio(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(62.449, transportadora0.getImpostos(), 0.01);
      assertEquals(1183, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(")*F|U8`u3I", transportadora0.getNome());
      assertEquals((-872.048829512902), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      
      transportadora0.setValor_medio((-368.41378));
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(62.449, transportadora0.getImpostos(), 0.01);
      assertEquals(1183, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(")*F|U8`u3I", transportadora0.getNome());
      assertEquals((-368.41378), transportadora0.getValor_medio(), 0.01);
      assertEquals((-872.048829512902), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      
      double double0 = transportadora0.getValor_medio();
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(62.449, transportadora0.getImpostos(), 0.01);
      assertEquals(1183, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(")*F|U8`u3I", transportadora0.getNome());
      assertEquals((-368.41378), transportadora0.getValor_medio(), 0.01);
      assertEquals((-872.048829512902), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-368.41378), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("4*ysjHq]}", 1252.043033619, 0.0, 0.0, 0.0, 1252.043033619, true, 2356);
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1252.043033619, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1252.043033619, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(2356, transportadora0.getFormula());
      assertEquals("4*ysjHq]}", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      
      transportadora0.setValor_grande(2356);
      assertEquals(1252.043033619, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1252.043033619, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2356.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(2356, transportadora0.getFormula());
      assertEquals("4*ysjHq]}", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      
      double double0 = transportadora0.getValor_grande();
      assertEquals(1252.043033619, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1252.043033619, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2356.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(2356, transportadora0.getFormula());
      assertEquals("4*ysjHq]}", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2356.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("7V7&Z3c", 0.0, 0.0, (-468.8), (-1.0), 2088.755673360323, true, (-2554));
      assertNotNull(transportadora0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals((-2554), transportadora0.getFormula());
      assertTrue(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      
      double double0 = transportadora0.getValor_grande();
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals((-2554), transportadora0.getFormula());
      assertTrue(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-468.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      
      transportadora0.setTotalLucro(1.0);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1.0, transportadora0.getTotalLucro(), 0.01);
      
      double double0 = transportadora0.getTotalLucro();
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1730.894661), (-1730.894661), 1.0, (-1730.894661), 0.7, false, 0);
      assertNotNull(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1730.894661), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1730.894661), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1730.894661), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      
      transportadora0.setTotalLucro((-3123.300054004755));
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-3123.300054004755), transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1730.894661), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1730.894661), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1730.894661), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      
      double double0 = transportadora0.getTotalLucro();
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-3123.300054004755), transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1730.894661), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1730.894661), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1730.894661), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-3123.300054004755), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, 2863.97594, 0.7, 4022.5051, 2863.97594, (-387.63189661), true, 2783);
      assertNotNull(transportadora0);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(4022.5051, transportadora0.getValor_grande(), 0.01);
      assertEquals(2863.97594, transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertNull(transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2783, transportadora0.getFormula());
      assertEquals(2863.97594, transportadora0.getImpostos(), 0.01);
      assertEquals((-387.63189661), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      
      String string0 = transportadora0.getNome();
      assertNull(string0);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(4022.5051, transportadora0.getValor_grande(), 0.01);
      assertEquals(2863.97594, transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertNull(transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2783, transportadora0.getFormula());
      assertEquals(2863.97594, transportadora0.getImpostos(), 0.01);
      assertEquals((-387.63189661), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(":/B", 1.0, (-1548.718130236908), 1.0, (-1548.718130236908), (-1548.718130236908), false, (-265));
      assertNotNull(transportadora0);
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1548.718130236908), transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1548.718130236908), transportadora0.getValor_medio(), 0.01);
      assertEquals(":/B", transportadora0.getNome());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1548.718130236908), transportadora0.getImpostos(), 0.01);
      assertEquals((-265), transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      
      String string0 = transportadora0.getNome();
      assertNotNull(string0);
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1548.718130236908), transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1548.718130236908), transportadora0.getValor_medio(), 0.01);
      assertEquals(":/B", transportadora0.getNome());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1548.718130236908), transportadora0.getImpostos(), 0.01);
      assertEquals((-265), transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(":/B", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(")*F|U8`u3I", 0.0, 62.449, (-872.048829512902), 62.449, 0.0, false, 1183);
      assertNotNull(transportadora0);
      assertEquals(62.449, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(")*F|U8`u3I", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(62.449, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-872.048829512902), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1183, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      
      double double0 = transportadora0.getMargemlucro();
      assertEquals(62.449, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(")*F|U8`u3I", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(62.449, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-872.048829512902), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1183, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (-3282.33), (-3282.33), 0.7, 0.7, 0.7, true, 958);
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-3282.33), transportadora0.getValor_medio(), 0.01);
      assertEquals((-3282.33), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.7, transportadora0.getImpostos(), 0.01);
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertTrue(transportadora0.isPremium());
      assertNull(transportadora0.getNome());
      assertEquals(958, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      
      double double0 = transportadora0.getMargemlucro();
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-3282.33), transportadora0.getValor_medio(), 0.01);
      assertEquals((-3282.33), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.7, transportadora0.getImpostos(), 0.01);
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertTrue(transportadora0.isPremium());
      assertNull(transportadora0.getNome());
      assertEquals(958, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("7V7&Z3c", 0.0, 0.0, (-468.8), (-1.0), 2088.755673360323, true, (-2554));
      assertNotNull(transportadora0);
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals("7V7&Z3c", transportadora0.getNome());
      
      transportadora0.setImpostos(1.5);
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1.5, transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals("7V7&Z3c", transportadora0.getNome());
      
      double double0 = transportadora0.getImpostos();
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1.5, transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals(1.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("7V7&Z3c", 0.0, 0.0, (-468.8), (-1.0), 2088.755673360323, true, (-2554));
      assertNotNull(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      
      double double0 = transportadora0.getImpostos();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      
      transportadora0.setId(0L);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      
      long long0 = transportadora0.getId();
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      
      transportadora0.setId((-1757L));
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1757L), transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      
      long long0 = transportadora0.getId();
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1757L), transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1757L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, 0.0, (-4300.0), 1.0, (-1.0), 1.0, false, 0);
      assertNotNull(transportadora0);
      assertEquals((-4300.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertNull(transportadora0.getNome());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      
      int int0 = transportadora0.getFormula();
      assertEquals((-4300.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertNull(transportadora0.getNome());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("CM't/7", (-2592.0), (-2592.0), (-2592.0), 0.0, (-2592.0), true, 2);
      assertNotNull(transportadora0);
      assertEquals((-2592.0), transportadora0.getValor_medio(), 0.01);
      assertEquals("CM't/7", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-2592.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-2592.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals((-2592.0), transportadora0.getValor_grande(), 0.01);
      assertEquals(2, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      
      int int0 = transportadora0.getFormula();
      assertEquals((-2592.0), transportadora0.getValor_medio(), 0.01);
      assertEquals("CM't/7", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-2592.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-2592.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals((-2592.0), transportadora0.getValor_grande(), 0.01);
      assertEquals(2, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transportadora.setCodigo(0L);
      long long0 = Transportadora.getCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transportadora.setCodigo((-1L));
      long long0 = Transportadora.getCodigo();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Transportadora.setCodigo(0L);
      long long0 = Transportadora.criaCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transportadora.setCodigo((-991));
      long long0 = Transportadora.criaCodigo();
      assertEquals((-991L), long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      assertNotNull(transportadora0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      
      transportadora0.setValor_pequenas(203.19049);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(203.19049, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(203.19049, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(203.19049, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-4035.7), transportadora1.getMargemlucro(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("", transportadora1.getNome());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertFalse(transportadora1.isPremium());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals((-692.0), transportadora1.getImpostos(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("WAOL(L", (-1711.81), (-1.0), 0.0, 0.0, 0.0, true, 0);
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-1711.81), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals("WAOL(L", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      
      transportadora0.setTotalLucro(3009.496163750781);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(3009.496163750781, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-1711.81), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals("WAOL(L", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(3009.496163750781, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-1711.81), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals("WAOL(L", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("WAOL(L", transportadora1.getNome());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0, transportadora1.getFormula());
      assertEquals((-1711.81), transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertTrue(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(3009.496163750781, transportadora1.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      transportadora0.setTotalLucro((-2607.0));
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-2607.0), transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-2607.0), transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-2607.0), transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Transportadora.setCodigo(0L);
      Transportadora transportadora0 = new Transportadora("", 0L, 0.0, 0.0, 1994.983506589, 1994.983506589, true, (-811));
      assertNotNull(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1994.983506589, transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(1994.983506589, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-811), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1994.983506589, transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(1994.983506589, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-811), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-811), transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(1994.983506589, transportadora1.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora1.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1994.983506589, transportadora1.getImpostos(), 0.01);
      assertTrue(transportadora1.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (-3282.33), (-3282.33), 0.7, 0.7, 0.7, true, 958);
      assertNotNull(transportadora0);
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-3282.33), transportadora0.getValor_medio(), 0.01);
      assertEquals(0.7, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-3282.33), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals(958, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-3282.33), transportadora0.getValor_medio(), 0.01);
      assertEquals(0.7, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-3282.33), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals(958, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora1.isPremium());
      assertNull(transportadora1.getNome());
      assertEquals((-3282.33), transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.7, transportadora1.getValor_grande(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.7, transportadora1.getMargemlucro(), 0.01);
      assertEquals((-3282.33), transportadora1.getValor_medio(), 0.01);
      assertEquals(958, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.7, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Transportadora.setCodigo((-1L));
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0L, transportadora0.getCodigo());
      assertEquals((-1L), transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0L, transportadora0.getCodigo());
      assertEquals((-1L), transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-1L), transportadora1.getId());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 0.0, 1.0, 0.0, 1.0, 5545.58, false, (-770));
      assertNotNull(transportadora0);
      assertFalse(transportadora0.isPremium());
      assertEquals(5545.58, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("", transportadora0.getNome());
      assertEquals((-770), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      
      Transportadora.setCodigo((-3357L));
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertFalse(transportadora0.isPremium());
      assertEquals(5545.58, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("", transportadora0.getNome());
      assertEquals((-770), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-3357L), transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(5545.58, transportadora1.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertFalse(transportadora1.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(1.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals((-770), transportadora1.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1.0, transportadora1.getValor_medio(), 0.01);
      assertEquals((-3357L), transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, 0.0, (-4300.0), 1.0, (-1.0), 1.0, false, 0);
      assertNotNull(transportadora0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals((-4300.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNull(transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals((-4300.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNull(transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(1.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-4300.0), transportadora1.getValor_medio(), 0.01);
      assertEquals(1.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1L, transportadora1.getId());
      assertNull(transportadora1.getNome());
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora1.getImpostos(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      // Undeclared exception!
      try { 
        transportadora0.equals(transportadora1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Transportadora transportadora0 = null;
      try {
        transportadora0 = new Transportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Transportadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = Transportadora.criaCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1730.894661), (-1730.894661), 1.0, (-1730.894661), 0.7, false, 0);
      assertNotNull(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1730.894661), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1730.894661), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-1730.894661), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      
      double double0 = transportadora0.getTotalLucro();
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1730.894661), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1730.894661), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-1730.894661), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 0.0, 1.0, 0.0, 1.0, 5545.58, false, (-770));
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals((-770), transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(5545.58, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      
      String string0 = transportadora0.getNome();
      assertNotNull(string0);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals((-770), transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(5545.58, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(":/B", 1.0, (-1548.718130236908), 1.0, (-1548.718130236908), (-1548.718130236908), false, (-265));
      assertNotNull(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1548.718130236908), transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-1548.718130236908), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(":/B", transportadora0.getNome());
      assertEquals((-1548.718130236908), transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-265), transportadora0.getFormula());
      
      int int0 = transportadora0.getFormula();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1548.718130236908), transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-1548.718130236908), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(":/B", transportadora0.getNome());
      assertEquals((-1548.718130236908), transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-265), transportadora0.getFormula());
      assertEquals((-265), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("7V7&Z3c", 0.0, 0.0, (-468.8), (-1.0), 2088.755673360323, true, (-2554));
      assertNotNull(transportadora0);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals("7V7&Z3c", transportadora0.getNome());
      
      double double0 = transportadora0.getValor_pequenas();
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-468.8), transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2088.755673360323, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-2554), transportadora0.getFormula());
      assertEquals("7V7&Z3c", transportadora0.getNome());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 1.0, 1.0, 1.0, 1.0, 0.9, true, (-1));
      assertNotNull(transportadora0);
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.9, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora0.isPremium());
      assertEquals((-1), transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      
      double double0 = transportadora0.getValor_medio();
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.9, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora0.isPremium());
      assertEquals((-1), transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      
      double double0 = transportadora0.getImpostos();
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, 3513.2683567364, 3513.2683567364, (-3898.620682837), (-3898.620682837), (-3898.620682837), false, 0);
      assertNotNull(transportadora0);
      assertEquals((-3898.620682837), transportadora0.getValor_grande(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals(3513.2683567364, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-3898.620682837), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-3898.620682837), transportadora0.getMargemlucro(), 0.01);
      assertEquals(3513.2683567364, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      
      double double0 = transportadora0.getMargemlucro();
      assertEquals((-3898.620682837), transportadora0.getValor_grande(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals(3513.2683567364, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-3898.620682837), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-3898.620682837), transportadora0.getMargemlucro(), 0.01);
      assertEquals(3513.2683567364, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-3898.620682837), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 0.0, 1.0, 0.0, 1.0, 5545.58, false, (-770));
      assertNotNull(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(5545.58, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("", transportadora0.getNome());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-770), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      
      long long0 = transportadora0.getId();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(5545.58, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("", transportadora0.getNome());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-770), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      
      double double0 = transportadora0.getValor_grande();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      boolean boolean0 = transportadora0.isPremium();
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora3(5);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      double double0 = transportadora0.preco_transportadora3((-1));
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora2(5);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      double double0 = transportadora0.preco_transportadora2(0);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(-0.0, double0, 0.01);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertFalse(transportadora0.isPremium());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora2(1);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      double double0 = transportadora0.preco_transportadora1(349);
      assertEquals((-2509801.8299999996), transportadora0.getTotalLucro(), 0.01);
      assertEquals((-2509801.8299999996), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora1(0);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora1(1);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertFalse(transportadora0.isPremium());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setFormula((-1604));
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals((-1604), transportadora0.getFormula());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = transportadora0.clone();
      transportadora1.setPremium(true);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertFalse(boolean0);
      assertTrue(transportadora1.isPremium());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setMargemlucro(1.34211872741281);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(1.34211872741281, transportadora1.getMargemlucro(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = transportadora0.clone();
      transportadora1.setImpostos(29.286076971948567);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(29.286076971948567, transportadora1.getImpostos(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setValor_pequenas(203.19049);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(203.19049, transportadora0.getValor_pequenas(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = transportadora0.clone();
      transportadora1.setValor_medio((-1316.4));
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals((-1316.4), transportadora1.getValor_medio(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      
      transportadora1.setValor_grande(1);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      
      transportadora0.setNome("Gl|hd");
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora("%W", 1.34211872741281, 1.34211872741281, 1.34211872741281, 1.34211872741281, 1.34211872741281, false, 736);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(3L, transportadora0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-4035.7), transportadora1.getMargemlucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertTrue(transportadora0.equals((Object)transportadora1));
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      boolean boolean0 = transportadora0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      boolean boolean0 = transportadora0.equals(transportadora0);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertFalse(transportadora0.isPremium());
      assertTrue(boolean0);
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      boolean boolean0 = transportadora0.equals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9");
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      String string0 = transportadora0.formula3();
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-4035.7), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", string0);
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-692.0), transportadora0.getImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, 0.0, (-4300.0), 1.0, (-1.0), 1.0, false, 0);
      String string0 = transportadora0.formula1();
      assertEquals((-4300.0), transportadora0.getValor_medio(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", string0);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-692.0), (-4035.7), false, 0);
      String string0 = transportadora0.toString();
      assertEquals("Transportadora:: { Id: 1 Nome:  Valor da encomenda pequena: -1.0 Valor da encomenda m\u00E9dia: -1.0 Valor da encomenda grande: -1.0 Imposto: -692.0 Margem de lucro: -4035.7 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", string0);
      assertEquals(2L, transportadora0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      long long0 = Transportadora.getCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.formula2();
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", string0);
      assertFalse(transportadora0.isPremium());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), false, 0);
      Transportadora transportadora1 = transportadora0.clone();
      transportadora0.preco_transportadora2(349);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(0.7, transportadora0.getTotalLucro(), 0.01);
      assertFalse(boolean0);
  }
}
