/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 23:38:46 GMT 2024
 */

package TP2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TP2.Artigo;
import TP2.Padrao;
import TP2.Tamanho;
import TP2.Tshirt;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tshirt_ESTest extends Tshirt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      Tamanho tamanho0 = Tamanho.S;
      tshirt0.setTamanho(tamanho0);
      Tamanho tamanho1 = tshirt0.getTamanho();
      assertSame(tamanho1, tamanho0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      tshirt0.getPadrao();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long(4);
      Tamanho tamanho0 = Tamanho.M;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("", "M", 1.0, true, 0, 4, long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = tshirt0.clone();
      assertEquals(4L, tshirt1.getIdTransportadora());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long(0);
      Tamanho tamanho0 = Tamanho.M;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = new Tshirt("-$w[nf}IX-T|", "", (-1348.644342), true, 0, 0, long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = tshirt0.clone();
      assertEquals(0L, tshirt1.getIdVendedor());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      Artigo.setContador(0L);
      Tshirt tshirt1 = tshirt0.clone();
      assertFalse(tshirt1.getDisponivel());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      Artigo.setContador((-48L));
      Tshirt tshirt1 = tshirt0.clone();
      assertFalse(tshirt1.getNovo());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      // Undeclared exception!
      try { 
        tshirt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Tshirt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      LocalDate localDate0 = MockLocalDate.ofYearDay(344, 344);
      // Undeclared exception!
      try { 
        tshirt0.preco_atual(localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Tshirt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      Tshirt tshirt1 = new Tshirt(tshirt0);
      // Undeclared exception!
      try { 
        tshirt0.equals(tshirt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Tshirt", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.liso;
      Tshirt tshirt0 = null;
      try {
        tshirt0 = new Tshirt("0Y[&>;v[E~Y^:^~", "!]bsRp&jf", (-1.0), false, 1, 2144, (Long) null, (Long) null, tamanho0, padrao0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tshirt tshirt0 = null;
      try {
        tshirt0 = new Tshirt((Tshirt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      tshirt0.getTamanho();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = new Long(4);
      Tamanho tamanho0 = Tamanho.M;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("", "M", 1.0, true, 0, 4, long0, long0, tamanho0, padrao0);
      Padrao padrao1 = tshirt0.getPadrao();
      assertSame(padrao0, padrao1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Long long0 = new Long((-2588));
      Tamanho tamanho0 = Tamanho.M;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("+Ou8+6<NL 2#w", "+Ou8+6<NL 2#w", 2965.157080147777, true, (-2588), (-2588), long0, long0, tamanho0, padrao0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      double double0 = tshirt0.preco_atual(localDate0);
      assertEquals(2965.157080147777, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(130);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = new Tshirt("_.00", "r0iKOX.3:Vmw(", (-1027.1886774340383), false, 130, 130, long0, long0, tamanho0, padrao0);
      LocalDate localDate0 = MockLocalDate.ofYearDay(130, 130);
      double double0 = tshirt0.preco_atual(localDate0);
      assertEquals((-513.5943387170191), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Long long0 = Long.valueOf((long) (-4654));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.liso;
      Tshirt tshirt0 = new Tshirt("C%n5~@.*q1x@^99@-L", "C%n5~@.*q1x@^99@-L", 1.0, false, (-4654), (-4654), long0, long0, tamanho0, padrao0);
      double double0 = tshirt0.preco_atual((LocalDate) null);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      Tamanho tamanho0 = Tamanho.M;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt(" Tamanho: ", " Tamanho: ", (-1.0), true, 0, 0, long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = new Tshirt(tshirt0);
      assertTrue(tshirt1.equals((Object)tshirt0));
      
      Padrao padrao1 = Padrao.palmeiras;
      tshirt1.setPadrao(padrao1);
      boolean boolean0 = tshirt0.equals(tshirt1);
      assertFalse(tshirt1.equals((Object)tshirt0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      Tamanho tamanho0 = Tamanho.M;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt(" Tamanho: ", " Tamanho: ", (-1.0), true, 0, 0, long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = new Tshirt(tshirt0);
      boolean boolean0 = tshirt0.equals(tshirt1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long(130);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = new Tshirt("_.00", "r0iKOX.3:Vmw(", (-1027.1886774340383), false, 130, 130, long0, long0, tamanho0, padrao0);
      boolean boolean0 = tshirt0.equals("_.00");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      boolean boolean0 = tshirt0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = new Tshirt("`_3HE}3H", "`_3HE}3H", 0.5, true, 0, (-2997), long0, long0, tamanho0, padrao0);
      boolean boolean0 = tshirt0.equals(tshirt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      Tamanho tamanho0 = Tamanho.M;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt(" Tamanho: ", " Tamanho: ", (-1.0), true, 0, 0, long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = new Tshirt(tshirt0);
      assertTrue(tshirt1.equals((Object)tshirt0));
      
      Tamanho tamanho1 = Tamanho.L;
      tshirt0.setTamanho(tamanho1);
      boolean boolean0 = tshirt0.equals(tshirt1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      Padrao padrao0 = Padrao.palmeiras;
      tshirt0.setPadrao(padrao0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      double double0 = tshirt0.preco_atual(localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long(130);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = new Tshirt("_.00", "r0iKOX.3:Vmw(", (-1027.1886774340383), false, 130, 130, long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = tshirt0.clone();
      boolean boolean0 = tshirt1.equals(tshirt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Long long0 = new Long(130);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = new Tshirt("_.00", "r0iKOX.3:Vmw(", (-1027.1886774340383), false, 130, 130, long0, long0, tamanho0, padrao0);
      String string0 = tshirt0.toString();
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: _.00 Marca: r0iKOX.3:Vmw( Pre\u00E7o base: -1027.1886774340383 Novo: false Estado de uso: 130 N\u00FAmero de utilizadores: 130 Disponivel: true Id da transportadora: 130 Id do vendedor: 130 } Tamanho: S Padr\u00E3o: palmeiras}", string0);
  }
}
