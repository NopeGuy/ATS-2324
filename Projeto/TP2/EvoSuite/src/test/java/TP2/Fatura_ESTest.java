/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 23:37:52 GMT 2024
 */

package TP2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TP2.Fatura;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setAlteracaoPreco((-1218.0792127));
      fatura0.atualizaFatura("Fatura 0 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000002\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n", (-1218.0792127), (-1514.3772623754583), 1.0);
      assertEquals((-1218.0792127), fatura0.custoProdutos, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.custoProdutos = (-3546.2651);
      fatura0.atualizaFatura("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000002\n\nCusto dos produtos: -3546.27\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n", 1283.344, 1283.344, (-5513.7));
      assertEquals(1283.344, fatura0.alteracaoPreco, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, (-4081L), (-4081L), set0, 0L, 1295.819339241, 1295.819339241);
      fatura1.toString();
      assertEquals(3L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.getCustoProdutos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      
      fatura0.setCustoProdutos((-1.0));
      fatura0.toString();
      assertEquals((-1.0), fatura0.custoProdutos, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 450.4);
      Fatura fatura1 = new Fatura();
      fatura1.setId(1L);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 450.4);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setAlteracaoPreco((-216.3040985056225));
      fatura1.setId(1L);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 450.4);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setId(1L);
      fatura1.custoProdutos = (-2439.9529962942);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals((-2439.9529962942), fatura1.getCustoProdutos(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setIdEncomenda((-555L));
      Fatura.setCodigo(1L);
      Fatura fatura1 = new Fatura(fatura0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals((-555L), fatura0.idEncomenda);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 450.4);
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setIdEncomenda(2L);
      fatura1.setId(1L);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(2L, fatura0.idEncomenda);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, (-1L), (-1L), set0, (-1898.475), 0.0, 1177.66081);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertFalse(fatura0.compra);
      
      fatura0.setCompra(true);
      assertTrue(fatura0.compra);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, (-1L), (-1L), set0, 0L, 0.0, 0L);
      boolean boolean0 = fatura1.isCompra();
      assertEquals(3L, fatura0.getCodigo());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.atualizaFatura((String) null, 2L, (-79.775), 2L);
      double double0 = fatura0.getPrecoFinal();
      assertEquals((-79.775), fatura0.alteracaoPreco, 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.atualizaFatura("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000002\n\nCusto dos produtos: -3546.27\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n", 1283.344, 1283.344, (-5513.7));
      double double0 = fatura0.getPrecoFinal();
      assertEquals(1283.344, fatura0.alteracaoPreco, 0.01);
      assertEquals((-5513.7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, 633L, 633L, set0, 633L, 0L, 633L);
      long long0 = fatura1.getNifComprador();
      assertEquals(3L, fatura0.getCodigo());
      assertEquals(633L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(true, (-1L), (-1L), linkedHashSet0, 1.0, (-1L), 6817.252941708537);
      long long0 = fatura0.getNifComprador();
      assertEquals((-1L), long0);
      assertEquals((-1.0), fatura0.alteracaoPreco, 0.01);
      assertTrue(fatura0.compra);
      assertEquals(1.0, fatura0.custoProdutos, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(6817.252941708537, fatura0.precoFinal, 0.01);
      assertEquals((-1L), fatura0.idEncomenda);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, (-4169.40069));
      fatura0.setIdEncomenda(1859L);
      long long0 = fatura0.getIdEncomenda();
      assertEquals(1859L, fatura0.idEncomenda);
      assertEquals(1859L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setIdEncomenda((-4166L));
      long long0 = fatura0.getIdEncomenda();
      assertEquals((-4166L), fatura0.idEncomenda);
      assertEquals((-4166L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(true, 0L, 0L, linkedHashSet0, 553.1704815172387, 170.04992750532264, 3444.300709);
      double double0 = fatura0.getCustoProdutos();
      assertTrue(fatura0.compra);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(553.1704815172387, double0, 0.01);
      assertEquals(3444.300709, fatura0.precoFinal, 0.01);
      assertEquals(170.04992750532264, fatura0.alteracaoPreco, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.custoProdutos = (-3546.2651);
      double double0 = fatura0.getCustoProdutos();
      assertEquals((-3546.2651), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fatura.setCodigo(0L);
      long long0 = Fatura.getCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fatura.setCodigo((-1773L));
      long long0 = Fatura.getCodigo();
      assertEquals((-1773L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      fatura0.setArtigos(linkedHashSet0);
      fatura0.getArtigos();
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, (-4081L), (-4081L), set0, 0L, 1295.819339241, 1295.819339241);
      double double0 = fatura1.getAlteracaoPreco();
      assertEquals(3L, fatura0.getCodigo());
      assertEquals(1295.819339241, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, 1702L, (-250L), set0, 1L, (-1443.7), 0.0);
      double double0 = fatura1.getAlteracaoPreco();
      assertEquals(3L, fatura0.getCodigo());
      assertEquals((-1443.7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fatura.setCodigo(0L);
      long long0 = Fatura.criaCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fatura.setCodigo((-3415L));
      long long0 = Fatura.criaCodigo();
      assertEquals((-3415L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, 1L, 1L, set0, 1.0, 0.0, (-1484.099672171));
      fatura1.clone();
      assertEquals(4L, fatura1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, 633L, 633L, set0, 633L, 0L, 633L);
      fatura1.clone();
      assertEquals(4L, fatura1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.idEncomenda = (-1294L);
      fatura0.clone();
      assertEquals(3L, fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura.setCodigo(0L);
      Fatura fatura1 = fatura0.clone();
      fatura1.getId();
      assertEquals(1L, fatura0.getCodigo());
      assertEquals(0L, fatura0.getNifComprador());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(2L, fatura0.getCodigo());
      
      Fatura.setCodigo((-1L));
      Fatura fatura1 = fatura0.clone();
      long long0 = fatura1.getId();
      assertEquals(0L, fatura0.getCodigo());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fatura.setCodigo((-1773L));
      Fatura fatura0 = new Fatura();
      fatura0.clone();
      assertEquals((-1771L), fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.atualizaFatura("-", (-2344L), 823.7972842, 3873.207);
      fatura0.clone();
      assertEquals(3L, fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, 1702L, (-250L), set0, 1L, (-1443.7), 0.0);
      fatura1.clone();
      assertEquals(4L, fatura1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fatura fatura0 = new Fatura(false, (-2196L), (-136L), (Set<String>) null, 0L, 1.0, 0.0);
      // Undeclared exception!
      try { 
        fatura0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      // Undeclared exception!
      try { 
        fatura0.setArtigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fatura fatura0 = new Fatura(false, 3097L, 1868L, (Set<String>) null, 1868L, 3097L, (-1883.056));
      // Undeclared exception!
      try { 
        fatura0.getArtigos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fatura fatura0 = new Fatura(false, 1L, 1L, (Set<String>) null, 1L, 1L, 1L);
      // Undeclared exception!
      try { 
        fatura0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fatura fatura0 = new Fatura(true, 0L, 1019L, (Set<String>) null, 0L, 1019L, 1407.133);
      // Undeclared exception!
      try { 
        fatura0.atualizaFatura("tya4u&r*j1nA2_\"*x#", 1019L, 1.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      long long0 = fatura0.getIdEncomenda();
      assertFalse(fatura0.compra);
      assertEquals(0L, long0);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      boolean boolean0 = fatura0.isCompra();
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(0L, fatura0.idEncomenda);
      assertFalse(boolean0);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      long long0 = fatura0.getNifComprador();
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0L, long0);
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getCustoProdutos();
      assertFalse(fatura0.compra);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(0L, fatura0.idEncomenda);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getAlteracaoPreco();
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0L, fatura0.nifComprador);
      assertFalse(fatura0.compra);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0L, fatura0.idEncomenda);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = Fatura.criaCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getPrecoFinal();
      assertEquals(0.0, double0, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 450.4);
      assertFalse(fatura0.compra);
      
      fatura0.compra = true;
      fatura0.toString();
      assertEquals(0.0, fatura0.getCustoProdutos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 450.4);
      fatura0.toString();
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(450.4, fatura0.precoFinal, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.nifComprador);
      assertFalse(fatura0.compra);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0L, fatura0.idEncomenda);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 450.4);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setId(1L);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(3L, fatura0.getCodigo());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(true, 0L, 0L, linkedHashSet0, 0L, 0L, 0L);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setId(1L);
      fatura1.setAlteracaoPreco(1L);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setCustoProdutos((-214.13696117261318));
      fatura1.setId(1L);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.atualizaFatura("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000002\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n", 0L, 0L, 0L);
      fatura1.setId(1L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setNifComprador(1L);
      fatura1.setId(1L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setId(0L);
      Fatura fatura1 = fatura0.clone();
      fatura1.setIdEncomenda(242L);
      fatura1.id = 0L;
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(0L, fatura0.id);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      boolean boolean0 = fatura0.equals(set0);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0L, fatura0.nifComprador);
      assertFalse(fatura0.compra);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(boolean0);
      assertEquals(0L, fatura0.idEncomenda);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      boolean boolean0 = fatura0.equals((Object) null);
      assertFalse(fatura0.compra);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(0L, fatura0.idEncomenda);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 450.4);
      boolean boolean0 = fatura0.equals(fatura0);
      assertTrue(boolean0);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(450.4, fatura0.precoFinal, 0.01);
      assertEquals(0L, fatura0.idEncomenda);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = Fatura.getCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 0L);
      fatura0.setPrecoFinal((-4578.9416));
      assertEquals((-4578.9416), fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = fatura0.clone();
      fatura0.setNifComprador(2L);
      fatura1.setId(1L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, 0L);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setId(1L);
      fatura0.compra = true;
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, (-4169.40069));
      Fatura fatura1 = new Fatura();
      fatura1.setId(1L);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, 0L, (-4169.40069));
      long long0 = fatura0.getId();
      assertFalse(fatura0.compra);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals((-4169.40069), fatura0.precoFinal, 0.01);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(1L, long0);
      assertEquals(2L, fatura0.getCodigo());
  }
}
