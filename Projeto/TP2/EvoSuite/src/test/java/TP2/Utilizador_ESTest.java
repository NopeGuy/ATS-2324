/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 23:20:27 GMT 2024
 */

package TP2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TP2.Encomenda;
import TP2.Fatura;
import TP2.Utilizador;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(false, 1L, 1L, "s|(}", 1L, false, 2450.995576, 1L);
      utilizador0.adicionaFaturaVendedor(false, 1L, 0, "Pre\u00E7o final: ", 503.8909552695, true, 1.0, 1L);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.setNif(2L);
      utilizador1.equals(utilizador0);
      assertEquals(2L, utilizador1.getNif());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador0.equals(utilizador1);
      assertEquals(3L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("+HT}~x#f+Muo3~]V0v", "+HT}~x#f+Muo3~]V0v", "[_]1fSHkH<k%4XV}", long0, "[_]1fSHkH<k%4XV}");
      Set<Long> set0 = utilizador0.getDevolvidos();
      utilizador0.setComprei(set0);
      assertEquals("[_]1fSHkH<k%4XV}", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("+HT}~x#f+Muo3~]V0v", utilizador0.getNome());
      assertEquals("+HT}~x#f+Muo3~]V0v", utilizador0.getEmail());
      assertEquals("[_]1fSHkH<k%4XV}", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long(1337L);
      Utilizador utilizador0 = new Utilizador("mf{af>", "NQ$", "mf{af>", long0, "mf{af>");
      Encomenda encomenda0 = utilizador0.getCarrinho();
      utilizador0.setCarrinho(encomenda0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("NQ$", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("mf{af>", utilizador0.getEmail());
      assertEquals("mf{af>", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("mf{af>", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      utilizador0.removeCarrinho();
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, "*|pbe.#t;M9,TZvYP");
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      utilizador0.numeroArtigos(set0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      utilizador0.numeroArtigos(set0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo((String) null);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      utilizador0.adicionaFaturaComprador(true, 0L, 0L, linkedHashSet0, 0L, (-1228.5065476753882), (-1228.5065476753882));
      utilizador0.imprimeFaturasCompras();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(false, 0L, 0L, "Pre\u00E7o final: ", 503.8909552695, false, 0L, 0.0);
      utilizador0.imprime1FaturaVenda(0L);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      utilizador0.adicionaFaturaComprador(false, 0L, 0L, linkedHashSet0, 0L, (-1197.7462), (-1197.7462));
      utilizador0.imprime1FaturaCompra(0L);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      utilizador0.setProdutosVendidos(set0);
      utilizador0.getProdutosVendidos();
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Fatura fatura0 = new Fatura();
      fatura0.atualizaFatura("TP2.Encomenda", 746.20373864883, 0.0, 0.0);
      Set<String> set0 = fatura0.getArtigos();
      utilizador0.setProdutosVender(set0);
      utilizador0.getProdutosVender();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Long long0 = new Long(1832L);
      Utilizador utilizador0 = new Utilizador(" n\u00E3o existe na encomenda", " n\u00E3o existe na encomenda", "RpEy|e", long0, " n\u00E3o foi comprada");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      utilizador0.setPendentes(set0);
      utilizador0.getPendentes();
      assertEquals(" n\u00E3o foi comprada", utilizador0.getPassword());
      assertEquals(" n\u00E3o existe na encomenda", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("RpEy|e", utilizador0.getMorada());
      assertEquals(" n\u00E3o existe na encomenda", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("+HT}~x#f+Muo3~]V0v", "+HT}~x#f+Muo3~]V0v", "[_]1fSHkH<k%4XV}", long0, "[_]1fSHkH<k%4XV}");
      String string0 = utilizador0.getPassword();
      assertEquals("[_]1fSHkH<k%4XV}", string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("+HT}~x#f+Muo3~]V0v", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("[_]1fSHkH<k%4XV}", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("+HT}~x#f+Muo3~]V0v", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long(302L);
      Utilizador utilizador0 = new Utilizador("_z;L", "", "_z;L", long0, "");
      String string0 = utilizador0.getPassword();
      assertEquals("", string0);
      assertEquals("", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("_z;L", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("_z;L", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, "*|pbe.#t;M9,TZvYP");
      String string0 = utilizador0.getNome();
      assertNull(string0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      utilizador0.getNome();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador(" Pass: ", " Pass: ", " Pass: ", long0, " Pass: ");
      long long1 = utilizador0.getNif();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      long long0 = utilizador0.getNif();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Long long0 = new Long((-870L));
      Utilizador utilizador0 = new Utilizador(" Email: ", "a$ymwo?67", "a$ymwo?67", long0, "a$ymwo?67");
      utilizador0.setN_vendidos(163);
      int int0 = utilizador0.getN_vendidos();
      assertEquals(163, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Long long0 = new Long((-870L));
      Utilizador utilizador0 = new Utilizador(" Email: ", "a$ymwo?67", "a$ymwo?67", long0, "a$ymwo?67");
      utilizador0.setN_vendidos((-1831));
      int int0 = utilizador0.getN_vendidos();
      assertEquals((-1831), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = new Long(1316L);
      Utilizador utilizador0 = new Utilizador(":XT7CJi72", "*.jXQ1=[HZc:e'", (String) null, long0, ":XT7CJi72");
      String string0 = utilizador0.getMorada();
      assertEquals(":XT7CJi72", utilizador0.getPassword());
      assertEquals(":XT7CJi72", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("*.jXQ1=[HZc:e'", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador(",J", (String) null, "", long0, (String) null);
      String string0 = utilizador0.getMorada();
      assertEquals("", string0);
      assertEquals(",J", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertNotNull(string0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(1L, utilizador0.getId());
      
      utilizador0.setId(0L);
      utilizador0.getId();
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setId((-990L));
      long long0 = utilizador0.getId();
      assertEquals((-990L), long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, "*|pbe.#t;M9,TZvYP");
      utilizador0.getFaturasCompras();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long(993L);
      Utilizador utilizador0 = new Utilizador("*L'MyWhIPmW", "*L'MyWhIPmW", "*L'MyWhIPmW", long0, "*L'MyWhIPmW");
      utilizador0.getEmail();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail("");
      utilizador0.getEmail();
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utilizador.setCodigo((-1L));
      long long0 = Utilizador.getCodigo();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, 0L, 90L, "c.=M(!d9", (-2865.63569), true, 0.0, 0L);
      Fatura fatura0 = utilizador0.get1FaturaVenda(0L);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals((-2865.63569), fatura0.custoProdutos, 0.01);
      assertEquals("n/d", utilizador0.getMorada());
      assertNotNull(fatura0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(90L, fatura0.nifComprador);
      assertTrue(fatura0.compra);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-2865.63569), fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      utilizador0.adicionaFaturaComprador(true, 0L, 0L, linkedHashSet0, 0L, (-1197.7462), (-1197.7462));
      Fatura fatura0 = utilizador0.get1FaturaCompra(0L);
      assertTrue(fatura0.compra);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1197.7462), fatura0.precoFinal, 0.01);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals((-1197.7462), fatura0.alteracaoPreco, 0.01);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("V");
      utilizador0.eliminaArtigo("V");
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utilizador.setCodigo((-2997L));
      long long0 = Utilizador.criaCodigo();
      assertEquals((-2997L), long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      int int0 = utilizador1.compareTo(utilizador0);
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Long long0 = new Long((-1L));
      Utilizador utilizador1 = new Utilizador(" n\u00E3o existe no carrinho", " n\u00E3o existe no carrinho", " n\u00E3o existe no carrinho", long0, "O}&E;Ya|/J4H)&$");
      int int0 = utilizador0.compareTo(utilizador1);
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("+HT}~x#f+Muo3~]V0v", "+HT}~x#f+Muo3~]V0v", "[_]1fSHkH<k%4XV}", long0, "[_]1fSHkH<k%4XV}");
      Utilizador utilizador1 = utilizador0.clone();
      assertNotSame(utilizador1, utilizador0);
      assertEquals("[_]1fSHkH<k%4XV}", utilizador1.getPassword());
      assertEquals("[_]1fSHkH<k%4XV}", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("+HT}~x#f+Muo3~]V0v", utilizador1.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("+HT}~x#f+Muo3~]V0v", utilizador1.getNome());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_vendidos((-2990));
      utilizador0.clone();
      assertEquals((-2990), utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador(" j\u00E1 existe na encomenda", "H]2^Z5Bh", " j\u00E1 existe na encomenda", long0, "H]2^Z5Bh");
      utilizador0.setN_comprados(588);
      utilizador0.clone();
      assertEquals(588, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_comprados((-42));
      utilizador0.clone();
      assertEquals((-42), utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(1L, utilizador0.getId());
      
      utilizador0.setId(0L);
      utilizador0.clone();
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setId((-1L));
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals((-1L), utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador.setCodigo((-3582L));
      utilizador0.clone();
      assertEquals((-3582L), utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo(" ");
      utilizador0.artigosCarrinho();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Long long0 = new Long(408L);
      Utilizador utilizador0 = new Utilizador("iCG4nOrE630", "iCG4nOrE630", "iCG4nOrE630", long0, (String) null);
      utilizador0.adicionaArtigo((String) null);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, (String) null);
      utilizador0.adicionaArtigo("");
      utilizador0.removeArtigo("");
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("");
      utilizador0.aVendaToPendente("");
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long(1856L);
      Utilizador utilizador0 = new Utilizador("'ga;#h!T)2$-", "'ga;#h!T)2$-", "'ga;#h!T)2$-", long0, "'v!%P-h-");
      // Undeclared exception!
      try { 
        utilizador0.setProdutosVender((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setPendentes((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturasVendas((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long(536L);
      Utilizador utilizador0 = new Utilizador("C\u00F3digo: ", "C{+aP>;!%;:7rYv", "C\u00F3digo: ", long0, "C{+aP>;!%;:7rYv");
      // Undeclared exception!
      try { 
        utilizador0.setFaturasCompras((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setDevolvidos((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.compareTo((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("29Bf)bCg", "29Bf)bCg", "29Bf)bCg", (Long) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = utilizador0.getProdutosVender();
      utilizador0.adicionaFaturaComprador(true, 2073L, (-5899L), set0, 4139L, 747.9079031451803, (-5899L));
      utilizador0.getFaturasCompras();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("+HT}~x#f+Muo3~]V0v", "+HT}~x#f+Muo3~]V0v", "[_]1fSHkH<k%4XV}", long0, "[_]1fSHkH<k%4XV}");
      String string0 = utilizador0.getNome();
      assertEquals("+HT}~x#f+Muo3~]V0v", string0);
      assertEquals("[_]1fSHkH<k%4XV}", utilizador0.getMorada());
      assertEquals("[_]1fSHkH<k%4XV}", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("+HT}~x#f+Muo3~]V0v", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long(302L);
      Utilizador utilizador0 = new Utilizador("_z;L", "", "_z;L", long0, "");
      int int0 = utilizador0.getN_comprados();
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("_z;L", utilizador0.getMorada());
      assertEquals(0, int0);
      assertEquals("_z;L", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Long long0 = new Long((-870L));
      Utilizador utilizador0 = new Utilizador(" Email: ", "a$ymwo?67", "a$ymwo?67", long0, "a$ymwo?67");
      int int0 = utilizador0.getN_vendidos();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, int0);
      assertEquals("a$ymwo?67", utilizador0.getMorada());
      assertEquals("a$ymwo?67", utilizador0.getPassword());
      assertEquals("a$ymwo?67", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(" Email: ", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = Utilizador.criaCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("8T[g", "8T[g", "8T[g", long0, "n/d");
      utilizador0.getNif();
      assertEquals("8T[g", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("8T[g", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("8T[g", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("+HT}~x#f+Muo3~]V0v", "+HT}~x#f+Muo3~]V0v", "[_]1fSHkH<k%4XV}", long0, "[_]1fSHkH<k%4XV}");
      utilizador0.getPendentes();
      assertEquals("+HT}~x#f+Muo3~]V0v", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("[_]1fSHkH<k%4XV}", utilizador0.getPassword());
      assertEquals("[_]1fSHkH<k%4XV}", utilizador0.getMorada());
      assertEquals("+HT}~x#f+Muo3~]V0v", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long(408L);
      Utilizador utilizador0 = new Utilizador("iCG4nOrE630", "iCG4nOrE630", "iCG4nOrE630", long0, (String) null);
      String string0 = utilizador0.getPassword();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long(665L);
      Utilizador utilizador0 = new Utilizador(" Artigos: ", "", " Artigos: ", long0, "\".34m$EFy}q(Zd_$1NH");
      long long1 = utilizador0.getId();
      assertEquals("", utilizador0.getNome());
      assertEquals("\".34m$EFy}q(Zd_$1NH", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(" Artigos: ", utilizador0.getMorada());
      assertEquals(" Artigos: ", utilizador0.getEmail());
      assertEquals(1L, long1);
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, (String) null);
      utilizador0.getEmail();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, 0L, 0L, "=6~=tJA]?R'dpN3_F&", 0L, true, 0L, 0L);
      utilizador0.imprimeFaturasVendas();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.imprimeFaturasVendas();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      HashMap<Long, Fatura> hashMap0 = new HashMap<Long, Fatura>();
      Fatura fatura0 = new Fatura();
      hashMap0.put((Long) null, fatura0);
      utilizador0.setFaturasCompras(hashMap0);
      // Undeclared exception!
      try { 
        utilizador0.imprimeFaturasCompras();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.imprimeFaturasCompras();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, 4283, 2L, "-%N\"4/z]Rf>?9mFC", 2L, false, 4283, 2L);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.compareTo(utilizador0);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, int0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.compreiToDevolvido(2435L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A encomenda 2435 n\u00E3o foi comprada
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.verificaComprei(2303L);
      assertEquals((-1L), utilizador0.getNif());
      assertFalse(boolean0);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("/P");
      LocalDate localDate0 = MockLocalDate.ofEpochDay(669L);
      utilizador0.finalizaEncomenda(localDate0);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      try { 
        utilizador0.finalizaEncomenda(localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador("b|_^Hr(|l", "JFnnwNp", "b|_^Hr(|l", long0, "b|_^Hr(|l");
      try { 
        utilizador0.pendenteToAvenda("JFnnwNp");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo JFnnwNp n\u00E3o existe no carrinho
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.pendenteToVendido((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo null n\u00E3o existe no carrinho
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.vendidoToaVenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o foi vendido
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("Pre\u00E7o final: ");
      utilizador0.aVendaToPendente("Pre\u00E7o final: ");
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.aVendaToPendente("h8(T\"0(*&uz1=3r");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo h8(T\"0(*&uz1=3r n\u00E3o se encontra \u00E0 venda
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("");
      utilizador0.eliminaArtigo("");
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.eliminaArtigo("n/d");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo n/d n\u00E3o se encontra \u00E0 venda
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("Fatura ");
      try { 
        utilizador0.insereNovoArtigo("Fatura ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Fatura  j\u00E1 se encontra \u00E0 venda
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.novoCarrinho();
      utilizador0.equals(utilizador1);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      // Undeclared exception!
      try { 
        utilizador0.equals(utilizador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador0.adicionaFaturaVendedor(true, (-27L), 1140, "Pre\u00E7o final: ", (-27L), true, 1.0, 5569.74717373441);
      utilizador0.equals(utilizador1);
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      utilizador1.setPendentes(set0);
      utilizador0.equals(utilizador1);
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.insereNovoArtigo("M7\"NE:Ab7Kkpp0PRm3");
      utilizador1.equals(utilizador0);
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador1.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      utilizador0.setProdutosVendidos(set0);
      utilizador1.equals(utilizador0);
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("n/d", utilizador1.getPassword());
      
      utilizador1.setPassword("uVh");
      utilizador0.equals(utilizador1);
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador0.setNif(1342L);
      utilizador1.equals(utilizador0);
      assertEquals(1342L, utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("n/d", utilizador1.getMorada());
      
      utilizador1.setMorada("TP2.ArtigoNaoEncontradoException");
      utilizador0.equals(utilizador1);
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("n/d", utilizador0.getNome());
      
      utilizador0.setNome("h8(\"0(uz1=3r");
      utilizador0.equals(utilizador1);
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador1.equals(utilizador0);
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Object object0 = new Object();
      boolean boolean0 = utilizador0.equals(object0);
      assertEquals(0, utilizador0.getN_comprados());
      assertFalse(boolean0);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertTrue(boolean0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, (-990L), (-990L), "CIC'vZn0B_<", 2096.881, true, 2096.881, (-2036.202468));
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      utilizador0.setFaturasVendas(map0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      utilizador0.setFaturasVendas(map0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = new Long((-504L));
      Utilizador utilizador0 = new Utilizador("6sQ#gj6F", "Expedida", "~g", long0, "Expedida");
      Set<Long> set0 = utilizador0.getDevolvidos();
      utilizador0.setDevolvidos(set0);
      assertEquals("Expedida", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("6sQ#gj6F", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("~g", utilizador0.getMorada());
      assertEquals("Expedida", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = Utilizador.getCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.atualizaEncomenda(localDate0);
      Encomenda encomenda0 = utilizador0.getCarrinho();
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, encomenda0.getIdComprador());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.toString();
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Long long0 = new Long((-504L));
      Utilizador utilizador0 = new Utilizador("6sQ#gj6F", "Expedida", "~g", long0, "Expedida");
      // Undeclared exception!
      try { 
        utilizador0.setCarrinho((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals("n/d", utilizador0.getEmail());
      
      utilizador0.setEmail("");
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.numeroArtigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaCompra((-27L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getIdCarrinho();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaVenda(2640L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TP2.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_vendidos(4283);
      utilizador0.clone();
      assertEquals(4283, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.removeCarrinho();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      HashMap<Long, Fatura> hashMap0 = new HashMap<Long, Fatura>();
      Fatura fatura0 = new Fatura();
      hashMap0.put((Long) null, fatura0);
      utilizador0.setFaturasCompras(hashMap0);
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertFalse(boolean0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(1L, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("\n");
      utilizador0.getCarrinho();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.removeArtigo("C\u00F3digo: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo C\u00F3digo:  n\u00E3o existe na encomenda
         //
         verifyException("TP2.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = utilizador0.getProdutosVendidos();
      utilizador0.setProdutosVender(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Long long0 = new Long(302L);
      Utilizador utilizador0 = new Utilizador("_z;L", "", "_z;L", long0, "");
      String string0 = utilizador0.getMorada();
      assertEquals("_z;L", string0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("_z;L", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setProdutosVendidos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long(302L);
      Utilizador utilizador0 = new Utilizador("_z;L", "", "_z;L", long0, "");
      utilizador0.getComprei();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("_z;L", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("_z;L", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.get1FaturaCompra((-1L));
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Long long0 = new Long((-45L));
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      // Undeclared exception!
      try { 
        utilizador0.setComprei((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_comprados((-457));
      int int0 = utilizador0.getN_comprados();
      assertEquals((-457), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.get1FaturaVenda(1321L);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Long long0 = new Long(302L);
      Utilizador utilizador0 = new Utilizador("_z;L", "", "_z;L", long0, "");
      utilizador0.artigosCarrinho();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("_z;L", utilizador0.getMorada());
      assertEquals("", utilizador0.getNome());
      assertEquals("_z;L", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
  }
}
