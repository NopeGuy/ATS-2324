/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 09:27:17 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vintage_ESTest extends Vintage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendas();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      LocalDate localDate0 = MockLocalDate.now();
      Vintage vintage1 = new Vintage((String) null, map0, list0, map1, localDate0);
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, "", 4816, linkedList0, linkedList0, linkedList0, hashMap0);
      vintage1.adicionaUtilizador(utilizador0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Integer integer0 = new Integer(4816);
      boolean boolean0 = vintage1.existeUser("", (String) null);
      assertFalse(boolean0);
      
      linkedList1.add(integer0);
      vintage1.addEncomenda(encomenda0);
      vintage1.getUtilizadores();
      vintage1.devolverEncomenda(2431);
      assertFalse(list0.contains(encomenda1));
      assertTrue(map0.isEmpty());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendas();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      LocalDate localDate0 = MockLocalDate.now();
      Vintage vintage1 = new Vintage((String) null, map0, list0, map1, localDate0);
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Encomenda encomenda0 = new Encomenda();
      linkedList1.clone();
      Integer integer0 = new Integer(4816);
      boolean boolean0 = vintage1.existeUser("", (String) null);
      assertFalse(boolean0);
      
      linkedList1.add(integer0);
      Map<Integer, String> map2 = encomenda0.getVendedores();
      vintage1.trataEncomenda(linkedList1, linkedList0, map2);
      vintage1.addEncomenda(encomenda0);
      vintage1.getUtilizadores();
      vintage1.totalDinheiroVintage();
      vintage1.devolverEncomenda(2431);
      assertFalse(list0.contains(encomenda0));
      
      double double0 = vintage0.totalDinheiroVintage();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      List<Artigo> list1 = utilizador1.getVendas();
      utilizador1.getCompras();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        vintage0.trataEncomenda((List<Integer>) null, list1, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendas();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2L);
      Vintage vintage1 = new Vintage((String) null, map0, list0, map1, localDate0);
      String string1 = null;
      String string2 = "";
      int int0 = 4816;
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      double double0 = 940.2826317046;
      // Undeclared exception!
      try { 
        vintage1.setTransportadoras((Map<String, Transportadoras>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda1.setEstado(encomenda_Estado_Encomenda0);
      vintage0.addEncomenda(encomenda1);
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage0.setUtizadores(map0);
      vintage0.SetSessaoAtual("");
      vintage0.calculaMaiorFaturacaoSempre();
      vintage0.adiarPrazoLimite(28, 28);
      // Undeclared exception!
      try { 
        vintage0.getMaiorVolFaturacao("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.addEncomenda((Encomenda) null);
      String string0 = null;
      int int0 = (-4332);
      // Undeclared exception!
      try { 
        vintage0.adiarPrazoLimite((-4332), (-4332));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      LocalDate localDate0 = MockLocalDate.ofYearDay(30, 30);
      Sapatilhas.Tipos_Sapatilhas sapatilhas_Tipos_Sapatilhas0 = Sapatilhas.Tipos_Sapatilhas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      List<Artigo> list1 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap1 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador(")8tY<V36:", "PENDENTE", ")8tY<V36:", "9se{sUV!Zv4*O~6", 30, list1, list1, list1, hashMap1);
      Utilizador utilizador1 = utilizador0.clone();
      Utilizador utilizador2 = new Utilizador(utilizador1);
      hashMap0.put((String) null, utilizador2);
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      Sapatilhas sapatilhas0 = new Sapatilhas(30, true, (String) null, localDate0, sapatilhas_Tipos_Sapatilhas0, (String) null, artigo_Estado0, (-1), artigo_Avaliacao0, "Ao3.ln", "", (String) null, 30, 1.0, "");
      Sapatilhas sapatilhas1 = new Sapatilhas(sapatilhas0);
      LocalDate localDate1 = sapatilhas1.getDataLancamento();
      Vintage vintage1 = null;
      try {
        vintage1 = new Vintage((String) null, hashMap0, list0, (Map<String, Transportadoras>) null, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      int int0 = (-1);
      String string0 = "Atilhos: ";
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Encomenda encomenda0 = new Encomenda("Atilhos: ", linkedList0, (-1), localDate0, hashMap0);
      encomenda0.setDono("Atilhos: ");
      encomenda0.setTamanho((-1));
      encomenda0.equals(linkedList0);
      encomenda0.setDono("Atilhos: ");
      vintage0.addEncomenda(encomenda0);
      vintage0.calculaMaiorVolFaturacao();
      vintage0.getTransportadoras();
      vintage0.devolverEncomenda((-1));
      String string1 = "tNBY~`nHm7p;7i?";
      // Undeclared exception!
      try { 
        vintage0.getMaiorVolFaturacao("tNBY~`nHm7p;7i?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.toString();
      vintage0.equals(vintage0);
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda encomenda2 = new Encomenda(encomenda1);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_INSTANT;
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) "----------------------------------------\n               VINTAGE                  \n----------------------------------------\nSess\u00E3o Atual: null\nUtilizadores: {}\nEncomendas: []\nTransportadoras: {}\nData do Programa: 2014-02-14\n", dateTimeFormatter0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '----------------------------------------
         //                VINTAGE ...' could not be parsed at index 1
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.setTransportadoras(map0);
      vintage0.getEncomendasSessaoAtual();
      vintage0.getEncomendas();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      assertTrue(map1.equals((Object)map0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Encomenda encomenda0 = new Encomenda();
      List<Artigo> list0 = encomenda0.getArtigos();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Double double0 = new Double(1L);
      encomenda1.equals(double0);
      encomenda1.setPrecoFinal((-2218.542419794473));
      vintage0.addEncomenda(encomenda1);
      vintage0.top10Vendedores(localDate0);
      vintage0.calculaCustoExpedicao(list0);
      vintage0.existeEmail("1zfvYpCuWPdbZ");
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.add(encomenda1);
      vintage0.setEncomendas(linkedList0);
      int int0 = 1;
      vintage0.setEncomendas(linkedList0);
      // Undeclared exception!
      try { 
        vintage0.aterarTransportadora((String) null, double0, double0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = transportadoras0.clone();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      transportadoras0.altera(double0, double1, (-2786));
      transportadoras0.toString();
      transportadoras1.addVolFaturacao(0.0);
      vintage0.adicionarTransportadora(transportadoras1);
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      vintage0.setEncomendas(list0);
      LocalDate localDate0 = null;
      vintage0.listarVendas((String) null);
      vintage0.getTransportadoras();
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoIntervalo((LocalDate) null, (LocalDate) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendas();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      LocalDate localDate0 = MockLocalDate.now();
      Vintage vintage1 = new Vintage("", map0, list0, hashMap0, localDate0);
      Map<String, Transportadoras> map1 = vintage1.getTransportadorasPremium();
      vintage1.setTransportadoras(map1);
      vintage0.calculaMaiorFaturacaoSempre();
      vintage1.equals((Object) null);
      vintage1.devolverEncomenda((-1713));
      vintage1.setEncomendas(list0);
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap1 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "", "", "8+'", 0, linkedList0, linkedList0, linkedList0, hashMap1);
      vintage0.adicionaUtilizador(utilizador0);
      assertEquals("", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.now();
      vintage0.setDataPrograma(localDate0);
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate1 = encomenda0.getDataCriacao();
      vintage0.setDataPrograma(localDate1);
      vintage0.adiarPrazoLimite(1122, 1122);
      vintage0.addEncomenda(encomenda0);
      vintage0.setDataPrograma(localDate0);
      // Undeclared exception!
      try { 
        vintage0.devolverEncomenda(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.toString();
      Vintage vintage1 = new Vintage(vintage0);
      vintage0.getEncomendas();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Transportadoras transportadoras0 = new Transportadoras("", (-1.0), 5830.658311417, false, 0.0);
      hashMap0.put("M-p%l]+&~$`", transportadoras0);
      Transportadoras transportadoras1 = new Transportadoras("----------------------------------------\n               VINTAGE                  \n----------------------------------------\nSess\u00E3o Atual: null\nUtilizadores: {}\nEncomendas: []\nTransportadoras: {}\nData do Programa: 2014-02-14\n", (-278.1943313), 0.0, false, (-278.1943313));
      hashMap0.put("", transportadoras1);
      vintage1.setTransportadoras(hashMap0);
      vintage1.getEncomendasSessaoAtual();
      vintage1.getSessaoAtual();
      vintage0.getTransportadoras();
      Transportadoras transportadoras2 = new Transportadoras();
      vintage1.equals(transportadoras2);
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage1.setUtizadores(map0);
      vintage0.totalDinheiroVintage();
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoIntervalo((LocalDate) null, (LocalDate) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage0.totalDinheiroVintage();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Vintage vintage1 = new Vintage("#<2>=[z:_--/YAq)!N3", map0, list0, hashMap0, localDate0);
      vintage1.listarVendas("#<2>=[z:_--/YAq)!N3");
      Vintage vintage2 = new Vintage(vintage1);
      String string0 = ";?r";
      // Undeclared exception!
      try { 
        vintage2.adicionarPorVender((Artigo) null, ";?r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendas();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      sapatilhas0.setEstado(artigo_Estado0);
      LocalDate localDate0 = sapatilhas0.getDataLancamento();
      Vintage vintage1 = new Vintage("2t)?Du/@:0<S", map0, list0, map1, localDate0);
      Vintage vintage2 = new Vintage(vintage1);
      vintage2.existeEmail("2t)?Du/@:0<S");
      // Undeclared exception!
      try { 
        vintage2.adicionarPorVender(sapatilhas0, "Encomendas: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.calculaMaiorFaturacaoSempre();
      vintage0.totalDinheiroVintage();
      Utilizador utilizador0 = new Utilizador();
      int int0 = 5;
      utilizador0.setId(5);
      vintage0.adicionaUtilizador(utilizador0);
      vintage0.SetSessaoAtual("");
      // Undeclared exception!
      try { 
        vintage0.listarVendas("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      linkedList0.clear();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Vintage vintage1 = new Vintage("               VINTAGE                  \n", map0, linkedList0, map1, (LocalDate) null);
      vintage1.getSessaoAtual();
      int int0 = 0;
      vintage0.devolverEncomenda(0);
      LocalDate localDate0 = MockLocalDate.now();
      vintage0.calculaMaiorFauracaoIntevalo((LocalDate) null, localDate0);
      vintage0.top10Compradores((LocalDate) null);
      Transportadoras transportadoras0 = new Transportadoras();
      vintage1.equals(transportadoras0);
      vintage0.toString();
      String string0 = "";
      vintage0.existeUser("/a]LCJz~]=rE8!>*7C(", "");
      vintage1.adicionarTransportadora(transportadoras0);
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoIntervalo((LocalDate) null, localDate0, "Sess\u00E3o Atual: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendas();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      LocalDate localDate0 = MockLocalDate.now();
      Vintage vintage1 = new Vintage("", map0, list0, map1, localDate0);
      Vintage vintage2 = new Vintage(vintage1);
      vintage2.getTransportadoras();
      vintage2.getSessaoAtual();
      String string1 = "445&*LNPs}}WFG?";
      // Undeclared exception!
      try { 
        vintage1.getMaiorFaturacaoSempre("445&*LNPs}}WFG?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda();
      Map<Integer, String> map0 = encomenda0.getVendedores();
      Encomenda encomenda1 = new Encomenda("C)Q~V=)mpF:=kj'_(", list0, 0.0, localDate0, map0);
      LocalDate localDate1 = encomenda1.getPrazoLimite();
      encomenda1.clone();
      encomenda1.getArtigos();
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoIntervalo(localDate1, localDate0, "               UTILIZADOR               \n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendas();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalDate localDate0 = MockLocalDate.from(localDateTime0);
      Vintage vintage1 = new Vintage("", map0, list0, map1, localDate0);
      LocalDate localDate1 = vintage1.getDataPrograma();
      vintage0.getEncomendas();
      vintage1.calculaMaiorVolFaturacao();
      vintage0.setTransportadoras(map1);
      vintage1.top10Compradores(localDate1);
      vintage0.getUtilizadores();
      vintage0.SetSessaoAtual("o9B=p?{,?.VI)");
      vintage0.adiarPrazoLimite((-3213), (-3213));
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.adiarPrazoLimite(0, (-806));
      assertEquals("o9B=p?{,?.VI)", vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage0.setUtizadores(map0);
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.clone();
      List<Artigo> list0 = encomenda1.getArtigos();
      List<Artigo> list1 = vintage0.getArtigosVenda();
      encomenda1.setCustosExpedicao(0);
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "", "", "", 0, list0, list1, list1, hashMap0);
      List<Artigo> list2 = utilizador0.getPorVender();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1428L));
      Map<Integer, String> map1 = encomenda0.getVendedores();
      Encomenda encomenda2 = new Encomenda("", list2, 0, localDate0, map1);
      vintage0.addEncomenda(encomenda2);
      Vintage vintage1 = new Vintage(vintage0);
      vintage0.listarVendas("");
      // Undeclared exception!
      try { 
        vintage1.getMaiorVolFaturacao("@'mzM>P|t~DW1avyLk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage0.setUtizadores(map0);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getArtigos();
      vintage0.addEncomenda(encomenda0);
      vintage0.avancarTempo();
      // Undeclared exception!
      try { 
        MockInstant.now((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.listarVendas((String) null);
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      vintage0.setEncomendas(list0);
      vintage0.toString();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-95));
      linkedList0.add(integer0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      vintage0.trataEncomenda(linkedList0, (List<Artigo>) null, hashMap0);
      vintage0.SetSessaoAtual("a|Wh449b");
      // Undeclared exception!
      try { 
        vintage0.getTransportadora("hm0O9<-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      String string0 = "]Z";
      vintage1.SetSessaoAtual("]Z");
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      vintage1.setEncomendas(list0);
      Map<String, Utilizador> map0 = null;
      vintage0.getTransportadoras();
      // Undeclared exception!
      try { 
        vintage1.setUtizadores((Map<String, Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      LocalDate localDate0 = MockLocalDate.now();
      encomenda1.setDataCriacao(localDate0);
      LocalDate localDate1 = encomenda1.getDataCriacao();
      Vintage vintage1 = new Vintage("Tg", map0, list0, map1, localDate1);
      // Undeclared exception!
      try { 
        vintage1.getMaiorFaturacaoIntervalo(localDate1, localDate1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      vintage0.listarVendas("----------------------------------------\n");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      vintage0.trataEncomenda(linkedList0, (List<Artigo>) null, hashMap0);
      Vintage vintage1 = new Vintage(vintage0);
      vintage1.getTransportadoras();
      vintage1.getArtigosVenda();
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoSempre("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoIntervalo((LocalDate) null, (LocalDate) null, "hDmF2q_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      vintage0.setEncomendas(list0);
      vintage0.existeUser("7-4S5m4=G>;#W`I&m", "7-4S5m4=G>;#W`I&m");
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1045L);
      Map<String, Double> map0 = vintage0.top10Vendedores(localDate0);
      vintage0.devolverEncomenda(0);
      vintage0.equals(map0);
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoSempre("j,Vx$ky%r)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.getSessaoAtual();
      LocalDate localDate0 = vintage0.getDataPrograma();
      LocalDate localDate1 = null;
      vintage0.listarVendas("");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda("", (List<Artigo>) null, 0.0, localDate0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.adiarPrazoLimite(5, (-92));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      vintage0.setDataPrograma(localDate0);
      vintage0.getTransportadorasPremium();
      vintage0.avancarTempo();
      // Undeclared exception!
      try { 
        vintage0.getTransportadora("n&3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      vintage1.getTransportadorasPremium();
      vintage1.existeEmail("?]nw,r70V^Zk(&-g0/");
      vintage1.existeUser("?]nw,r70V^Zk(&-g0/", "*+I-LE6!uDaJ(iPvU");
      Map<String, Double> map0 = vintage0.top10Vendedores((LocalDate) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = encomenda0.getPrazoLimite();
      Vintage vintage1 = new Vintage("db_ExO-V{", map0, list0, map1, localDate0);
      Vintage vintage2 = new Vintage(vintage1);
      vintage2.SetSessaoAtual("db_ExO-V{");
      Map<String, Transportadoras> map2 = vintage1.getTransportadorasPremium();
      vintage0.setTransportadoras(map2);
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      double double0 = vintage1.calculaCustoExpedicao(linkedList0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(vintage1.equals((Object)vintage2));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.encomendasParaDevolver();
      Transportadoras transportadoras0 = new Transportadoras("", 0.0, 0.0, false, 0.0);
      vintage0.adicionarTransportadora(transportadoras0);
      vintage0.addEncomenda((Encomenda) null);
      Transportadoras transportadoras1 = new Transportadoras();
      transportadoras1.setLucro(0.0);
      transportadoras1.addVolFaturacao(1.5);
      vintage0.adicionarTransportadora(transportadoras1);
      String string0 = null;
      vintage0.calculaMaiorVolFaturacao();
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoSempre((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      vintage1.setEncomendas(list0);
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoSempre("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Vintage vintage1 = new Vintage(vintage0);
      Map<String, Transportadoras> map1 = vintage1.getTransportadoras();
      Vintage vintage2 = new Vintage((String) null, map0, linkedList0, map1, (LocalDate) null);
      Transportadoras transportadoras0 = new Transportadoras("", 1975.3389, 5174.9763, true, (-125.165));
      Transportadoras transportadoras1 = transportadoras0.clone();
      vintage2.adicionarTransportadora(transportadoras1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.SetSessaoAtual("RISCAS");
      // Undeclared exception!
      try { 
        vintage0.adicionarTransportadora((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.getEncomendas();
      String string0 = vintage0.toString();
      assertEquals("----------------------------------------\n               VINTAGE                  \n----------------------------------------\nSess\u00E3o Atual: null\nUtilizadores: {}\nEncomendas: []\nTransportadoras: {}\nData do Programa: 2014-02-14\n", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      Double double0 = new Double((-2949.74));
      Double.isFinite((-2949.74));
      Double.sum(358.0, (-2949.74));
      // Undeclared exception!
      try { 
        vintage1.aterarTransportadora("\n", double0, double0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      vintage1.top10Vendedores((LocalDate) null);
      vintage1.devolverEncomenda(1);
      vintage1.getTransportadorasPremium();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      vintage0.setEncomendas(list0);
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list1 = utilizador0.getCompras();
      utilizador0.setCompras(list1);
      vintage0.adicionaUtilizador(utilizador0);
      Encomenda encomenda0 = new Encomenda();
      vintage1.devolverEncomenda((-1743));
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Double double0 = new Double((-1.0));
      encomenda1.equals(double0);
      Encomenda encomenda2 = encomenda1.clone();
      vintage1.addEncomenda(encomenda2);
      vintage1.totalDinheiroVintage();
      vintage1.getTransportadorasPremium();
      vintage0.avancarTempo();
      // Undeclared exception!
      try { 
        vintage0.getUtilizadores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.getArtigosVenda();
      vintage0.getTransportadorasPremium();
      vintage0.listarVendas((String) null);
      vintage0.avancarTempo();
      vintage0.devolverEncomenda(1490);
      String string0 = vintage0.calculaMaiorFauracaoIntevalo((LocalDate) null, (LocalDate) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vintage vintage0 = null;
      try {
        vintage0 = new Vintage((Vintage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.calculaMaiorFaturacaoSempre();
      Double double0 = new Double(0.1);
      Double double1 = new Double(0.1);
      // Undeclared exception!
      try { 
        vintage0.aterarTransportadora("", double0, double1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      vintage1.listarVendas("7|$0a6_l");
      // Undeclared exception!
      try { 
        vintage0.adicionaUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Double> map0 = vintage0.top10Vendedores((LocalDate) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      vintage0.setTransportadoras(map0);
      LocalDate localDate0 = MockLocalDate.now();
      Map<String, Double> map1 = vintage0.top10Compradores(localDate0);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.getTransportadoras();
      vintage0.totalDinheiroVintage();
      vintage0.getTransportadorasPremium();
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(521, 521);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 521
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      long long0 = 1L;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Vintage vintage1 = null;
      try {
        vintage1 = new Vintage("Data do Programa: ", (Map<String, Utilizador>) null, list0, (Map<String, Transportadoras>) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage0.setUtizadores(map0);
      String string0 = "'OV*a18.d)'D%";
      // Undeclared exception!
      try { 
        vintage0.getTransportadora("'OV*a18.d)'D%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "avW:r:[HjUP7!3y|";
      Vintage vintage0 = new Vintage();
      vintage0.getUtilizadores();
      vintage0.getEncomendasSessaoAtual();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) "avW:r:[HjUP7!3y|");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'avW:r:[HjUP7!3y|' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendas();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Vintage vintage2 = new Vintage("               VINTAGE                  \n", map0, list0, hashMap0, (LocalDate) null);
      assertFalse(vintage2.equals((Object)vintage0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.totalDinheiroVintage();
      String string0 = "@DRg[jtq9*rzbftMo";
      Transportadoras transportadoras0 = new Transportadoras("@DRg[jtq9*rzbftMo", 0.0, 33.92287633553849, false, 419.5887443249604);
      transportadoras0.setPremium(true);
      Transportadoras transportadoras1 = transportadoras0.clone();
      transportadoras1.setVolFaturacao(33.92287633553849);
      Transportadoras transportadoras2 = new Transportadoras(transportadoras1);
      transportadoras2.setPremium(true);
      Long long0 = new Long(2490L);
      transportadoras0.calculaPrecoExpedicao(long0);
      transportadoras2.toString();
      vintage0.adicionarTransportadora(transportadoras2);
      Double double0 = new Double(33.92287633553849);
      int int0 = (-3274);
      vintage0.aterarTransportadora("@DRg[jtq9*rzbftMo", double0, double0, (-3274));
      vintage0.calculaMaiorVolFaturacao();
      // Undeclared exception!
      try { 
        vintage0.calculaCustoExpedicao((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.getTransportadorasPremium();
      Encomenda encomenda0 = new Encomenda();
      vintage0.getEncomendas();
      encomenda0.setCustosExpedicao(0.0);
      encomenda0.setId(3786);
      vintage0.addEncomenda(encomenda0);
      List<Artigo> list0 = encomenda0.getArtigos();
      encomenda0.setArtigos(list0);
      vintage0.avancarTempo();
      vintage0.totalDinheiroVintage();
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list1 = utilizador0.getPorVender();
      Utilizador utilizador1 = null;
      try {
        utilizador1 = new Utilizador("               VINTAGE                  \n", "               VINTAGE                  \n", "# Formula: ", "               VINTAGE                  \n", 4564, list1, list1, list1, (Map<LocalDate, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda1.setEstado(encomenda_Estado_Encomenda0);
      vintage0.addEncomenda(encomenda1);
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage0.setUtizadores(map0);
      vintage0.SetSessaoAtual("");
      vintage0.calculaMaiorFaturacaoSempre();
      vintage0.adiarPrazoLimite((-1), (-1));
      // Undeclared exception!
      try { 
        vintage0.getMaiorVolFaturacao("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage0.totalDinheiroVintage();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Vintage vintage1 = new Vintage("#<2>=[z:_--/YAq)!N3", map0, list0, hashMap0, localDate0);
      vintage1.listarVendas("#<2>=[z:_--/YAq)!N3");
      Vintage vintage2 = new Vintage(vintage1);
      String string0 = ";?r";
      vintage2.calculaMaiorVolFaturacao();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      vintage1.trataEncomenda(linkedList0, (List<Artigo>) null, hashMap1);
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoIntervalo(localDate0, localDate0, ";NeeV>H=d;}ahm?o:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      LocalDate localDate0 = encomenda1.getPrazoLimite();
      vintage0.top10Vendedores(localDate0);
      vintage0.getArtigosVenda();
      vintage0.getEncomendas();
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      vintage0.setTransportadoras(map0);
      vintage0.getTransportadoras();
      int int0 = 1;
      vintage0.devolverEncomenda(1);
      vintage0.calculaMaiorVolFaturacao();
      List<Encomenda> list0 = vintage0.getEncomendas();
      vintage0.top10Compradores((LocalDate) null);
      vintage0.totalDinheiroVintage();
      String string0 = null;
      Integer integer0 = new Integer(1);
      vintage0.setEncomendas(list0);
      vintage0.setTransportadoras(map0);
      vintage0.totalDinheiroVintage();
      vintage0.existeEmail("@ tH8gQu5QZ/0R+C<");
      vintage0.totalDinheiroVintage();
      vintage0.avancarTempo();
      vintage0.devolverEncomenda(1);
      vintage0.getEncomendas();
      vintage0.getSessaoAtual();
      vintage0.listarVendas("c?3uq");
      vintage0.encomendasParaDevolver();
      try { 
        Double.valueOf("E+Ww\"RiaCD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      vintage0.setTransportadoras(map0);
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      int int0 = 1;
      vintage0.devolverEncomenda(1);
      vintage0.calculaMaiorVolFaturacao();
      vintage0.getEncomendas();
      vintage0.setTransportadoras(map1);
      vintage0.top10Compradores((LocalDate) null);
      vintage0.totalDinheiroVintage();
      String string0 = null;
      // Undeclared exception!
      try { 
        vintage0.getMaiorVolFaturacao((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      int int0 = 1;
      vintage0.devolverEncomenda(1);
      vintage0.calculaMaiorVolFaturacao();
      List<Encomenda> list0 = vintage0.getEncomendas();
      vintage0.setTransportadoras(map0);
      vintage0.totalDinheiroVintage();
      Integer integer0 = new Integer(1);
      vintage0.toString();
      vintage0.setEncomendas(list0);
      vintage0.setTransportadoras(map0);
      vintage0.totalDinheiroVintage();
      vintage0.existeEmail("@ tH8gQu5QZ/0R+C<");
      // Undeclared exception!
      try { 
        vintage0.getTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendas();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      LocalDate localDate0 = MockLocalDate.now();
      Vintage vintage1 = new Vintage((String) null, map0, list0, map1, localDate0);
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, "", 4830, linkedList0, linkedList0, linkedList0, hashMap0);
      vintage1.adicionaUtilizador(utilizador0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Integer integer0 = new Integer(4830);
      vintage1.existeUser("", (String) null);
      vintage1.existeUser("", "");
      // Undeclared exception!
      try { 
        encomenda1.getVendedores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      vintage1.toString();
      Integer integer0 = new Integer((-824));
      vintage1.equals(integer0);
      // Undeclared exception!
      try { 
        vintage0.equals(vintage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      String string0 = null;
      vintage0.adiarPrazoLimite((-4332), (-4332));
      vintage0.SetSessaoAtual((String) null);
      vintage0.totalDinheiroVintage();
      vintage0.getArtigosVenda();
      vintage0.getUtilizadores();
      vintage0.getSessaoAtual();
      vintage0.existeUser((String) null, (String) null);
      vintage0.toString();
      vintage0.getDataPrograma();
      vintage0.toString();
      vintage0.devolverEncomenda(0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      linkedList0.toArray();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getArtigos();
      encomenda0.toString();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setTamanho(0);
      // Undeclared exception!
      try { 
        linkedList0.set((-3170), encomenda1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3170, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Encomenda encomenda2 = encomenda1.clone();
      vintage0.getTransportadorasPremium();
      LocalDate localDate0 = encomenda2.getDataCriacao();
      vintage1.top10Compradores(localDate0);
      vintage1.top10Compradores(localDate0);
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      encomenda1.setTamanho(157);
      List<Artigo> list1 = encomenda2.getArtigos();
      vintage1.setEncomendas(list0);
      vintage1.calculaCustoExpedicao(list1);
      vintage1.getEncomendasSessaoAtual();
      vintage1.getEncomendas();
      vintage0.top10Compradores(localDate0);
      vintage1.getTransportadoras();
      encomenda1.setArtigos(list1);
      vintage0.existeEmail("^gTLg+!2Hi");
      int int0 = 0;
      vintage0.devolverEncomenda(0);
      vintage0.getSessaoAtual();
      vintage1.addEncomenda(encomenda1);
      // Undeclared exception!
      try { 
        vintage1.getMaiorFaturacaoSempre("^gTLg+!2Hi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2110);
      Integer.remainderUnsigned(2110, 2110);
      linkedList0.add(integer0);
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      vintage0.trataEncomenda(linkedList0, list0, hashMap0);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      LocalDate localDate0 = sapatilhas0.getDataLancamento();
      String string0 = vintage0.calculaMaiorFauracaoIntevalo(localDate0, localDate0);
      assertEquals("", string0);
  }
}
