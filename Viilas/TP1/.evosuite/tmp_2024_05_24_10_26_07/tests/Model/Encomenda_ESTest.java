/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 09:28:16 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Artigo;
import Model.Encomenda;
import Model.Malas;
import Model.Sapatilhas;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Month;
import java.time.OffsetTime;
import java.time.Period;
import java.time.YearMonth;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.chrono.ThaiBuddhistDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.MockYearMonth;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setCustosExpedicao((-2742.4));
      List<Artigo> list0 = encomenda1.getArtigos();
      String string0 = "";
      encomenda1.equals("");
      List<Artigo> list1 = encomenda0.getArtigos();
      encomenda1.equals(list1);
      encomenda1.setPrecoFinal((-2742.4));
      encomenda1.setArtigos(list0);
      encomenda0.getVendedores();
      encomenda0.equals("");
      encomenda0.equals(encomenda1);
      Encomenda.Estado_Encomenda.values();
      encomenda0.getArtigos();
      encomenda0.toString();
      String string1 = "mHDz ~3;";
      // Undeclared exception!
      try { 
        Encomenda.Estado_Encomenda.valueOf("mHDz ~3;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Encomenda.Estado_Encomenda.mHDz ~3;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<Artigo> list0 = encomenda1.getArtigos();
      Period period0 = Period.ofDays((-93));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      zoneOffset0.getId();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Encomenda encomenda2 = new Encomenda("S5/Aez_qMz-lI&qZ", list0, (-2054.59329), localDate0, hashMap0);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      Sapatilhas sapatilhas1 = sapatilhas0.clone();
      encomenda2.equals(sapatilhas1);
      encomenda2.getVendedores();
      encomenda1.getEstado();
      encomenda2.getEmbalagem();
      encomenda2.setPrazoLimite((LocalDate) null);
      encomenda0.toString();
      Encomenda encomenda3 = encomenda2.clone();
      Encomenda.Dimensao_Embalagem.values();
      encomenda3.getPrazoLimite();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda1 = Encomenda.Estado_Encomenda.PENDENTE;
      encomenda0.getArtigos();
      encomenda1.setPrecoFinal(1320.02414247);
      encomenda1.setEstado(encomenda_Estado_Encomenda1);
      encomenda0.equals(encomenda1);
      encomenda0.setPrecoFinal(1320.02414247);
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.GRANDE;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      encomenda0.getTamanho();
      encomenda0.setId(0);
      encomenda0.getDono();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer.compare(0, 0);
      try { 
        Integer.parseUnsignedInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.MEDIO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      encomenda0.setEstado((Encomenda.Estado_Encomenda) null);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      sapatilhas0.setAtilhos(true);
      encomenda0.equals(sapatilhas0);
      encomenda0.getEstado();
      encomenda0.getArtigos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setId((-1095));
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Encomenda encomenda2 = encomenda1.clone();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-1263.66F), "", (-2027), "", artigo_Estado0, (-1504), artigo_Avaliação0, "", "", "ID da Encomenda: ", (-3190.61031), (-1504), "[{R");
      malas0.setEstado(artigo_Estado0);
      encomenda0.equals(malas0);
      encomenda1.setCustosExpedicao((-1263.66F));
      encomenda2.equals(encomenda0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.putAll(hashMap1);
      encomenda2.setVendedores(hashMap0);
      Encomenda encomenda3 = encomenda0.clone();
      encomenda1.toString();
      encomenda2.getTamanho();
      encomenda1.getArtigos();
      encomenda2.setDono("");
      Encomenda encomenda4 = encomenda3.clone();
      encomenda4.toString();
      encomenda2.equals(artigo_Estado0);
      encomenda2.setDono("");
      // Undeclared exception!
      try { 
        MockLocalTime.ofNanoOfDay((-1220L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1220
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      encomenda1.setCustosExpedicao((-1263.66F));
      encomenda1.equals(encomenda0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.putAll(hashMap1);
      encomenda0.setVendedores(hashMap0);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda1.toString();
      encomenda1.getTamanho();
      encomenda1.getArtigos();
      encomenda0.setDono("");
      Encomenda encomenda3 = encomenda2.clone();
      encomenda3.toString();
      encomenda1.equals(artigo_Estado0);
      // Undeclared exception!
      try { 
        MockLocalTime.ofNanoOfDay((-1220L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1220
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setTamanho((-11));
      encomenda0.toString();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.equals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n");
      int int0 = (-2572);
      encomenda1.equals(encomenda0);
      // Undeclared exception!
      try { 
        Encomenda.Estado_Encomenda.valueOf("Descri\u00E7\u00E3o: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Encomenda.Estado_Encomenda.Descri\u00E7\u00E3o: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-1263.66F), "", (-2027), "", artigo_Estado0, (-1504), artigo_Avaliação0, "", "", "ID da Encomenda: ", (-3190.61031), (-1504), "[{R");
      malas0.setEstado(artigo_Estado0);
      encomenda0.equals(malas0);
      encomenda0.setCustosExpedicao((-1263.66F));
      encomenda1.equals(encomenda0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.putAll(hashMap1);
      encomenda1.setVendedores(hashMap0);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda0.toString();
      encomenda1.getTamanho();
      encomenda0.getArtigos();
      encomenda1.setDono("");
      Encomenda encomenda3 = encomenda2.clone();
      encomenda3.toString();
      encomenda1.equals(artigo_Estado0);
      encomenda1.setDono("");
      // Undeclared exception!
      try { 
        MockLocalTime.ofNanoOfDay((-1220L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1220
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<Artigo> list0 = encomenda0.getArtigos();
      LocalDate localDate0 = MockLocalDate.now();
      Map<Integer, String> map0 = encomenda0.getVendedores();
      Encomenda encomenda1 = new Encomenda("Fe9.", list0, (-126.46404902766156), localDate0, map0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda1.getArtigos();
      encomenda0.setPrazoLimite(localDate0);
      encomenda2.setId(0);
      Period period0 = Period.ZERO;
      Period period1 = period0.minusMonths(0);
      IsoChronology isoChronology0 = period1.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      encomenda2.equals(localDate1);
      Encomenda encomenda3 = encomenda2.clone();
      encomenda3.clone();
      String string0 = null;
      // Undeclared exception!
      try { 
        Encomenda.Dimensao_Embalagem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda1 = Encomenda.Estado_Encomenda.PENDENTE;
      encomenda0.getArtigos();
      encomenda0.setEstado(encomenda_Estado_Encomenda1);
      encomenda0.equals(encomenda0);
      encomenda0.setPrecoFinal(1320.02414247);
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.GRANDE;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      encomenda0.getTamanho();
      encomenda0.setId(0);
      encomenda0.getDono();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      Integer.compare(0, 0);
      Integer.getInteger((String) null, 2753);
      hashMap0.put(integer0, "");
      encomenda0.setVendedores(hashMap0);
      encomenda0.getPrecoFinal();
      encomenda0.setDataCriacao((LocalDate) null);
      encomenda0.getTamanho();
      encomenda0.getArtigos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getArtigos();
      Encomenda encomenda1 = new Encomenda();
      encomenda1.equals(encomenda0);
      Clock clock0 = null;
      Encomenda encomenda2 = new Encomenda(encomenda0);
      // Undeclared exception!
      try { 
        encomenda2.getVendedores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      encomenda0.setCustosExpedicao((-807.7288537));
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals((-807.7288537), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      
      encomenda0.setTamanho(0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals((-807.7288537), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      
      String string0 = encomenda0.toString();
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: -807.7288537\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals((-807.7288537), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNotNull(string0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.FINALIZADA;
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda_Estado_Encomenda0);
      
      Encomenda encomenda1 = encomenda0.clone();
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals((-807.7288537), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals((-807.7288537), encomenda1.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda1);
      
      boolean boolean0 = encomenda1.equals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: -807.7288537\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n");
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals((-807.7288537), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals((-807.7288537), encomenda1.getCustosExpedicao(), 0.01);
      
      encomenda1.setDono("M6Cvc\"ng&tXr(");
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals((-807.7288537), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertEquals("M6Cvc\"ng&tXr(", encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals((-807.7288537), encomenda1.getCustosExpedicao(), 0.01);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda1 = Encomenda.Estado_Encomenda.DEVOLVIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda_Estado_Encomenda1.equals((Object)encomenda_Estado_Encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda_Estado_Encomenda1, encomenda_Estado_Encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals((-807.7288537), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      
      encomenda0.setTamanho((-2572));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals((-2572), encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals((-807.7288537), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      
      Encomenda.Dimensao_Embalagem[] encomenda_Dimensao_EmbalagemArray0 = Encomenda.Dimensao_Embalagem.values();
      assertEquals(3, encomenda_Dimensao_EmbalagemArray0.length);
      assertNotNull(encomenda_Dimensao_EmbalagemArray0);
      
      // Undeclared exception!
      try { 
        MockIsoChronology.dateNow((IsoChronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.FINALIZADA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.GRANDE;
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem1 = Encomenda.Dimensao_Embalagem.PEQUENO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem1);
      assertFalse(encomenda_Dimensao_Embalagem1.equals((Object)encomenda_Dimensao_Embalagem0));
      assertNotSame(encomenda_Dimensao_Embalagem1, encomenda_Dimensao_Embalagem0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertFalse(encomenda_Dimensao_Embalagem0.equals((Object)encomenda_Dimensao_Embalagem1));
      assertNotSame(encomenda_Dimensao_Embalagem0, encomenda_Dimensao_Embalagem1);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      LocalDate localDate0 = encomenda0.getDataCriacao();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertNotNull(localDate0);
      
      encomenda0.setTamanho(144);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(144, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      boolean boolean0 = encomenda0.equals(thaiBuddhistDate0);
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(144, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda1 = Encomenda.Estado_Encomenda.DEVOLVIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda1);
      assertFalse(encomenda_Estado_Encomenda1.equals((Object)encomenda_Estado_Encomenda0));
      assertNotSame(encomenda_Estado_Encomenda1, encomenda_Estado_Encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(144, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(144, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = encomenda0.getId();
      assertEquals(1, int0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(144, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      String string0 = encomenda0.getDono();
      assertEquals("", string0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(144, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertNotNull(string0);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem2 = encomenda0.getEmbalagem();
      assertFalse(encomenda_Dimensao_Embalagem2.equals((Object)encomenda_Dimensao_Embalagem1));
      assertNotSame(encomenda_Dimensao_Embalagem2, encomenda_Dimensao_Embalagem1);
      assertSame(encomenda_Dimensao_Embalagem2, encomenda_Dimensao_Embalagem0);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda_Dimensao_Embalagem2);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(144, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      LocalDate localDate1 = encomenda0.getDataCriacao();
      assertSame(localDate1, localDate0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(144, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertNotNull(localDate1);
      
      encomenda0.setTamanho(1);
      assertEquals(1, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem3 = Encomenda.Dimensao_Embalagem.PEQUENO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem3);
      assertFalse(encomenda_Dimensao_Embalagem3.equals((Object)encomenda_Dimensao_Embalagem2));
      assertFalse(encomenda_Dimensao_Embalagem3.equals((Object)encomenda_Dimensao_Embalagem0));
      assertSame(encomenda_Dimensao_Embalagem3, encomenda_Dimensao_Embalagem1);
      assertNotSame(encomenda_Dimensao_Embalagem3, encomenda_Dimensao_Embalagem2);
      assertNotSame(encomenda_Dimensao_Embalagem3, encomenda_Dimensao_Embalagem0);
      assertEquals(1, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      int int1 = encomenda0.getTamanho();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNotNull(encomenda1);
      
      List<Artigo> list0 = encomenda1.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      encomenda0.setDono("");
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      
      Encomenda encomenda2 = encomenda1.clone();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertNull(encomenda2.getDono());
      assertEquals(1, encomenda2.getId());
      assertNotNull(encomenda2);
      
      List<Artigo> list1 = encomenda1.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list1, list0);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      encomenda2.setArtigos(list1);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(list1, list0);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertNull(encomenda2.getDono());
      assertEquals(1, encomenda2.getId());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Encomenda encomenda3 = new Encomenda("", list0, 319.5611280229238, localDate0, hashMap0);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(319.5611280229238, encomenda3.getPrecoFinal(), 0.01);
      assertEquals("", encomenda3.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda3.getEstado());
      assertEquals(2, encomenda3.getId());
      assertEquals(0, encomenda3.getTamanho());
      assertEquals(319.5611280229238, encomenda3.getCustosExpedicao(), 0.01);
      assertNull(encomenda3.getEmbalagem());
      assertNotNull(encomenda3);
      
      String string0 = encomenda3.toString();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertNotSame(encomenda3, encomenda0);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 2\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 319.5611280229238\nPre\u00E7o final: 319.5611280229238\nEstado da encomenda: EXPEDIDA\n", string0);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(319.5611280229238, encomenda3.getPrecoFinal(), 0.01);
      assertEquals("", encomenda3.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda3.getEstado());
      assertEquals(2, encomenda3.getId());
      assertEquals(0, encomenda3.getTamanho());
      assertEquals(319.5611280229238, encomenda3.getCustosExpedicao(), 0.01);
      assertNull(encomenda3.getEmbalagem());
      assertNotNull(string0);
      
      double double0 = encomenda3.getCustosExpedicao();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertNotSame(encomenda3, encomenda0);
      assertEquals(319.5611280229238, double0, 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(319.5611280229238, encomenda3.getPrecoFinal(), 0.01);
      assertEquals("", encomenda3.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda3.getEstado());
      assertEquals(2, encomenda3.getId());
      assertEquals(0, encomenda3.getTamanho());
      assertEquals(319.5611280229238, encomenda3.getCustosExpedicao(), 0.01);
      assertNull(encomenda3.getEmbalagem());
      
      int int0 = encomenda0.getTamanho();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertEquals(0, int0);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      
      encomenda2.getEmbalagem();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertNull(encomenda2.getDono());
      assertEquals(1, encomenda2.getId());
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.PENDENTE;
      encomenda2.setEstado(encomenda_Estado_Encomenda0);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertNull(encomenda2.getDono());
      assertEquals(1, encomenda2.getId());
      
      List<Artigo> list2 = encomenda2.getArtigos();
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertNull(encomenda2.getDono());
      assertEquals(1, encomenda2.getId());
      assertNotNull(list2);
      
      encomenda0.setEmbalagem((Encomenda.Dimensao_Embalagem) null);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      
      double double1 = encomenda0.getPrecoFinal();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      
      // Undeclared exception!
      try { 
        encomenda2.getVendedores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      String string0 = encomenda0.toString();
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(string0);
      
      Month month0 = Month.JULY;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      assertNotNull(localDate0);
      
      encomenda0.setPrazoLimite(localDate0);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      
      encomenda0.setDono("==========   Artigos   ==========\n");
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = encomenda0.getEstado();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda_Estado_Encomenda0);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      double double0 = encomenda0.getCustosExpedicao();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      encomenda0.setTamanho((-5501));
      assertEquals((-5501), encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      int int0 = encomenda0.getTamanho();
      assertEquals((-5501), int0);
      assertEquals((-5501), encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      int int1 = encomenda0.getId();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals((-5501), encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertEquals((-5501), encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      String string1 = encomenda0.getDono();
      assertFalse(string1.equals((Object)string0));
      assertEquals("==========   Artigos   ==========\n", string1);
      assertEquals((-5501), encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      assertNotNull(string1);
      
      double double1 = encomenda0.getPrecoFinal();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals((-5501), encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda1 = encomenda0.getEstado();
      assertSame(encomenda_Estado_Encomenda1, encomenda_Estado_Encomenda0);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda_Estado_Encomenda1);
      assertEquals((-5501), encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      Encomenda.Dimensao_Embalagem[] encomenda_Dimensao_EmbalagemArray0 = Encomenda.Dimensao_Embalagem.values();
      assertEquals(3, encomenda_Dimensao_EmbalagemArray0.length);
      assertNotNull(encomenda_Dimensao_EmbalagemArray0);
      
      encomenda0.setId((-5501));
      assertEquals((-5501), encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals((-5501), encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      
      String string2 = encomenda0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: -5501\nEncomenda criada em: 2014-02-14\nPrazo Limite: 0001-07-01\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string2);
      assertEquals((-5501), encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals((-5501), encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda0.getDono());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.DEVOLVIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setDataCriacao((LocalDate) null);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setPrazoLimite((LocalDate) null);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      double double0 = encomenda0.getPrecoFinal();
      assertEquals(0.0, double0, 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setDono("");
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setPrecoFinal(0.0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      encomenda0.setVendedores(map0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      encomenda0.setTamanho(0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.getEmbalagem();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      LocalDate localDate0 = encomenda0.getDataCriacao();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(localDate0);
      
      LocalDate localDate1 = MockLocalDate.now();
      assertNotNull(localDate1);
      
      encomenda0.setPrazoLimite(localDate1);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda1 = encomenda0.getEstado();
      assertSame(encomenda_Estado_Encomenda1, encomenda_Estado_Encomenda0);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda_Estado_Encomenda1);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.PEQUENO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      Encomenda.Estado_Encomenda[] encomenda_Estado_EncomendaArray0 = Encomenda.Estado_Encomenda.values();
      assertEquals(4, encomenda_Estado_EncomendaArray0.length);
      assertNotNull(encomenda_Estado_EncomendaArray0);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem1 = encomenda0.getEmbalagem();
      assertSame(encomenda_Dimensao_Embalagem1, encomenda_Dimensao_Embalagem0);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda_Dimensao_Embalagem1);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setTamanho((-3703));
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals((-3703), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setId((-3703));
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals((-3703), encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals((-3703), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setVendedores(map0);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals((-3703), encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals((-3703), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int0 = encomenda0.getId();
      assertEquals((-3703), int0);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals((-3703), encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals((-3703), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = encomenda0.equals(object0);
      assertFalse(boolean0);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals((-3703), encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals((-3703), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2422L));
      assertNotNull(localDate0);
      
      Encomenda encomenda1 = new Encomenda("==========   Artigos   ==========\n", list0, 4885.911020780175, localDate0, (Map<Integer, String>) null);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(4885.911020780175, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(2, encomenda1.getId());
      assertEquals(4885.911020780175, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertNotNull(encomenda1);
      
      Encomenda encomenda2 = new Encomenda(encomenda1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(4885.911020780175, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(2, encomenda1.getId());
      assertEquals(4885.911020780175, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertNull(encomenda2.getDono());
      assertEquals(2, encomenda2.getId());
      assertEquals(4885.911020780175, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(4885.911020780175, encomenda2.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda2);
      
      int int0 = encomenda2.getId();
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(2, int0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(4885.911020780175, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(2, encomenda1.getId());
      assertEquals(4885.911020780175, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertNull(encomenda2.getDono());
      assertEquals(2, encomenda2.getId());
      assertEquals(4885.911020780175, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(4885.911020780175, encomenda2.getCustosExpedicao(), 0.01);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.MEDIO;
      encomenda2.setArtigos(list0);
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(4885.911020780175, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(2, encomenda1.getId());
      assertEquals(4885.911020780175, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertNull(encomenda2.getDono());
      assertEquals(2, encomenda2.getId());
      assertEquals(4885.911020780175, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(4885.911020780175, encomenda2.getCustosExpedicao(), 0.01);
      
      encomenda2.setPrazoLimite(localDate0);
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(4885.911020780175, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(2, encomenda1.getId());
      assertEquals(4885.911020780175, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertNull(encomenda2.getDono());
      assertEquals(2, encomenda2.getId());
      assertEquals(4885.911020780175, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(4885.911020780175, encomenda2.getCustosExpedicao(), 0.01);
      
      encomenda2.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(4885.911020780175, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(2, encomenda1.getId());
      assertEquals(4885.911020780175, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertNull(encomenda2.getDono());
      assertEquals(2, encomenda2.getId());
      assertEquals(4885.911020780175, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(4885.911020780175, encomenda2.getCustosExpedicao(), 0.01);
      
      String string0 = encomenda0.getDono();
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertEquals("", string0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(string0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      double double0 = encomenda2.getPrecoFinal();
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(4885.911020780175, double0, 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(4885.911020780175, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(2, encomenda1.getId());
      assertEquals(4885.911020780175, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("==========   Artigos   ==========\n", encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertNull(encomenda2.getDono());
      assertEquals(2, encomenda2.getId());
      assertEquals(4885.911020780175, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(4885.911020780175, encomenda2.getCustosExpedicao(), 0.01);
      
      // Undeclared exception!
      try { 
        encomenda2.getVendedores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(encomenda1);
      
      List<Artigo> list0 = encomenda1.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Sapatilhas sapatilhas0 = new Sapatilhas();
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertNotNull(sapatilhas0);
      
      Sapatilhas sapatilhas1 = new Sapatilhas(sapatilhas0);
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertNotNull(sapatilhas1);
      
      encomenda1.setCustosExpedicao((-3509.375));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      
      LocalDate localDate0 = sapatilhas1.getDataLancamento();
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertNotNull(localDate0);
      
      Encomenda encomenda2 = new Encomenda("S", list0, (-3509.375), localDate0, (Map<Integer, String>) null);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertNotNull(encomenda2);
      
      List<Artigo> list1 = encomenda2.getArtigos();
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(list1, list0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Encomenda encomenda3 = new Encomenda("S", list1, (-3509.375), localDate0, (Map<Integer, String>) null);
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals((-3509.375), encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(3, encomenda3.getId());
      assertNull(encomenda3.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda3.getEstado());
      assertEquals(0, encomenda3.getTamanho());
      assertEquals((-3509.375), encomenda3.getPrecoFinal(), 0.01);
      assertEquals("S", encomenda3.getDono());
      assertNotNull(encomenda3);
      
      double double0 = encomenda3.getCustosExpedicao();
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(list1, list0);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertEquals((-3509.375), double0, 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals((-3509.375), encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(3, encomenda3.getId());
      assertNull(encomenda3.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda3.getEstado());
      assertEquals(0, encomenda3.getTamanho());
      assertEquals((-3509.375), encomenda3.getPrecoFinal(), 0.01);
      assertEquals("S", encomenda3.getDono());
      
      encomenda1.getEmbalagem();
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      
      Encomenda.Estado_Encomenda[] encomenda_Estado_EncomendaArray0 = Encomenda.Estado_Encomenda.values();
      assertEquals(4, encomenda_Estado_EncomendaArray0.length);
      assertNotNull(encomenda_Estado_EncomendaArray0);
      
      encomenda3.setPrazoLimite(localDate0);
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(list1, list0);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals((-3509.375), encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(3, encomenda3.getId());
      assertNull(encomenda3.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda3.getEstado());
      assertEquals(0, encomenda3.getTamanho());
      assertEquals((-3509.375), encomenda3.getPrecoFinal(), 0.01);
      assertEquals("S", encomenda3.getDono());
      
      boolean boolean0 = encomenda0.equals(list1);
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(list1, list0);
      assertFalse(boolean0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      String string0 = encomenda1.toString();
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: -3509.375\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(string0);
      
      encomenda1.setId(2);
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      
      double double1 = sapatilhas0.precoFinal(localDate0);
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertEquals(0.0, double1, 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      
      encomenda2.setDono("S");
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      
      encomenda3.setCustosExpedicao(2692.0222720857287);
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(list1, list0);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(2692.0222720857287, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(3, encomenda3.getId());
      assertNull(encomenda3.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda3.getEstado());
      assertEquals(0, encomenda3.getTamanho());
      assertEquals((-3509.375), encomenda3.getPrecoFinal(), 0.01);
      assertEquals("S", encomenda3.getDono());
      
      encomenda2.getEmbalagem();
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      
      int int0 = encomenda3.getTamanho();
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(list1, list0);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertEquals(0, int0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(sapatilhas0.getEstado());
      assertEquals("", sapatilhas0.getCor());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getCodigo());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertNull(sapatilhas1.getEstado());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals("", sapatilhas1.getDescricao());
      assertEquals("", sapatilhas1.getCor());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getTipo());
      assertEquals((-3509.375), encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals((-3509.375), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda2.getId());
      assertEquals("S", encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(2692.0222720857287, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(3, encomenda3.getId());
      assertNull(encomenda3.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda3.getEstado());
      assertEquals(0, encomenda3.getTamanho());
      assertEquals((-3509.375), encomenda3.getPrecoFinal(), 0.01);
      assertEquals("S", encomenda3.getDono());
      
      LocalDate localDate1 = encomenda1.getDataCriacao();
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(localDate1, localDate0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-3509.375), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(localDate1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      encomenda0.setId(0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      
      int int0 = encomenda0.getId();
      assertEquals(0, int0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      
      encomenda0.setId(196);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      
      Encomenda encomenda1 = encomenda0.clone();
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(196, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNotNull(encomenda1);
      
      String string0 = encomenda0.toString();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 196\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(string0);
      
      String string1 = encomenda0.toString();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(encomenda0, encomenda1);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 196\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string1);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(string1);
      
      Encomenda.Dimensao_Embalagem[] encomenda_Dimensao_EmbalagemArray0 = Encomenda.Dimensao_Embalagem.values();
      assertEquals(3, encomenda_Dimensao_EmbalagemArray0.length);
      assertNotNull(encomenda_Dimensao_EmbalagemArray0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.FINALIZADA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      
      int int1 = encomenda0.getId();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(int1 == int0);
      assertNotSame(encomenda0, encomenda1);
      assertEquals(196, int1);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      
      List<Artigo> list1 = encomenda0.getArtigos();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(list1, list0);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      encomenda0.getEmbalagem();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      
      encomenda0.setArtigos(list0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(list0.equals((Object)list1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(list0, list1);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      encomenda0.setId(196);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      
      Encomenda encomenda2 = encomenda0.clone();
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(196, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertNotNull(encomenda2);
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      encomenda2.setVendedores(map0);
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(196, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int2 = encomenda2.getTamanho();
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(0, int2);
      assertEquals(196, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      
      encomenda0.setPrecoFinal(0.0);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      
      Month month0 = Month.APRIL;
      LocalDate localDate0 = MockLocalDate.of(0, month0, 2);
      assertNotNull(localDate0);
      
      encomenda2.setDataCriacao(localDate0);
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(196, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      
      double double0 = encomenda0.getPrecoFinal();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      
      encomenda2.setDataCriacao(localDate0);
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(196, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      
      Encomenda.Dimensao_Embalagem[] encomenda_Dimensao_EmbalagemArray1 = Encomenda.Dimensao_Embalagem.values();
      assertFalse(encomenda_Dimensao_EmbalagemArray1.equals((Object)encomenda_Dimensao_EmbalagemArray0));
      assertNotSame(encomenda_Dimensao_EmbalagemArray1, encomenda_Dimensao_EmbalagemArray0);
      assertEquals(3, encomenda_Dimensao_EmbalagemArray1.length);
      assertNotNull(encomenda_Dimensao_EmbalagemArray1);
      
      encomenda1.setPrecoFinal((-1.0));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertEquals(196, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(196, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals((-1.0), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Sapatilhas sapatilhas0 = new Sapatilhas();
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNotNull(sapatilhas0);
      
      Sapatilhas sapatilhas1 = new Sapatilhas(sapatilhas0);
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNull(sapatilhas1.getEstado());
      assertEquals("", sapatilhas1.getTipo());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertNotNull(sapatilhas1);
      
      LocalDate localDate0 = sapatilhas1.getDataLancamento();
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNull(sapatilhas1.getEstado());
      assertEquals("", sapatilhas1.getTipo());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertNotNull(localDate0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Encomenda encomenda1 = new Encomenda("!#5f8x4ODRR}x", list0, (-1605.75228), localDate0, hashMap0);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNull(sapatilhas1.getEstado());
      assertEquals("", sapatilhas1.getTipo());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("!#5f8x4ODRR}x", encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertEquals((-1605.75228), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals((-1605.75228), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertNotNull(encomenda1);
      
      LocalDate localDate1 = encomenda1.getPrazoLimite();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(localDate1, localDate0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNull(sapatilhas1.getEstado());
      assertEquals("", sapatilhas1.getTipo());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("!#5f8x4ODRR}x", encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertEquals((-1605.75228), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals((-1605.75228), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertNotNull(localDate1);
      
      Encomenda encomenda2 = encomenda0.clone();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda2);
      
      encomenda2.setTamanho(0);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      List<Artigo> list1 = encomenda0.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(list1, list0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      sapatilhas0.setDataLancamento(localDate0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(localDate0, localDate1);
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNull(sapatilhas1.getEstado());
      assertEquals("", sapatilhas1.getTipo());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      
      encomenda2.getEmbalagem();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      boolean boolean0 = encomenda1.equals(sapatilhas0);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(list0.equals((Object)list1));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNull(sapatilhas1.getEstado());
      assertEquals("", sapatilhas1.getTipo());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("!#5f8x4ODRR}x", encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertEquals((-1605.75228), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals((-1605.75228), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.FINALIZADA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      
      List<Artigo> list2 = encomenda0.getArtigos();
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertNotNull(list2);
      
      double double0 = encomenda1.getPrecoFinal();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertEquals((-1605.75228), double0, 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNull(sapatilhas1.getEstado());
      assertEquals("", sapatilhas1.getTipo());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("!#5f8x4ODRR}x", encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertEquals((-1605.75228), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals((-1605.75228), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      hashMap0.putAll(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertNotSame(hashMap1, hashMap0);
      assertNotSame(hashMap0, hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      double double1 = encomenda1.getPrecoFinal();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertEquals(double1, double0, 0.01);
      assertFalse(localDate0.equals((Object)localDate1));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertEquals((-1605.75228), double1, 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNull(sapatilhas1.getEstado());
      assertEquals("", sapatilhas1.getTipo());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("!#5f8x4ODRR}x", encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertEquals((-1605.75228), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals((-1605.75228), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      
      int int0 = encomenda1.getId();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertFalse(localDate0.equals((Object)localDate1));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(2, int0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getCor());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertFalse(sapatilhas0.getAtilhos());
      assertNull(sapatilhas1.getEstado());
      assertEquals("", sapatilhas1.getTipo());
      assertFalse(sapatilhas1.getAtilhos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("!#5f8x4ODRR}x", encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertEquals((-1605.75228), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals((-1605.75228), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      
      int int1 = encomenda0.getTamanho();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(int1 == int0);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(0, int1);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      
      encomenda0.setDono("!#5f8x4ODRR}x");
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("!#5f8x4ODRR}x", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.FINALIZADA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setDono("FINALIZADA");
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("FINALIZADA", encomenda0.getDono());
      
      encomenda0.setTamanho(2408);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(2408, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("FINALIZADA", encomenda0.getDono());
      
      Encomenda encomenda1 = encomenda0.clone();
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(2408, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("FINALIZADA", encomenda0.getDono());
      assertEquals(2408, encomenda1.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(encomenda1);
      
      // Undeclared exception!
      try { 
        encomenda0.setArtigos((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNotNull(encomenda1);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      encomenda1.setPrazoLimite(localDate0);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      
      encomenda1.setId((-1));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals((-1), encomenda1.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertNull(encomenda1.getDono());
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = hashMap0.put(integer0, "V7AR");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      encomenda0.setVendedores(hashMap0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.GRANDE;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      
      String string0 = encomenda0.toString();
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: GRANDE\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: EXPEDIDA\n", string0);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertNotNull(string0);
      
      double double0 = encomenda0.getPrecoFinal();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      
      LocalDate localDate0 = encomenda0.getPrazoLimite();
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = encomenda0.getDataCriacao();
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate1, localDate0);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertNotNull(localDate1);
      
      encomenda0.setDono("PEQUENO");
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals("PEQUENO", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = encomenda0.toString();
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(string0);
      
      Sapatilhas sapatilhas0 = new Sapatilhas();
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getTipo());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertNotNull(sapatilhas0);
      
      LocalDate localDate0 = sapatilhas0.getDataLancamento();
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getTipo());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertNotNull(localDate0);
      
      Encomenda encomenda1 = new Encomenda("zw", list0, 683.12, localDate0, (Map<Integer, String>) null);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getTipo());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals(683.12, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("zw", encomenda1.getDono());
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(683.12, encomenda1.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda1);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.PENDENTE;
      encomenda1.setEstado(encomenda_Estado_Encomenda0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getTipo());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(683.12, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("zw", encomenda1.getDono());
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(683.12, encomenda1.getCustosExpedicao(), 0.01);
      
      Encomenda encomenda2 = encomenda1.clone();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getTipo());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(683.12, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("zw", encomenda1.getDono());
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(683.12, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(683.12, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(683.12, encomenda2.getCustosExpedicao(), 0.01);
      assertNull(encomenda2.getEmbalagem());
      assertNull(encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(2, encomenda2.getId());
      assertNotNull(encomenda2);
      
      encomenda0.setId(0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      
      Encomenda encomenda3 = encomenda2.clone();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertTrue(encomenda3.equals((Object)encomenda2));
      assertTrue(encomenda3.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda3, encomenda2);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getTipo());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(683.12, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("zw", encomenda1.getDono());
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(683.12, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(683.12, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(683.12, encomenda2.getCustosExpedicao(), 0.01);
      assertNull(encomenda2.getEmbalagem());
      assertNull(encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(2, encomenda2.getId());
      assertEquals(2, encomenda3.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda3.getEstado());
      assertEquals(683.12, encomenda3.getPrecoFinal(), 0.01);
      assertEquals(683.12, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda3.getTamanho());
      assertNull(encomenda3.getEmbalagem());
      assertNull(encomenda3.getDono());
      assertNotNull(encomenda3);
      
      int int0 = 0;
      encomenda2.setPrazoLimite(localDate0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getTipo());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(683.12, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("zw", encomenda1.getDono());
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(683.12, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(683.12, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(683.12, encomenda2.getCustosExpedicao(), 0.01);
      assertNull(encomenda2.getEmbalagem());
      assertNull(encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(2, encomenda2.getId());
      
      encomenda3.setTamanho(0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda0));
      assertTrue(encomenda3.equals((Object)encomenda2));
      assertTrue(encomenda3.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda3, encomenda2);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getTipo());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(683.12, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("zw", encomenda1.getDono());
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(683.12, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(683.12, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(683.12, encomenda2.getCustosExpedicao(), 0.01);
      assertNull(encomenda2.getEmbalagem());
      assertNull(encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(2, encomenda2.getId());
      assertEquals(2, encomenda3.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda3.getEstado());
      assertEquals(683.12, encomenda3.getPrecoFinal(), 0.01);
      assertEquals(683.12, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda3.getTamanho());
      assertNull(encomenda3.getEmbalagem());
      assertNull(encomenda3.getDono());
      
      // Undeclared exception!
      try { 
        encomenda3.setVendedores((Map<Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda.Estado_Encomenda[] encomenda_Estado_EncomendaArray0 = Encomenda.Estado_Encomenda.values();
      assertEquals(4, encomenda_Estado_EncomendaArray0.length);
      assertNotNull(encomenda_Estado_EncomendaArray0);
      
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.PEQUENO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      
      encomenda0.setCustosExpedicao((-1419.65884));
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals((-1419.65884), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem1 = encomenda0.getEmbalagem();
      assertSame(encomenda_Dimensao_Embalagem1, encomenda_Dimensao_Embalagem0);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda_Dimensao_Embalagem1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals((-1419.65884), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(1, encomenda1.getId());
      assertNotNull(encomenda1);
      
      String string0 = encomenda1.getDono();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(1, encomenda1.getId());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      // Undeclared exception!
      try { 
        encomenda0.setVendedores((Map<Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setTamanho(491);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(491, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(491, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(491, encomenda1.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(encomenda1);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(491);
      assertNotNull(localDate0);
      
      Sapatilhas.Tipos_Sapatilhas sapatilhas_Tipos_Sapatilhas0 = Sapatilhas.Tipos_Sapatilhas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      Sapatilhas sapatilhas0 = new Sapatilhas(491, true, "Dimens\u00E3o da embalagem: ", localDate0, sapatilhas_Tipos_Sapatilhas0, "Model.Artigo$Estado", artigo_Estado0, 491, artigo_Avaliação0, "Model.Artigo$Estado", "Dimens\u00E3o da embalagem: ", (String) null, (-1760.3658455523), (-912.9577551223), "Dimens\u00E3o da embalagem: ");
      assertEquals(Sapatilhas.Tipos_Sapatilhas.NORMAL, sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getCodigo());
      assertEquals("Model.Artigo$Estado", sapatilhas0.getTipo());
      assertTrue(sapatilhas0.getAtilhos());
      assertEquals(491, sapatilhas0.getTamanhoNumerico());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas0.getTransportadora());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas0.getMarca());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals((-1760.3658455523), sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas0.getCor());
      assertEquals(Artigo.Estado.NOVO, sapatilhas0.getEstado());
      assertEquals(1, sapatilhas0.getId());
      assertEquals((-912.9577551223), sapatilhas0.getCorrecaoPreco(), 0.01);
      assertEquals("Model.Artigo$Estado", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertNotNull(sapatilhas0);
      
      Sapatilhas sapatilhas1 = sapatilhas0.clone();
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertEquals(Sapatilhas.Tipos_Sapatilhas.NORMAL, sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getCodigo());
      assertEquals("Model.Artigo$Estado", sapatilhas0.getTipo());
      assertTrue(sapatilhas0.getAtilhos());
      assertEquals(491, sapatilhas0.getTamanhoNumerico());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas0.getTransportadora());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas0.getMarca());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals((-1760.3658455523), sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas0.getCor());
      assertEquals(Artigo.Estado.NOVO, sapatilhas0.getEstado());
      assertEquals(1, sapatilhas0.getId());
      assertEquals((-912.9577551223), sapatilhas0.getCorrecaoPreco(), 0.01);
      assertEquals("Model.Artigo$Estado", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals((-1760.3658455523), sapatilhas1.getPrecoBase(), 0.01);
      assertTrue(sapatilhas1.getAtilhos());
      assertEquals(Sapatilhas.Tipos_Sapatilhas.NORMAL, sapatilhas1.getTiposSapatilhas());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas1.getTransportadora());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals("Model.Artigo$Estado", sapatilhas1.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas1.getCor());
      assertEquals(Artigo.Estado.NOVO, sapatilhas1.getEstado());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas1.getMarca());
      assertEquals((-912.9577551223), sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("Model.Artigo$Estado", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(491, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getCodigo());
      assertNotNull(sapatilhas1);
      
      boolean boolean0 = encomenda1.equals(sapatilhas1);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertFalse(boolean0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(491, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(491, encomenda1.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Sapatilhas.Tipos_Sapatilhas.NORMAL, sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getCodigo());
      assertEquals("Model.Artigo$Estado", sapatilhas0.getTipo());
      assertTrue(sapatilhas0.getAtilhos());
      assertEquals(491, sapatilhas0.getTamanhoNumerico());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas0.getTransportadora());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas0.getMarca());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals((-1760.3658455523), sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas0.getCor());
      assertEquals(Artigo.Estado.NOVO, sapatilhas0.getEstado());
      assertEquals(1, sapatilhas0.getId());
      assertEquals((-912.9577551223), sapatilhas0.getCorrecaoPreco(), 0.01);
      assertEquals("Model.Artigo$Estado", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals((-1760.3658455523), sapatilhas1.getPrecoBase(), 0.01);
      assertTrue(sapatilhas1.getAtilhos());
      assertEquals(Sapatilhas.Tipos_Sapatilhas.NORMAL, sapatilhas1.getTiposSapatilhas());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas1.getTransportadora());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals("Model.Artigo$Estado", sapatilhas1.getTipo());
      assertEquals(1, sapatilhas1.getId());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas1.getCor());
      assertEquals(Artigo.Estado.NOVO, sapatilhas1.getEstado());
      assertEquals("Dimens\u00E3o da embalagem: ", sapatilhas1.getMarca());
      assertEquals((-912.9577551223), sapatilhas1.getCorrecaoPreco(), 0.01);
      assertEquals("Model.Artigo$Estado", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(491, sapatilhas1.getTamanhoNumerico());
      assertNull(sapatilhas1.getCodigo());
      
      boolean boolean1 = encomenda1.equals((Object) null);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean1);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(491, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(491, encomenda1.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      encomenda0.setArtigos(list0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Encomenda encomenda1 = encomenda0.clone();
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(encomenda1);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.MEDIO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      encomenda1.setDono("========== Fim Artigos ==========\n");
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals("========== Fim Artigos ==========\n", encomenda1.getDono());
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = encomenda1.getEstado();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda_Estado_Encomenda0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals("========== Fim Artigos ==========\n", encomenda1.getDono());
      
      LocalDate localDate0 = encomenda0.getPrazoLimite();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertNotNull(localDate0);
      
      String string0 = encomenda1.getDono();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals("========== Fim Artigos ==========\n", string0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals("========== Fim Artigos ==========\n", encomenda1.getDono());
      assertNotNull(string0);
      
      Encomenda encomenda2 = encomenda0.clone();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertNotNull(encomenda2);
      
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals("========== Fim Artigos ==========\n", encomenda1.getDono());
      
      Encomenda.Estado_Encomenda[] encomenda_Estado_EncomendaArray0 = Encomenda.Estado_Encomenda.values();
      assertEquals(4, encomenda_Estado_EncomendaArray0.length);
      assertNotNull(encomenda_Estado_EncomendaArray0);
      
      encomenda2.setArtigos(list0);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      
      List<Artigo> list1 = encomenda1.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list1, list0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals("========== Fim Artigos ==========\n", encomenda1.getDono());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<Artigo> list2 = encomenda2.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Set<Map.Entry<Integer, String>> set0 = (Set<Map.Entry<Integer, String>>)hashMap0.entrySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      encomenda0.setVendedores(hashMap0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = encomenda0.toString();
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNotNull(string0);
      
      String string1 = encomenda0.getDono();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNotNull(string1);
      
      Encomenda.Estado_Encomenda[] encomenda_Estado_EncomendaArray0 = Encomenda.Estado_Encomenda.values();
      assertEquals(4, encomenda_Estado_EncomendaArray0.length);
      assertNotNull(encomenda_Estado_EncomendaArray0);
      
      LocalDate localDate0 = encomenda0.getPrazoLimite();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        Encomenda.Dimensao_Embalagem.valueOf("9o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Encomenda.Dimensao_Embalagem.9o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      String string0 = encomenda0.getDono();
      assertEquals("", string0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda1);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = encomenda1.getEstado();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda_Estado_Encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda1 = Encomenda.Estado_Encomenda.PENDENTE;
      encomenda1.setEstado(encomenda_Estado_Encomenda1);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertSame(encomenda_Estado_Encomenda1, encomenda_Estado_Encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      
      List<Artigo> list0 = encomenda1.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Encomenda encomenda2 = encomenda1.clone();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda2);
      
      encomenda2.setTamanho(45);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda1.equals((Object)encomenda2));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(45, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      Encomenda.Estado_Encomenda[] encomenda_Estado_EncomendaArray0 = Encomenda.Estado_Encomenda.values();
      assertEquals(4, encomenda_Estado_EncomendaArray0.length);
      assertNotNull(encomenda_Estado_EncomendaArray0);
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      encomenda1.setPrecoFinal(999.2);
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(999.2, encomenda1.getPrecoFinal(), 0.01);
      
      // Undeclared exception!
      try { 
        encomenda1.setArtigos((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.GRANDE;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.DEVOLVIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      
      Sapatilhas sapatilhas0 = new Sapatilhas();
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getTipo());
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertNotNull(sapatilhas0);
      
      sapatilhas0.setAtilhos(true);
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getCor());
      assertTrue(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
      
      boolean boolean0 = encomenda0.equals(sapatilhas0);
      assertFalse(boolean0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertEquals("", sapatilhas0.getCodigo());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas0.getTipo());
      assertEquals("", sapatilhas0.getMarca());
      assertEquals("", sapatilhas0.getCor());
      assertTrue(sapatilhas0.getAtilhos());
      assertEquals(1, sapatilhas0.getId());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      boolean boolean0 = encomenda0.equals(localDate0);
      assertFalse(boolean0);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      
      Encomenda encomenda1 = encomenda0.clone();
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(1, encomenda1.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertNotNull(encomenda1);
      
      List<Artigo> list0 = encomenda1.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(1, encomenda1.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Encomenda encomenda2 = encomenda0.clone();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda2.getTamanho());
      assertNull(encomenda2.getDono());
      assertEquals(1, encomenda2.getId());
      assertNotNull(encomenda2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(encomenda1);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.DEVOLVIDA;
      encomenda1.setEstado(encomenda_Estado_Encomenda0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.DEVOLVIDA, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      
      // Undeclared exception!
      try { 
        encomenda1.getVendedores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Artigo> list1 = encomenda0.getArtigos();
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      LocalDate localDate0 = null;
      Encomenda encomenda1 = null;
      try {
        encomenda1 = new Encomenda("LbX??F~=;b", list1, (-1328.7167342857279), (LocalDate) null, (Map<Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda.Dimensao_Embalagem[] encomenda_Dimensao_EmbalagemArray0 = Encomenda.Dimensao_Embalagem.values();
      assertEquals(3, encomenda_Dimensao_EmbalagemArray0.length);
      assertNotNull(encomenda_Dimensao_EmbalagemArray0);
      
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertNotNull(encomenda1);
      
      double double0 = encomenda1.getCustosExpedicao();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      int int0 = encomenda0.getTamanho();
      assertEquals(0, int0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      
      int int1 = encomenda0.getId();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      
      Period period0 = Period.ofWeeks(2432);
      assertNotNull(period0);
      
      Period period1 = period0.plusYears(0L);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      IsoChronology isoChronology0 = period1.getChronology();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(localDate0);
      
      encomenda0.setPrazoLimite(localDate0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      encomenda0.setArtigos(list0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      encomenda0.getEmbalagem();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda1);
      
      String string0 = encomenda1.toString();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertNotNull(encomenda1);
      
      encomenda1.setCustosExpedicao((-547.3164579905));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals((-547.3164579905), encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      encomenda0.setVendedores(map0);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      assertNotNull(localDate0);
      
      encomenda0.setDataCriacao(localDate0);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.PENDENTE;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      encomenda0.setPrecoFinal((-916.026024708));
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals((-916.026024708), encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.PEQUENO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals((-916.026024708), encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      encomenda0.setTamanho((-2059));
      assertNull(encomenda0.getEmbalagem());
      assertEquals((-2059), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertNull(encomenda0.getEmbalagem());
      assertEquals((-2059), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda.Dimensao_Embalagem[] encomenda_Dimensao_EmbalagemArray0 = Encomenda.Dimensao_Embalagem.values();
      assertEquals(3, encomenda_Dimensao_EmbalagemArray0.length);
      assertNotNull(encomenda_Dimensao_EmbalagemArray0);
      
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      LocalDate localDate0 = encomenda0.getDataCriacao();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(localDate0);
      
      encomenda0.setDono("");
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      
      encomenda0.setPrecoFinal(3263.8345);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(3263.8345, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Sapatilhas sapatilhas0 = new Sapatilhas();
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertNotNull(sapatilhas0);
      
      Sapatilhas sapatilhas1 = sapatilhas0.clone();
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas1.getTipo());
      assertNull(sapatilhas1.getEstado());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertFalse(sapatilhas1.getAtilhos());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals(1, sapatilhas1.getId());
      assertNotNull(sapatilhas1);
      
      LocalDate localDate0 = sapatilhas1.getDataLancamento();
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas1.getTipo());
      assertNull(sapatilhas1.getEstado());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertFalse(sapatilhas1.getAtilhos());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals(1, sapatilhas1.getId());
      assertNotNull(localDate0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Encomenda encomenda1 = new Encomenda((String) null, list0, 1151.045442012, localDate0, hashMap0);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas1.getTipo());
      assertNull(sapatilhas1.getEstado());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertFalse(sapatilhas1.getAtilhos());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals(1, sapatilhas1.getId());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals(1151.045442012, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1151.045442012, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(encomenda1);
      
      encomenda1.setId(3);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(sapatilhas0, sapatilhas1);
      assertNotSame(sapatilhas1, sapatilhas0);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sapatilhas0.getNumeroDonos());
      assertNull(sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getCodigo());
      assertNull(sapatilhas0.getTiposSapatilhas());
      assertEquals("", sapatilhas0.getDescricao());
      assertNull(sapatilhas0.getAvaliacao());
      assertEquals("", sapatilhas0.getCor());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("", sapatilhas0.getMarca());
      assertEquals(0, sapatilhas0.getTamanhoNumerico());
      assertEquals("", sapatilhas0.getTipo());
      assertEquals(0.0, sapatilhas0.getPrecoBase(), 0.01);
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals(0.0, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertNull(sapatilhas0.getEstado());
      assertEquals(0, sapatilhas1.getTamanhoNumerico());
      assertEquals("", sapatilhas1.getDescricao());
      assertNull(sapatilhas1.getAvaliacao());
      assertEquals(0, sapatilhas1.getNumeroDonos());
      assertEquals(0.0, sapatilhas1.getPrecoBase(), 0.01);
      assertEquals("", sapatilhas1.getTipo());
      assertNull(sapatilhas1.getEstado());
      assertEquals(0.0, sapatilhas1.getCorrecaoPreco(), 0.01);
      assertFalse(sapatilhas1.getAtilhos());
      assertNull(sapatilhas1.getTiposSapatilhas());
      assertEquals("", sapatilhas1.getCodigo());
      assertEquals("", sapatilhas1.getMarca());
      assertEquals("", sapatilhas1.getCor());
      assertNull(sapatilhas1.getTransportadora());
      assertEquals(1, sapatilhas1.getId());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals(1151.045442012, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1151.045442012, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(3, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertNotNull(encomenda1);
      
      List<Artigo> list0 = encomenda1.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = encomenda1.equals("");
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      
      List<Artigo> list1 = encomenda0.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(list1, list0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      boolean boolean1 = encomenda1.equals(list1);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertTrue(list1.equals((Object)list0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list1, list0);
      assertFalse(boolean1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      encomenda1.setPrecoFinal((-2742.4));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals((-2742.4), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      
      encomenda1.setArtigos(list0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals((-2742.4), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      boolean boolean2 = encomenda0.equals("");
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(encomenda0, encomenda1);
      assertFalse(boolean2);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      boolean boolean3 = encomenda0.equals(encomenda1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean3);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals((-2742.4), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      
      Encomenda.Estado_Encomenda[] encomenda_Estado_EncomendaArray0 = Encomenda.Estado_Encomenda.values();
      assertEquals(4, encomenda_Estado_EncomendaArray0.length);
      assertNotNull(encomenda_Estado_EncomendaArray0);
      
      List<Artigo> list2 = encomenda0.getArtigos();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      String string0 = encomenda0.toString();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(string0);
      
      String string1 = "mHDz ~3;";
      // Undeclared exception!
      try { 
        Encomenda.Estado_Encomenda.valueOf("mHDz ~3;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Encomenda.Estado_Encomenda.mHDz ~3;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNotNull(encomenda1);
      
      encomenda1.setCustosExpedicao((-2742.4));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(1, encomenda1.getId());
      assertEquals((-2742.4), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      
      List<Artigo> list0 = encomenda1.getArtigos();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(1, encomenda1.getId());
      assertEquals((-2742.4), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "";
      boolean boolean0 = encomenda1.equals("");
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(1, encomenda1.getId());
      assertEquals((-2742.4), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      
      List<Artigo> list1 = encomenda1.getArtigos();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list1, list0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(1, encomenda1.getId());
      assertEquals((-2742.4), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      boolean boolean1 = encomenda1.equals(list1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list1.equals((Object)list0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list1, list0);
      assertFalse(boolean1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(1, encomenda1.getId());
      assertEquals((-2742.4), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      LocalDate localDate0 = encomenda1.getPrazoLimite();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(1, encomenda1.getId());
      assertEquals((-2742.4), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNotNull(localDate0);
      
      encomenda1.setArtigos(list0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(list0.equals((Object)list1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(list0, list1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(1, encomenda1.getId());
      assertEquals((-2742.4), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      boolean boolean2 = encomenda0.equals("");
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(encomenda0, encomenda1);
      assertFalse(boolean2);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      boolean boolean3 = encomenda0.equals(encomenda1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean3);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(1, encomenda1.getId());
      assertEquals((-2742.4), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      
      Encomenda.Estado_Encomenda[] encomenda_Estado_EncomendaArray0 = Encomenda.Estado_Encomenda.values();
      assertEquals(4, encomenda_Estado_EncomendaArray0.length);
      assertNotNull(encomenda_Estado_EncomendaArray0);
      
      List<Artigo> list2 = encomenda0.getArtigos();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      String string1 = encomenda0.toString();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(encomenda0, encomenda1);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Encomenda.Estado_Encomenda.valueOf("mHDz ~3;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Encomenda.Estado_Encomenda.mHDz ~3;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(1, encomenda1.getId());
      assertNotNull(encomenda1);
      
      String string0 = encomenda0.toString();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(string0);
      
      encomenda1.setPrecoFinal(0.0);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(1, encomenda1.getId());
      
      encomenda0.setPrazoLimite((LocalDate) null);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      
      List<Artigo> list0 = encomenda1.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(1, encomenda1.getId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      encomenda0.setTamanho(5);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(5, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      
      boolean boolean0 = encomenda0.equals((Object) null);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertFalse(boolean0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(5, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        Encomenda.Dimensao_Embalagem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Encomenda.Dimensao_Embalagem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda1 = Encomenda.Estado_Encomenda.PENDENTE;
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      encomenda0.setEstado(encomenda_Estado_Encomenda1);
      assertFalse(encomenda_Estado_Encomenda1.equals((Object)encomenda_Estado_Encomenda0));
      assertNotSame(encomenda_Estado_Encomenda1, encomenda_Estado_Encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      boolean boolean0 = encomenda0.equals(encomenda0);
      assertTrue(boolean0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setPrecoFinal(1320.02414247);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.GRANDE;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      int int0 = encomenda0.getTamanho();
      assertEquals(0, int0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setId(0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      String string0 = encomenda0.getDono();
      assertEquals("", string0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(string0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = Integer.compare(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Integer integer1 = Integer.getInteger((String) null, 2753);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(2753, (int)integer1);
      assertNotNull(integer1);
      
      encomenda0.setVendedores(hashMap0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      double double0 = encomenda0.getPrecoFinal();
      assertEquals(1320.02414247, double0, 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      encomenda0.setDataCriacao((LocalDate) null);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      int int2 = encomenda0.getTamanho();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      List<Artigo> list1 = encomenda0.getArtigos();
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNotNull(encomenda0);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda1);
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda1 = Encomenda.Estado_Encomenda.PENDENTE;
      List<Artigo> list0 = encomenda0.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      encomenda1.setEstado(encomenda_Estado_Encomenda1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda_Estado_Encomenda1.equals((Object)encomenda_Estado_Encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda_Estado_Encomenda1, encomenda_Estado_Encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      
      encomenda0.setPrecoFinal(1320.02414247);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(1, encomenda0.getId());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.GRANDE;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      
      int int0 = encomenda0.getTamanho();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(0, int0);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      
      encomenda0.setId(0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      
      String string0 = encomenda0.getDono();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals("", string0);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNotNull(string0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = Integer.compare(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Integer integer1 = Integer.getInteger((String) null, 2753);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(2753, (int)integer1);
      assertNotNull(integer1);
      
      String string1 = hashMap0.put(integer0, "");
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      encomenda0.setVendedores(hashMap0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      double double0 = encomenda1.getPrecoFinal();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      
      int int2 = encomenda1.getTamanho();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0, int2);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getId());
      assertEquals(1320.02414247, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Period period0 = Period.ofWeeks(0);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 4);
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Encomenda encomenda1 = new Encomenda("+2h?{9P,tx?HnyI.aE", list0, 881.7952423394, localDate0, map0);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(881.7952423394, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(881.7952423394, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("+2h?{9P,tx?HnyI.aE", encomenda1.getDono());
      assertEquals(2, encomenda1.getId());
      assertNotNull(encomenda1);
      
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(881.7952423394, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(881.7952423394, encomenda1.getPrecoFinal(), 0.01);
      assertEquals("+2h?{9P,tx?HnyI.aE", encomenda1.getDono());
      assertEquals(2, encomenda1.getId());
      
      Map<Integer, String> map1 = encomenda0.getVendedores();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(map1, map0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      
      encomenda0.setPrecoFinal((-1.0));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertEquals((-1.0), encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNotNull(encomenda1);
      
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertTrue(boolean0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      
      Encomenda.Dimensao_Embalagem[] encomenda_Dimensao_EmbalagemArray0 = Encomenda.Dimensao_Embalagem.values();
      assertEquals(3, encomenda_Dimensao_EmbalagemArray0.length);
      assertNotNull(encomenda_Dimensao_EmbalagemArray0);
      
      Encomenda.Estado_Encomenda[] encomenda_Estado_EncomendaArray0 = Encomenda.Estado_Encomenda.values();
      assertEquals(4, encomenda_Estado_EncomendaArray0.length);
      assertNotNull(encomenda_Estado_EncomendaArray0);
      
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes(0, (-2627));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset minutes not in valid range: value -2627 is not in the range -59 to 59
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      // Undeclared exception!
      try { 
        Encomenda.Estado_Encomenda.valueOf(" BM!?Un>m:L`QOTq6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Encomenda.Estado_Encomenda. BM!?Un>m:L`QOTq6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNotNull(encomenda1);
      
      Encomenda encomenda2 = encomenda1.clone();
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda2);
      
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      encomenda1.setCustosExpedicao((-1263.66F));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      
      boolean boolean0 = encomenda2.equals(encomenda0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertTrue(boolean0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      hashMap0.putAll(hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      encomenda2.setVendedores(hashMap0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(hashMap0, hashMap1);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Encomenda encomenda3 = encomenda0.clone();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda3.equals((Object)encomenda2));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertTrue(encomenda3.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda3.getId());
      assertNull(encomenda3.getDono());
      assertEquals(0.0, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda3.getTamanho());
      assertEquals(0.0, encomenda3.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda3.getEstado());
      assertNull(encomenda3.getEmbalagem());
      assertNotNull(encomenda3);
      
      String string0 = encomenda1.toString();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: -1263.6600341796875\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNotNull(string0);
      
      int int0 = encomenda2.getTamanho();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0, int0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      List<Artigo> list0 = encomenda1.getArtigos();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda3);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Encomenda encomenda4 = encomenda3.clone();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda3.equals((Object)encomenda2));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertTrue(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda4.equals((Object)encomenda1));
      assertTrue(encomenda4.equals((Object)encomenda0));
      assertTrue(encomenda4.equals((Object)encomenda2));
      assertTrue(encomenda4.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda4);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda4);
      assertNotSame(encomenda3, encomenda2);
      assertNotSame(encomenda4, encomenda0);
      assertNotSame(encomenda4, encomenda1);
      assertNotSame(encomenda4, encomenda3);
      assertNotSame(encomenda4, encomenda2);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda3.getId());
      assertNull(encomenda3.getDono());
      assertEquals(0.0, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda3.getTamanho());
      assertEquals(0.0, encomenda3.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda3.getEstado());
      assertNull(encomenda3.getEmbalagem());
      assertNull(encomenda4.getEmbalagem());
      assertEquals(0.0, encomenda4.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda4.getEstado());
      assertEquals(1, encomenda4.getId());
      assertEquals(0.0, encomenda4.getPrecoFinal(), 0.01);
      assertNull(encomenda4.getDono());
      assertEquals(0, encomenda4.getTamanho());
      assertNotNull(encomenda4);
      
      String string1 = encomenda4.toString();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda4));
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda3.equals((Object)encomenda2));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertTrue(encomenda3.equals((Object)encomenda4));
      assertTrue(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda4.equals((Object)encomenda1));
      assertTrue(encomenda4.equals((Object)encomenda0));
      assertTrue(encomenda4.equals((Object)encomenda2));
      assertTrue(encomenda4.equals((Object)encomenda3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda4);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda4);
      assertNotSame(encomenda3, encomenda2);
      assertNotSame(encomenda4, encomenda0);
      assertNotSame(encomenda4, encomenda1);
      assertNotSame(encomenda4, encomenda3);
      assertNotSame(encomenda4, encomenda2);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string1);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda3.getId());
      assertNull(encomenda3.getDono());
      assertEquals(0.0, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda3.getTamanho());
      assertEquals(0.0, encomenda3.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda3.getEstado());
      assertNull(encomenda3.getEmbalagem());
      assertNull(encomenda4.getEmbalagem());
      assertEquals(0.0, encomenda4.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda4.getEstado());
      assertEquals(1, encomenda4.getId());
      assertEquals(0.0, encomenda4.getPrecoFinal(), 0.01);
      assertNull(encomenda4.getDono());
      assertEquals(0, encomenda4.getTamanho());
      assertNotNull(string1);
      
      boolean boolean1 = encomenda2.equals(artigo_Estado0);
      assertFalse(boolean1 == boolean0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda4));
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda4));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda4));
      assertTrue(encomenda2.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda4);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda4);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda4);
      assertNotSame(encomenda2, encomenda0);
      assertFalse(boolean1);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      encomenda2.setDono("");
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda0.equals((Object)encomenda4));
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda4));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(encomenda2.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda4));
      assertTrue(encomenda2.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda4);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda4);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda4);
      assertNotSame(encomenda2, encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertNull(encomenda2.getEmbalagem());
      assertEquals(1, encomenda2.getId());
      assertEquals("", encomenda2.getDono());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      // Undeclared exception!
      try { 
        MockLocalTime.ofNanoOfDay((-1220L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1220
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(encomenda1);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.MEDIO;
      encomenda1.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      
      Encomenda encomenda2 = encomenda1.clone();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda2);
      
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-1263.66F), "", (-2027), "", artigo_Estado0, (-1504), artigo_Avaliação0, "", "", "ID da Encomenda: ", (-3190.61031), (-1504), "[{R");
      assertEquals("", malas0.getTipo());
      assertEquals(Artigo.Estado.NOVO, malas0.getEstado());
      assertEquals(1, malas0.getId());
      assertEquals("", malas0.getMarca());
      assertEquals("ID da Encomenda: ", malas0.getCodigo());
      assertNull(malas0.getAvaliacao());
      assertEquals("", malas0.getDescricao());
      assertEquals("", malas0.getMaterial());
      assertEquals("[{R", malas0.getTransportadora());
      assertEquals((-1504.0), malas0.getCorrecaoPreco(), 0.01);
      assertEquals(Malas.Tipos_Malas.NORMAL, malas0.getTipo_mala());
      assertEquals((-1263.66F), malas0.getDim(), 0.01F);
      assertEquals(0, malas0.getNumeroDonos());
      assertEquals((-3190.61031), malas0.getPrecoBase(), 0.01);
      assertEquals((-2027), malas0.getAno_da_colecao());
      assertNotNull(malas0);
      
      malas0.setEstado(artigo_Estado0);
      assertEquals("", malas0.getTipo());
      assertEquals(Artigo.Estado.NOVO, malas0.getEstado());
      assertEquals(1, malas0.getId());
      assertEquals("", malas0.getMarca());
      assertEquals("ID da Encomenda: ", malas0.getCodigo());
      assertNull(malas0.getAvaliacao());
      assertEquals("", malas0.getDescricao());
      assertEquals("", malas0.getMaterial());
      assertEquals("[{R", malas0.getTransportadora());
      assertEquals((-1504.0), malas0.getCorrecaoPreco(), 0.01);
      assertEquals(Malas.Tipos_Malas.NORMAL, malas0.getTipo_mala());
      assertEquals((-1263.66F), malas0.getDim(), 0.01F);
      assertEquals(0, malas0.getNumeroDonos());
      assertEquals((-3190.61031), malas0.getPrecoBase(), 0.01);
      assertEquals((-2027), malas0.getAno_da_colecao());
      
      boolean boolean0 = encomenda0.equals(malas0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals("", malas0.getTipo());
      assertEquals(Artigo.Estado.NOVO, malas0.getEstado());
      assertEquals(1, malas0.getId());
      assertEquals("", malas0.getMarca());
      assertEquals("ID da Encomenda: ", malas0.getCodigo());
      assertNull(malas0.getAvaliacao());
      assertEquals("", malas0.getDescricao());
      assertEquals("", malas0.getMaterial());
      assertEquals("[{R", malas0.getTransportadora());
      assertEquals((-1504.0), malas0.getCorrecaoPreco(), 0.01);
      assertEquals(Malas.Tipos_Malas.NORMAL, malas0.getTipo_mala());
      assertEquals((-1263.66F), malas0.getDim(), 0.01F);
      assertEquals(0, malas0.getNumeroDonos());
      assertEquals((-3190.61031), malas0.getPrecoBase(), 0.01);
      assertEquals((-2027), malas0.getAno_da_colecao());
      
      encomenda1.setCustosExpedicao((-1263.66F));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      
      boolean boolean1 = encomenda2.equals(encomenda0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertFalse(boolean1);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      hashMap0.putAll(hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      encomenda2.setVendedores(hashMap0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(hashMap0, hashMap1);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Encomenda encomenda3 = encomenda0.clone();
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertNotSame(encomenda3, encomenda0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda3.getEstado());
      assertEquals(0.0, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda3.getId());
      assertEquals(0.0, encomenda3.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda3.getTamanho());
      assertNull(encomenda3.getDono());
      assertNull(encomenda3.getEmbalagem());
      assertNotNull(encomenda3);
      
      String string0 = encomenda1.toString();
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: MEDIO\nCusto Expedi\u00E7\u00E3o: -1263.6600341796875\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      assertNotNull(string0);
      
      int int0 = encomenda2.getTamanho();
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda3);
      assertEquals(0, int0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(1, encomenda2.getId());
      assertNull(encomenda2.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      List<Artigo> list0 = encomenda1.getArtigos();
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      encomenda2.setDono("");
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda3);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(1, encomenda2.getId());
      assertEquals("", encomenda2.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      Encomenda encomenda4 = encomenda3.clone();
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertFalse(encomenda4.equals((Object)encomenda1));
      assertTrue(encomenda4.equals((Object)encomenda0));
      assertTrue(encomenda4.equals((Object)encomenda3));
      assertFalse(encomenda4.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda4);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertNotSame(encomenda3, encomenda4);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda4, encomenda3);
      assertNotSame(encomenda4, encomenda1);
      assertNotSame(encomenda4, encomenda2);
      assertNotSame(encomenda4, encomenda0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda3.getEstado());
      assertEquals(0.0, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda3.getId());
      assertEquals(0.0, encomenda3.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda3.getTamanho());
      assertNull(encomenda3.getDono());
      assertNull(encomenda3.getEmbalagem());
      assertEquals(0, encomenda4.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda4.getEstado());
      assertEquals(0.0, encomenda4.getPrecoFinal(), 0.01);
      assertNull(encomenda4.getEmbalagem());
      assertEquals(1, encomenda4.getId());
      assertNull(encomenda4.getDono());
      assertEquals(0.0, encomenda4.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda4);
      
      String string1 = encomenda4.toString();
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda4));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertTrue(encomenda3.equals((Object)encomenda4));
      assertTrue(encomenda3.equals((Object)encomenda0));
      assertFalse(encomenda3.equals((Object)encomenda1));
      assertFalse(encomenda3.equals((Object)encomenda2));
      assertFalse(encomenda4.equals((Object)encomenda1));
      assertTrue(encomenda4.equals((Object)encomenda0));
      assertTrue(encomenda4.equals((Object)encomenda3));
      assertFalse(encomenda4.equals((Object)encomenda2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(encomenda0, encomenda4);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda3, encomenda1);
      assertNotSame(encomenda3, encomenda2);
      assertNotSame(encomenda3, encomenda4);
      assertNotSame(encomenda3, encomenda0);
      assertNotSame(encomenda4, encomenda3);
      assertNotSame(encomenda4, encomenda1);
      assertNotSame(encomenda4, encomenda2);
      assertNotSame(encomenda4, encomenda0);
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string1);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda3.getEstado());
      assertEquals(0.0, encomenda3.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda3.getId());
      assertEquals(0.0, encomenda3.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda3.getTamanho());
      assertNull(encomenda3.getDono());
      assertNull(encomenda3.getEmbalagem());
      assertEquals(0, encomenda4.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda4.getEstado());
      assertEquals(0.0, encomenda4.getPrecoFinal(), 0.01);
      assertNull(encomenda4.getEmbalagem());
      assertEquals(1, encomenda4.getId());
      assertNull(encomenda4.getDono());
      assertEquals(0.0, encomenda4.getCustosExpedicao(), 0.01);
      assertNotNull(string1);
      
      boolean boolean2 = encomenda2.equals(artigo_Estado0);
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda4));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda4));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda4));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(encomenda0, encomenda4);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda4);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda4);
      assertFalse(boolean2);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(1, encomenda2.getId());
      assertEquals("", encomenda2.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      encomenda2.setDono("");
      assertTrue(encomenda0.equals((Object)encomenda3));
      assertTrue(encomenda0.equals((Object)encomenda4));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda3));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda4));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda3));
      assertFalse(encomenda2.equals((Object)encomenda4));
      assertNotSame(encomenda0, encomenda4);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda3);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda3);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda4);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda3);
      assertNotSame(encomenda2, encomenda4);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals((-1263.6600341796875), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda1.getEmbalagem());
      assertEquals(0, encomenda2.getTamanho());
      assertEquals(0.0, encomenda2.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda2.getEstado());
      assertEquals(1, encomenda2.getId());
      assertEquals("", encomenda2.getDono());
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda2.getEmbalagem());
      assertEquals(0.0, encomenda2.getCustosExpedicao(), 0.01);
      
      // Undeclared exception!
      try { 
        MockLocalTime.ofNanoOfDay((-1220L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1220
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<Artigo> list0 = encomenda1.getArtigos();
      Period period0 = Period.ofWeeks((-93));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      zoneOffset0.getId();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Encomenda encomenda2 = new Encomenda("S5/Aez_qMz-lI&qZ", list0, 1340.642937, localDate0, hashMap0);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      Sapatilhas sapatilhas1 = sapatilhas0.clone();
      boolean boolean0 = encomenda2.equals(sapatilhas1);
      assertFalse(boolean0);
      
      encomenda2.getVendedores();
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      String string0 = encomenda2.toString();
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 2\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 1340.642937\nPre\u00E7o final: 1340.642937\nEstado da encomenda: EXPEDIDA\n", string0);
      
      encomenda0.getEstado();
      encomenda2.getEmbalagem();
      encomenda2.setPrazoLimite((LocalDate) null);
      String string1 = encomenda0.toString();
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 2014-02-14\nPrazo Limite: 2014-02-16\n==========   Artigos   ==========\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: null\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.0\nEstado da encomenda: PENDENTE\n", string1);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertTrue(encomenda0.equals((Object)encomenda1));
  }
}
