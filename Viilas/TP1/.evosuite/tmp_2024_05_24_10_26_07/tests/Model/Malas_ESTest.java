/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 09:30:04 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Malas_ESTest extends Malas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 10.0F, "e;WRP5OX[MeW", (-294), "e;WRP5OX[MeW", artigo_Estado0, (-2753), artigo_Avaliacao0, "e;WRP5OX[MeW", "e;WRP5OX[MeW", "e;WRP5OX[MeW", (-2753), 0.0, "e;WRP5OX[MeW");
      malas0.setMarca("e;WRP5OX[MeW");
      Malas malas1 = new Malas(malas0);
      Malas.Tipos_Malas malas_Tipos_Malas1 = Malas.Tipos_Malas.NORMAL;
      malas0.setTipo_mala(malas_Tipos_Malas0);
      malas1.setCorrecaoPreco(10.0F);
      malas1.setTipo_mala(malas_Tipos_Malas1);
      malas1.setCorrecaoPreco(1137.53);
      malas0.setId((-294));
      malas1.setDim((-787.4F));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-294));
      malas0.toString(localDate0);
      malas0.getDim();
      malas0.precoFinal(localDate0);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 10.0F, "e;WRP5OX[MeW", (-294), "e;WRP5OX[MeW", artigo_Estado0, (-2747), artigo_Avaliacao0, "e;WRP5OX[MeW", "e;WRP5OX[MeW", "e;WRP5OX[MeW", (-2747), (-294), "e;WRP5OX[MeW");
      malas0.setMarca("e;WRP5OX[MeW");
      Malas malas1 = new Malas(malas0);
      Malas.Tipos_Malas malas_Tipos_Malas1 = Malas.Tipos_Malas.PREMIUM;
      malas0.setTipo_mala(malas_Tipos_Malas0);
      malas1.setCorrecaoPreco(10.0F);
      malas1.setTipo_mala(malas_Tipos_Malas1);
      malas0.setId((-294));
      malas1.setDim((-787.4F));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-294));
      malas0.toString(localDate0);
      malas0.getDim();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(0, (-294));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -294
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 1905.8F, "A?|", (-503), "YI'Hq!}/E2<4", artigo_Estado0, (-1), artigo_Avaliacao0, "A?|", "", "", 1905.8F, 1905.8F, (String) null);
      Malas malas1 = new Malas(malas0);
      Artigo.Avaliacao artigo_Avaliacao1 = Artigo.Avaliacao.BOM;
      malas1.setMaterial((String) null);
      Malas malas2 = new Malas(malas_Tipos_Malas0, 1905.8F, "", (-1968526676), (String) null, artigo_Estado0, (-503), artigo_Avaliacao1, "IkD?q{60D2O?", "&", "", (-1968526676), (-503), "");
      // Undeclared exception!
      try { 
        malas1.equals(malas2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Malas malas0 = new Malas();
      Malas malas1 = new Malas(malas0);
      Malas malas2 = malas1.clone();
      malas2.setTipo("Rb*j");
      malas1.setPrecoBase(7244.0);
      malas2.setCodigo("");
      malas1.getDim();
      malas1.getDim();
      Malas malas3 = malas0.clone();
      malas3.setMaterial("$VALUES");
      malas0.setAno_da_colecao((-1));
      malas0.equals(malas3);
      malas0.getTipo_mala();
      Malas.Tipos_Malas.values();
      Malas.Tipos_Malas.values();
      malas2.equals(malas0);
      malas0.clone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Malas.Tipos_Malas.values();
      Malas.Tipos_Malas.values();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-1153), "Dimens\u00F5es: ", 2, "Dimens\u00F5es: ", artigo_Estado0, 2145548786, artigo_Avaliacao0, "", (String) null, "9PrlAY", 2145548786, (-1153), "\n");
      Malas malas1 = new Malas(malas_Tipos_Malas0, 0.0F, "", 2272, "\n", artigo_Estado0, 2272, artigo_Avaliacao0, "", (String) null, (String) null, 0.0, (-131.858329), "Model.Malas$Tipos_Malas");
      malas0.equals(malas1);
      malas0.equals("Rb*j");
      LocalDate localDate0 = MockLocalDate.now();
      malas0.toString(localDate0);
      malas1.precoFinal(localDate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-1527.2965F), (String) null, 0, "do3C&~q3Z&", artigo_Estado0, 0, artigo_Avaliacao0, (String) null, "", "3Zz3Z1}pw", (-1527.2965F), 0.0, "f-Cq>H");
      Malas malas1 = new Malas(malas0);
      malas1.setId(0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(115L);
      malas1.precoFinal(localDate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Malas malas0 = new Malas();
      malas0.setDescricao("");
      Malas malas1 = new Malas(malas0);
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      malas1.setAvaliacao(artigo_Avaliacao0);
      malas0.setTipo("?{");
      malas0.setTransportadora("");
      Malas malas2 = malas1.clone();
      malas2.setDim(1199.0F);
      malas2.setCorrecaoPreco(2613.1);
      malas2.equals(malas0);
      LocalDate localDate0 = null;
      // Undeclared exception!
      try { 
        malas1.precoFinal((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Malas", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Malas malas0 = new Malas();
      Malas malas1 = new Malas(malas0);
      malas1.setTipo("Rb*j");
      malas1.setPrecoBase(7244.0);
      malas0.setCodigo("");
      malas1.getDim();
      malas1.getDim();
      Malas malas2 = malas0.clone();
      malas0.setAno_da_colecao((-1));
      malas0.equals(malas2);
      malas0.getTipo_mala();
      Malas.Tipos_Malas.values();
      Malas.Tipos_Malas.values();
      malas0.equals(malas0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Malas malas0 = new Malas();
      Malas malas1 = new Malas(malas0);
      Malas malas2 = malas1.clone();
      malas2.setTipo("Rb*j");
      malas2.setCodigo("");
      malas1.getDim();
      malas1.getDim();
      Malas malas3 = malas0.clone();
      malas0.setAno_da_colecao((-1));
      malas0.equals(malas3);
      malas0.getTipo_mala();
      Malas.Tipos_Malas.values();
      Malas.Tipos_Malas.values();
      malas2.equals(malas0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 2400.267F, "3'B{$E_EBEr", (-857), "{8&.(", artigo_Estado0, 12, artigo_Avaliacao0, "", "3?CS\u0002", "", 0.0, (-1.0), "k}aKrZw");
      Malas malas1 = malas0.clone();
      Period period0 = Period.ofYears(12);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      malas0.toString(localDate0);
      malas0.setNumeroDonos(12);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(12);
      malas1.toString(localDate1);
      malas1.toString(localDate1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      int int0 = 2076;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.BOM;
      String string0 = "BOM";
      Malas malas0 = new Malas(malas_Tipos_Malas0, 0.0F, ",g~d-1^!,@RU", 2076, "", artigo_Estado0, 2076, artigo_Avaliacao0, "BOM", "X;<A*}%.k=0F1 %/S", "l~kR-&WRcqIEim", 2076, 0.0F, "");
      malas0.setDescricao("4~6/B`(0");
      malas0.setTransportadora((String) null);
      Malas malas1 = new Malas(malas0);
      malas0.setTipo("Estado: ");
      LocalDate localDate0 = null;
      // Undeclared exception!
      try { 
        malas1.toString((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Malas", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Malas malas0 = new Malas();
      malas0.setCodigo((String) null);
      malas0.setMaterial((String) null);
      malas0.setId(0);
      Malas malas1 = new Malas(malas0);
      malas0.setPrecoBase(0);
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      malas1.setEstado(artigo_Estado0);
      malas1.equals((Object) null);
      malas0.getAno_da_colecao();
      malas0.getAno_da_colecao();
      Malas.Tipos_Malas.values();
      malas1.getTipo_mala();
      malas1.getMaterial();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Malas malas0 = new Malas();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      malas0.setTipo_mala(malas_Tipos_Malas0);
      malas0.setNumeroDonos(2488);
      malas0.setTipo("Tipo: ");
      Malas malas1 = malas0.clone();
      malas1.setTipo("+t=k,b\"Xhq<6z/GLDV");
      malas1.equals(malas0);
      LocalDate localDate0 = MockLocalDate.now();
      malas0.toString(localDate0);
      malas0.precoFinal(localDate0);
      Malas.Tipos_Malas.values();
      malas0.toString(localDate0);
      malas1.toString(localDate0);
      malas1.toString(localDate0);
      malas0.setDim(2488);
      malas1.getDim();
      malas1.getDim();
      Malas malas2 = malas0.clone();
      Malas.Tipos_Malas malas_Tipos_Malas1 = Malas.Tipos_Malas.NORMAL;
      malas2.setTipo_mala(malas_Tipos_Malas1);
      malas0.getMaterial();
      float float0 = 0.0F;
      malas1.setDim(0.0F);
      malas0.getMaterial();
      malas0.precoFinal(localDate0);
      malas0.getMaterial();
      malas0.getMaterial();
      malas2.getMaterial();
      malas2.getAno_da_colecao();
      // Undeclared exception!
      try { 
        Malas.Tipos_Malas.valueOf("Tipo: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Malas.Tipos_Malas.Tipo: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 136.0F, "5?k]e51y", 2, "5?k]e51y", artigo_Estado0, 0, artigo_Avaliacao0, "", "5?k]e51y", "", (-1.0), 1.0, "");
      malas0.setAvaliacao(artigo_Avaliacao0);
      malas0.setCorrecaoPreco((-4237.211243884));
      LocalDate localDate0 = MockLocalDate.of(2, 2, 2);
      malas0.toString(localDate0);
      malas0.setDim(1000.97F);
      malas0.getAno_da_colecao();
      malas0.setMaterial("");
      malas0.getDim();
      malas0.getMaterial();
      malas0.setAno_da_colecao(1661);
      malas0.setMaterial("");
      malas0.setMaterial("_orV{9E)-=<");
      malas0.clone();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 1042.723F, "v,he;/x", 1, "v,he;/x", artigo_Estado0, 1, artigo_Avaliacao0, "94O[@[DZ7M-e[", "v,he;/x", (String) null, 1042.723F, 1042.723F, (String) null);
      malas0.getAno_da_colecao();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 10.0F, "Model.Malas$Tipos_Malas", (-2528), "Model.Malas$Tipos_Malas", artigo_Estado0, 0, artigo_Avaliacao0, (String) null, "N=Ys\" (Z:oENe", "Model.Malas$Tipos_Malas", (-4916.654912), (-462.46), "USADO");
      malas0.getAno_da_colecao();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 0.0F, "Ano da cole\u00E7\u00E3o: ", (-1), "BOM", artigo_Estado0, (-1), artigo_Avaliacao0, (String) null, "Ano da cole\u00E7\u00E3o: ", "", 0.0F, 509.94681038, "Ccsj9Qxo>ZS");
      malas0.getMaterial();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 10.0F, "e;WRP5OX[MeW", (-294), "e;WRP5OX[MeW", artigo_Estado0, (-2747), artigo_Avaliacao0, "e;WRP5OX[MeW", "e;WRP5OX[MeW", "e;WRP5OX[MeW", (-2747), 0.0, "e;WRP5OX[MeW");
      malas0.setMarca("e;WRP5OX[MeW");
      Malas malas1 = new Malas(malas0);
      Malas.Tipos_Malas malas_Tipos_Malas1 = Malas.Tipos_Malas.PREMIUM;
      malas0.setTipo_mala(malas_Tipos_Malas0);
      malas1.setCorrecaoPreco(10.0F);
      malas1.setTipo_mala(malas_Tipos_Malas1);
      malas0.setId((-294));
      malas1.setDim((-787.4F));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-294));
      malas0.toString(localDate0);
      malas0.getDim();
      int int0 = (-1286);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(0, (-1286));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -1286
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 610.1973F, "", 0, "", artigo_Estado0, 0, artigo_Avaliacao0, "", "", "", 1109.1, (-435.4624377696935), "");
      Malas malas1 = new Malas(malas0);
      malas1.setAvaliacao(artigo_Avaliacao0);
      malas1.setId(0);
      malas1.setDim(0);
      Malas.Tipos_Malas.values();
      malas1.getAno_da_colecao();
      Malas.Tipos_Malas.values();
      malas1.clone();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Malas malas0 = new Malas();
      malas0.setCorrecaoPreco(0.5);
      malas0.setDim(0.0F);
      malas0.setId(1);
      malas0.setDim(0.0F);
      Period period0 = Period.ofMonths(2);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      malas0.precoFinal(localDate0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 30.0F, "$VALUES", 0, "$VALUES", artigo_Estado0, 1, artigo_Avaliacao0, "$VALUES", "$VALUES", "$VALUES", 844.3515167051861, (-1.0), "r,%~mKi");
      malas0.getTipo_mala();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-2688.51F), "", (-61), "", artigo_Estado0, (-61), artigo_Avaliacao0, "", "w#uf%\"Z8", "", (-2688.51F), (-2688.51F), "w#uf%\"Z8");
      Malas malas1 = new Malas(malas0);
      Malas malas2 = malas1.clone();
      malas0.setPrecoBase(3605.462674);
      Malas.Tipos_Malas malas_Tipos_Malas1 = Malas.Tipos_Malas.PREMIUM;
      malas1.setTipo_mala(malas_Tipos_Malas1);
      Malas.Tipos_Malas.values();
      malas1.getMaterial();
      malas2.setMaterial("");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Malas.Tipos_Malas.values();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-1107.9584F), "*0yMB(+U&(_%", 1, "*0yMB(+U&(_%", artigo_Estado0, 1, artigo_Avaliacao0, "*0yMB(+U&(_%", "*0yMB(+U&(_%", "Pre\u00E7o Base: ", 0.0, 1725.9031621, "Ok>");
      malas0.setCorrecaoPreco((-1.0));
      malas0.setDescricao("*0yMB(+U&(_%");
      malas0.setTipo_mala(malas_Tipos_Malas0);
      malas0.setTransportadora("Avalia\u00E7\u00E3o: ");
      malas0.getTipo_mala();
      malas0.getDim();
      malas0.clone();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 30.0F, "}t$eK|VKrDsAZ&", (-1880), "}t$eK|VKrDsAZ&", artigo_Estado0, (-1880), artigo_Avaliacao0, "}t$eK|VKrDsAZ&", "}t$eK|VKrDsAZ&", "}t$eK|VKrDsAZ&", (-1441.63536873021), (-2299.29679826264), "}t$eK|VKrDsAZ&");
      Malas malas1 = new Malas(malas0);
      malas1.clone();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Malas.Tipos_Malas.values();
      Malas malas0 = new Malas();
      Malas malas1 = new Malas(malas0);
      malas1.setCodigo("");
      malas1.setTipo("+T}");
      malas1.getMaterial();
      malas1.getAno_da_colecao();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Malas.Tipos_Malas.values();
      Malas malas0 = new Malas();
      malas0.setAno_da_colecao(1);
      malas0.getDim();
      Period period0 = Period.ofYears((-2632));
      Period period1 = period0.minusYears(22L);
      IsoChronology isoChronology0 = period1.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 1);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      malas0.toString(localDate0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Malas malas0 = new Malas();
      Malas malas1 = new Malas(malas0);
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      malas1.setTipo_mala(malas_Tipos_Malas0);
      malas1.setNumeroDonos(0);
      malas1.setMarca("");
      malas1.clone();
      malas1.setCodigo("");
      malas1.equals(malas0);
      Malas.Tipos_Malas.values();
      // Undeclared exception!
      try { 
        Malas.Tipos_Malas.valueOf("Marca: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Malas.Tipos_Malas.Marca: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Malas malas0 = null;
      try {
        malas0 = new Malas((Malas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Malas malas0 = new Malas();
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      malas0.setAvaliacao(artigo_Avaliacao0);
      malas0.setMarca("BAxOM]w[MsP)k6Ub*?");
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      malas0.setTransportadora("\n");
      malas0.setAno_da_colecao((-1));
      malas0.setEstado(artigo_Estado0);
      malas0.setId((-3761));
      malas0.setDescricao(".U'Fr6(.? n(LWAoh+");
      Malas malas1 = new Malas(malas0);
      malas1.setNumeroDonos((-3761));
      malas1.setCodigo("Descri\u00E7\u00E3o: ");
      malas1.setMarca(".U'Fr6(.? n(LWAoh+");
      malas1.getMaterial();
      malas0.setAno_da_colecao(1);
      malas0.getMaterial();
      malas0.clone();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 0.0F, "", 2050, ")", artigo_Estado0, 398, artigo_Avaliacao0, ")", "", "", 774.799726588, 774.799726588, (String) null);
      malas0.clone();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Malas malas0 = new Malas();
      malas0.setAno_da_colecao(1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Malas malas0 = new Malas();
      Malas malas1 = new Malas(malas0);
      malas1.clone();
      malas0.getDim();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.BOM;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-269.4F), "=]F8A5BZ*eQ", 2, "2D?<W(ht", artigo_Estado0, (-871), artigo_Avaliacao0, "=]F8A5BZ*eQ", "=]F8A5BZ*eQ", "Y.;\"5S#", (-186.2226), (-1.0), "I;Jh");
      malas0.setDim(2);
      // Undeclared exception!
      try { 
        malas0.precoFinal((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Malas", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Malas malas0 = new Malas();
      malas0.setCodigo("Ano da cole\u00E7\u00E3o: ");
      malas0.setMaterial("Model.Malas");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Malas malas0 = new Malas();
      malas0.setDim(321.03656F);
      Malas malas1 = malas0.clone();
      Period period0 = Period.ofWeeks((-35));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      period0.normalized();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      malas1.precoFinal(localDate0);
      Malas malas2 = malas1.clone();
      Object object0 = new Object();
      ZoneOffset.ofTotalSeconds(1988);
      malas0.equals(object0);
      malas2.precoFinal(localDate0);
      malas0.getTipo_mala();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      malas2.setTipo_mala(malas_Tipos_Malas0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Malas malas0 = new Malas();
      malas0.clone();
      malas0.equals("");
      malas0.getMaterial();
      Malas.Tipos_Malas.values();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Malas malas0 = new Malas();
      malas0.setCorrecaoPreco(0.0);
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      malas0.setTipo_mala(malas_Tipos_Malas0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Malas malas0 = new Malas();
      LocalDate localDate0 = MockLocalDate.now();
      malas0.toString(localDate0);
      malas0.clone();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Malas malas0 = new Malas();
      Malas malas1 = new Malas(malas0);
      malas1.setDim(3767.582F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 1605.25F, (String) null, 0, (String) null, artigo_Estado0, 0, artigo_Avaliacao0, (String) null, (String) null, (String) null, 0, 1605.25F, (String) null);
      malas0.getDim();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 10.0F, "e;WRP5OX[MeW", (-294), "e;WRP5OX[MeW", artigo_Estado0, (-2747), artigo_Avaliacao0, "e;WRP5OX[MeW", "e;WRP5OX[MeW", "e;WRP5OX[MeW", (-2747), 0.0, "e;WRP5OX[MeW");
      malas0.setMarca("e;WRP5OX[MeW");
      malas0.setTipo_mala(malas_Tipos_Malas0);
      Malas malas1 = new Malas(malas0);
      Malas.Tipos_Malas malas_Tipos_Malas1 = Malas.Tipos_Malas.NORMAL;
      malas0.setTipo_mala(malas_Tipos_Malas0);
      malas1.setCorrecaoPreco(10.0F);
      malas1.setTipo_mala(malas_Tipos_Malas1);
      malas0.setId((-294));
      malas1.setDim((-787.4F));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-294));
      malas0.toString(localDate0);
      malas0.getDim();
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(0, (-1286));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -1286
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 1905.8F, "A?|", 2, "YI'Hq!}/E2<4", artigo_Estado0, (-1), artigo_Avaliacao0, "A?|", "", "", 1905.8F, 1905.8F, (String) null);
      Period period0 = Period.ofYears(1777);
      Period period1 = period0.minusYears(322L);
      period1.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Malas malas1 = new Malas(malas0);
      Artigo.Avaliacao artigo_Avaliacao1 = Artigo.Avaliacao.BOM;
      Malas malas2 = new Malas(malas_Tipos_Malas0, 796.91F, "", (-1968526676), (String) null, artigo_Estado0, 2, artigo_Avaliacao1, (String) null, "&", "", (-1968526676), 2, "");
      malas1.equals(malas2);
      Malas malas3 = new Malas();
      Malas malas4 = new Malas(malas3);
      malas1.equals(malas4);
      malas0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Malas malas0 = new Malas();
      Malas malas1 = new Malas(malas0);
      Malas malas2 = malas1.clone();
      malas1.setPrecoBase(7244.0);
      malas1.getDim();
      malas1.getDim();
      malas1.setMaterial("$VALUES");
      malas0.setAno_da_colecao((-1));
      malas0.equals(malas0);
      Malas.Tipos_Malas.values();
      Malas.Tipos_Malas.values();
      malas2.equals(malas0);
      malas0.clone();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Malas malas0 = new Malas();
      malas0.setNumeroDonos(2488);
      malas0.setTipo("Tipo: ");
      Malas malas1 = malas0.clone();
      malas1.setTipo("+t=k,b\"Xhq<6z/GLDV");
      malas1.equals(malas0);
      LocalDate localDate0 = MockLocalDate.now();
      malas0.toString(localDate0);
      malas0.precoFinal(localDate0);
      Malas.Tipos_Malas.values();
      malas1.setTransportadora("+t=k,b\"Xhq<6z/GLDV");
      malas0.toString(localDate0);
      malas1.toString(localDate0);
      malas1.toString(localDate0);
      malas0.setDim(2488);
      malas1.getDim();
      malas1.getDim();
      Malas malas2 = malas0.clone();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      malas2.setTipo_mala(malas_Tipos_Malas0);
      float float0 = 0.0F;
      malas1.setDim(0.0F);
      malas0.getMaterial();
      malas0.precoFinal(localDate0);
      malas0.getMaterial();
      malas0.getMaterial();
      malas2.getMaterial();
      malas2.getAno_da_colecao();
      // Undeclared exception!
      try { 
        Malas.Tipos_Malas.valueOf("Tipo: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Malas.Tipos_Malas.Tipo: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Malas malas0 = new Malas();
      Malas malas1 = new Malas(malas0);
      malas1.setTipo("Rb*j");
      malas1.setPrecoBase(7244.253105107623);
      malas0.setCodigo("");
      malas1.getDim();
      malas1.getDim();
      malas1.setMaterial("Rb*j");
      malas0.setAno_da_colecao((-1));
      malas0.equals(malas1);
      malas0.getTipo_mala();
      Malas.Tipos_Malas.values();
      malas0.equals(malas0);
      Malas.Tipos_Malas[] malas_Tipos_MalasArray0 = Malas.Tipos_Malas.values();
      assertEquals(2, malas_Tipos_MalasArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockLocalDate.now();
      Malas.Tipos_Malas[] malas_Tipos_MalasArray0 = Malas.Tipos_Malas.values();
      assertEquals(2, malas_Tipos_MalasArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Malas malas0 = new Malas();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      malas0.setTipo_mala(malas_Tipos_Malas0);
      Artigo.Estado artigo_Estado1 = Artigo.Estado.NOVO;
      malas0.setDescricao("Oh374UaE}~eH");
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECÁVEL;
      malas0.setEstado(artigo_Estado0);
      malas0.setAvaliacao(artigo_Avaliacao0);
      Malas malas1 = malas0.clone();
      malas1.setAno_da_colecao(3719);
      malas1.setMarca("}ayl&hw");
      malas0.setEstado(artigo_Estado1);
      malas0.setDescricao("Oh374UaE}~eH");
      malas0.setPrecoBase((-614.9754344));
      malas0.setEstado(artigo_Estado0);
      malas0.equals("");
      malas0.setMaterial("Oh374UaE}~eH");
      // Undeclared exception!
      try { 
        Malas.Tipos_Malas.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Model.Malas.Tipos_Malas.
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
