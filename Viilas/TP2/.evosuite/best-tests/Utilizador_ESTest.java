/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 09:51:08 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.chrono.JapaneseDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      
      String string0 = utilizador0.adicionaArtigo("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      
      utilizador0.adicionaFaturaVendedor(false, 261L, (-733L), "=t`t!@es[kkyJ.?T", 2324.241913579094, true, 2324.241913579094, 0.0);
      utilizador0.setNif((-14L));
      utilizador0.getN_vendidos();
      utilizador0.getNome();
      utilizador0.imprimeFaturasVendas();
      utilizador0.getFaturasCompras();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.novoCarrinho();
      utilizador0.equals(utilizador1);
      utilizador0.adicionaFaturaVendedor(true, 0L, (-5228L), " Nome: ", 0L, true, 3420.4472566, 0L);
      utilizador0.setPendentes(set0);
      utilizador0.get1FaturaCompra(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      utilizador0.setNif((-22L));
      utilizador0.getN_vendidos();
      utilizador0.getNome();
      utilizador0.imprimeFaturasVendas();
      utilizador0.getFaturasCompras();
      Set<String> set0 = utilizador0.getProdutosVendidos();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.artigosCarrinho();
      utilizador1.adicionaFaturaComprador(true, (-5228L), 1L, set0, 0, (-2654.3983055), 0.0);
      utilizador0.equals(utilizador1);
      utilizador0.setPendentes(set0);
      utilizador0.get1FaturaCompra(0L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador1.setNif((-1L));
      Set<String> set0 = utilizador1.getPendentes();
      utilizador0.getProdutosVender();
      utilizador1.adicionaFaturaComprador(false, 674L, 674L, set0, (-1295.123425195), 674L, (-1295.123425195));
      utilizador0.compareTo(utilizador1);
      Map<Long, Fatura> map0 = utilizador1.getFaturasCompras();
      utilizador0.setFaturasVendas(map0);
      utilizador1.getNome();
      utilizador1.getId();
      utilizador0.imprimeFaturasVendas();
      utilizador0.verificaComprei((-1));
      utilizador1.getN_comprados();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada(" n\u00E3o foi comprada");
      utilizador0.adicionaArtigo((String) null);
      utilizador0.getMorada();
      Set<Long> set0 = utilizador0.getDevolvidos();
      Set<String> set1 = utilizador0.artigosCarrinho();
      utilizador0.numeroArtigos(set1);
      utilizador0.getProdutosVendidos();
      Utilizador.getCodigo();
      utilizador0.setDevolvidos(set0);
      utilizador0.getFaturasVendas();
      try { 
        utilizador0.aVendaToPendente(" Faturas dos artigos comprados: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Faturas dos artigos comprados:  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      utilizador0.setNif(1L);
      utilizador0.artigosCarrinho();
      utilizador0.getN_vendidos();
      utilizador0.getNome();
      utilizador0.imprimeFaturasVendas();
      utilizador0.getFaturasCompras();
      Set<String> set0 = utilizador0.getProdutosVendidos();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador0.numeroArtigos(set0);
      utilizador0.getCarrinho();
      utilizador0.adicionaFaturaVendedor(true, 0L, (-5228L), " Nome: ", 0L, true, 3420.4472566, 0L);
      utilizador0.setPendentes(set0);
      utilizador0.get1FaturaCompra(0L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada("");
      utilizador0.adicionaArtigo("");
      Set<String> set0 = utilizador0.removeCarrinho();
      utilizador0.setProdutosVendidos(set0);
      Set<String> set1 = utilizador0.getProdutosVender();
      utilizador0.setPendentes(set1);
      utilizador0.verificaComprei(833L);
      utilizador0.getIdCarrinho();
      utilizador0.getMorada();
      Set<Long> set2 = utilizador0.getDevolvidos();
      Set<String> set3 = utilizador0.artigosCarrinho();
      utilizador0.numeroArtigos(set3);
      utilizador0.getProdutosVendidos();
      Utilizador.getCodigo();
      utilizador0.setDevolvidos(set2);
      utilizador0.getFaturasVendas();
      try { 
        utilizador0.aVendaToPendente(" Faturas dos artigos comprados: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Faturas dos artigos comprados:  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.removeCarrinho();
      Utilizador utilizador1 = utilizador0.clone();
      // Undeclared exception!
      try { 
        utilizador1.setDevolvidos((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long(2407L);
      Utilizador utilizador0 = new Utilizador("\n", "", (String) null, long0, (String) null);
      utilizador0.getCarrinho();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.removeCarrinho();
      utilizador1.getPassword();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      Set<Long> set0 = utilizador0.getComprei();
      utilizador1.setDevolvidos(set0);
      utilizador1.compareTo(utilizador0);
      String string0 = "tbOr]43";
      utilizador0.clone();
      try { 
        utilizador0.pendenteToAvenda("tbOr]43");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo tbOr]43 n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Long.max(0L, 0L);
      Utilizador utilizador0 = new Utilizador((String) null, "V6y.{'UjC'#[uz", (String) null, long0, "Encomenda");
      Long.remainderUnsigned(0L, (-2994L));
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.getEmail();
      utilizador0.compareTo(utilizador1);
      Map<Long, Fatura> map0 = utilizador1.getFaturasVendas();
      utilizador1.setFaturasCompras(map0);
      utilizador1.imprimeFaturasVendas();
      utilizador0.getPassword();
      utilizador0.clone();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("jd=twS+jXN-Jz", "\n", ",urZ@", long0, "\n");
      Clock clock0 = MockClock.systemUTC();
      Duration duration0 = Duration.ofSeconds((-1L), 3054L);
      Clock clock1 = MockClock.offset(clock0, duration0);
      LocalDate localDate0 = MockLocalDate.now(clock1);
      utilizador0.atualizaEncomenda(localDate0);
      utilizador0.getComprei();
      Long.compare(2537L, 1L);
      Long long1 = new Long(1L);
      Long.getLong("\n", (-1394L));
      Long.getLong(",urZ@", long1);
      utilizador0.get1FaturaCompra(833L);
      Utilizador utilizador1 = utilizador0.clone();
      utilizador1.getPendentes();
      Utilizador utilizador2 = utilizador1.clone();
      utilizador0.getNif();
      utilizador1.atualizaEncomenda(localDate0);
      utilizador0.toString();
      utilizador0.getProdutosVendidos();
      utilizador0.getNif();
      System.setCurrentTimeMillis(3054L);
      // Undeclared exception!
      try { 
        utilizador2.setProdutosVender((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = utilizador0.getPendentes();
      utilizador0.setProdutosVendidos(set0);
      utilizador0.setNif(2439L);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador0.removeCarrinho();
      Set<String> set1 = utilizador1.getProdutosVendidos();
      utilizador1.toString();
      utilizador1.setPendentes(set1);
      utilizador0.adicionaFaturaComprador(false, (-1L), 2530L, set1, 2439L, 0.0, 2439L);
      utilizador1.setId((-1L));
      utilizador1.getN_vendidos();
      Utilizador.getCodigo();
      utilizador0.getNome();
      utilizador1.toString();
      utilizador0.imprime1FaturaCompra((-1L));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_comprados((-2013265918));
      utilizador0.adicionaFaturaVendedor(false, 0L, 1251L, "mg,A", 0L, false, 1251L, 1251L);
      utilizador0.getFaturasCompras();
      utilizador0.getN_comprados();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = "bGoRecM%Iu9zH/";
      utilizador0.getComprei();
      utilizador0.adicionaArtigo("");
      utilizador0.finalizaEncomenda((LocalDate) null);
      utilizador0.adicionaFaturaVendedor(false, 457L, 457L, "bGoRecM%Iu9zH/", 457L, false, (-318.458204), 0.0);
      Utilizador utilizador1 = utilizador0.clone();
      utilizador1.imprimeFaturasCompras();
      // Undeclared exception!
      try { 
        utilizador1.imprime1FaturaCompra(457L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(1L);
      String string0 = "H>Mu/1ol9~!g;{q";
      String string1 = "zBU@E@n}";
      Long.getLong("Taxa Vintage: ", 1L);
      Long.getLong("zBU@E@n}", long0);
      Utilizador utilizador0 = new Utilizador("", "", "Taxa Vintage: ", long0, "H>Mu/1ol9~!g;{q");
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      utilizador0.atualizaEncomenda(localDate1);
      utilizador0.verificaComprei(0L);
      utilizador0.getCarrinho();
      utilizador0.setN_vendidos((-1));
      Long.remainderUnsigned(1L, (-1));
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      utilizador0.setFaturasCompras(map0);
      utilizador0.removeCarrinho();
      // Undeclared exception!
      try { 
        MockLocalDate.of((-1), (-1), 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -1
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = " }";
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, " }", long0, (String) null);
      Set<String> set0 = utilizador0.removeCarrinho();
      utilizador0.adicionaFaturaComprador(true, 1295L, 0L, set0, (-2133.1501512382), 5027.3889594657, 104.57);
      utilizador0.get1FaturaCompra(1295L);
      try { 
        utilizador0.pendenteToVendido(" }");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  } n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      Utilizador.setCodigo((-1180L));
      utilizador0.equals(utilizador1);
      utilizador0.getCarrinho();
      utilizador0.insereNovoArtigo("Kk&zIW%{C6N~;1g4#f\"");
      Set<String> set0 = utilizador0.artigosCarrinho();
      Set<Long> set1 = utilizador0.getComprei();
      utilizador0.getProdutosVender();
      utilizador0.setDevolvidos(set1);
      utilizador0.setProdutosVender(set0);
      utilizador0.setMorada("ArtigoExistenteException");
      utilizador0.removeCarrinho();
      utilizador0.get1FaturaVenda((-1792L));
      utilizador0.imprimeFaturasVendas();
      utilizador0.getMorada();
      utilizador0.getNif();
      Utilizador.criaCodigo();
      utilizador0.getPassword();
      utilizador1.getPendentes();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("", "PHHcxf YNFA9", "PHHcxf YNFA9", long0, "PHHcxf YNFA9");
      utilizador0.getEmail();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getProdutosVendidos();
      utilizador0.imprimeFaturasVendas();
      Set<String> set0 = utilizador0.getProdutosVender();
      utilizador0.setProdutosVendidos(set0);
      Utilizador.criaCodigo();
      Utilizador.getCodigo();
      // Undeclared exception!
      try { 
        utilizador0.setFaturasVendas((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      Set<String> set0 = utilizador0.removeCarrinho();
      assertNotNull(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<String> set1 = utilizador0.getPendentes();
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      String string0 = utilizador0.insereNovoArtigo("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      utilizador0.setProdutosVendidos(set1);
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertFalse(set1.contains(""));
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      utilizador0.setN_vendidos(0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      String string1 = utilizador0.getPassword();
      assertEquals("n/d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      boolean boolean0 = utilizador0.verificaComprei(2186L);
      assertFalse(boolean0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      utilizador0.adicionaFaturaVendedor(true, 0, 1L, "O artigo ", 2186L, true, 1L, 2186L);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      utilizador0.setProdutosVendidos(set1);
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string1));
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      long long0 = utilizador0.getId();
      assertEquals(1L, long0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      String string2 = utilizador0.imprimeFaturasVendas();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      String string3 = utilizador0.eliminaArtigo("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.novoCarrinho();
      String string0 = "p/yKb8tI%DtZ$DHIp/";
      utilizador0.setMorada("p/yKb8tI%DtZ$DHIp/");
      Utilizador.setCodigo((-941L));
      utilizador0.getNome();
      utilizador0.getIdCarrinho();
      utilizador0.imprimeFaturasCompras();
      String string1 = "4nLDS_b";
      utilizador0.setMorada("4nLDS_b");
      utilizador0.clone();
      Encomenda encomenda0 = new Encomenda();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_TIME;
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) "4nLDS_b", dateTimeFormatter0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '4nLDS_b' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.imprimeFaturasCompras();
      Map<Long, Fatura> map0 = utilizador0.getFaturasCompras();
      utilizador0.setFaturasVendas(map0);
      utilizador0.setN_comprados((-1592));
      utilizador0.adicionaFaturaVendedor(true, 0L, 0L, "", (-2884.610002532589), false, 0L, 0L);
      utilizador0.novoCarrinho();
      // Undeclared exception!
      try { 
        utilizador0.setComprei((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador.setCodigo(0L);
      Utilizador.criaCodigo();
      String string0 = "Z_iHI\"ZS'w)nf=}v1";
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("N k)b~r", "Z_iHI\"ZS'w)nf=}v1", "Z_iHI\"ZS'w)nf=}v1", long0, "");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1582L));
      try { 
        utilizador0.finalizaEncomenda(localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "4u2{|=>/x17w=L*RY", long0, "");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.getPassword();
      utilizador1.getN_comprados();
      Map<Long, Fatura> map0 = utilizador1.getFaturasVendas();
      utilizador1.setFaturasVendas(map0);
      Set<String> set0 = utilizador0.getProdutosVender();
      utilizador1.numeroArtigos(set0);
      utilizador0.getFaturasVendas();
      utilizador0.setN_comprados(0);
      utilizador0.verificaComprei(0L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Long long0 = new Long((-2527L));
      Utilizador utilizador0 = new Utilizador("EncomendaNaoEncontradaException", " Artigos: ", " Artigos: ", long0, " Artigos: ");
      Long.max((-2527L), (-2527L));
      Utilizador.criaCodigo();
      Long.divideUnsigned(0L, 2L);
      utilizador0.getN_comprados();
      utilizador0.getFaturasCompras();
      utilizador0.setNome("EncomendaNaoEncontradaException");
      utilizador0.imprimeFaturasCompras();
      utilizador0.get1FaturaVenda(0);
      utilizador0.getFaturasCompras();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Long long0 = new Long((-1826L));
      Utilizador utilizador0 = new Utilizador(".", ".", " n\u00E3o se encontra \u00E0 venda", long0, ".");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      // Undeclared exception!
      try { 
        utilizador1.numeroArtigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador(":S", "", "", long0, "Fatura");
      utilizador0.artigosCarrinho();
      long long1 = (-411L);
      Long.sum((-411L), (-411L));
      utilizador0.getFaturasVendas();
      Encomenda encomenda0 = new Encomenda();
      long long2 = 1504L;
      utilizador0.setNome("");
      Long.max(1504L, 2252L);
      Encomenda encomenda1 = encomenda0.clone();
      Long.getLong(":S");
      Encomenda encomenda2 = new Encomenda(encomenda1);
      utilizador0.setCarrinho(encomenda2);
      utilizador0.getComprei();
      utilizador0.getComprei();
      Utilizador.getCodigo();
      utilizador0.getNome();
      utilizador0.getProdutosVender();
      try { 
        utilizador0.aVendaToPendente(" Pass: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Pass:  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Long long0 = new Long(1L);
      Long.toUnsignedString(1L);
      Utilizador utilizador0 = new Utilizador("`|3Pj Tg", "hUz[6b'{!YyESu", "p2z4gnUD9<F_}l!hn", long0, "*Ppr>Ee$BYFxY");
      Set<String> set0 = utilizador0.removeCarrinho();
      utilizador0.setProdutosVender(set0);
      // Undeclared exception!
      try { 
        utilizador0.setFaturasCompras((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Long long0 = new Long((-2030L));
      Long.compareUnsigned((-2030L), 0L);
      Long.toUnsignedString((-957L));
      Utilizador utilizador0 = new Utilizador("fxC+2I}", "", "3~A", long0, (String) null);
      utilizador0.getPassword();
      Set<String> set0 = utilizador0.removeCarrinho();
      utilizador0.getFaturasVendas();
      utilizador0.adicionaFaturaVendedor(false, 0L, (-2116L), "", 667.3355552059845, false, (-186.0880639425356), 0.0);
      utilizador0.imprimeFaturasVendas();
      Encomenda encomenda0 = utilizador0.getCarrinho();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Set<Long> set1 = utilizador0.getDevolvidos();
      utilizador0.setDevolvidos(set1);
      utilizador0.setCarrinho(encomenda1);
      utilizador0.getEmail();
      utilizador0.setProdutosVendidos(set0);
      utilizador0.removeCarrinho();
      utilizador0.setMorada("18446744073709550659");
      utilizador0.insereNovoArtigo("Fatura 1 - Venda\nNIF do comprador: -2116\nArtigos vendidos: java.util.HashSet@0000000004\n\nCusto dos produtos: 667.34\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 667.34\u20AC\n\n");
      try { 
        utilizador0.vendidoToaVenda("Fatura 1 - Venda\nNIF do comprador: -2116\nArtigos vendidos: java.util.HashSet@0000000004\n\nCusto dos produtos: 667.34\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 667.34\u20AC\n\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Fatura 1 - Venda
         // NIF do comprador: -2116
         // Artigos vendidos: java.util.HashSet@0000000004
         // 
         // Custo dos produtos: 667.34\u20AC
         // Taxa Vintage: 0.00\u20AC
         // Pre\u00E7o final: 667.34\u20AC
         // 
         //  n\u00E3o foi vendido
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada("");
      utilizador0.adicionaArtigo("");
      Set<String> set0 = utilizador0.getProdutosVender();
      utilizador0.setPendentes(set0);
      utilizador0.verificaComprei(833L);
      utilizador0.getIdCarrinho();
      utilizador0.getMorada();
      Set<Long> set1 = utilizador0.getDevolvidos();
      Set<String> set2 = utilizador0.artigosCarrinho();
      utilizador0.numeroArtigos(set2);
      utilizador0.getProdutosVendidos();
      Utilizador.getCodigo();
      utilizador0.setDevolvidos(set1);
      utilizador0.getFaturasVendas();
      try { 
        utilizador0.aVendaToPendente(" Faturas dos artigos comprados: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Faturas dos artigos comprados:  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.toUnsignedString(0L);
      Utilizador utilizador0 = new Utilizador("v", " Data de entrega: ", "v", long0, "v");
      Set<String> set0 = null;
      // Undeclared exception!
      try { 
        utilizador0.setPendentes((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      utilizador0.setNif(1L);
      utilizador0.getN_vendidos();
      utilizador0.getNome();
      boolean boolean0 = true;
      long long0 = 0L;
      utilizador0.imprimeFaturasVendas();
      long long1 = (-5228L);
      utilizador0.getFaturasCompras();
      utilizador0.getProdutosVendidos();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      // Undeclared exception!
      try { 
        utilizador0.equals(utilizador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Long long0 = new Long(259L);
      Utilizador utilizador0 = new Utilizador("G?k.", (String) null, "G?k.", long0, (String) null);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      Long long1 = new Long((-2206L));
      Long.getLong("G?k.", long1);
      Long.sum((-661L), 0L);
      // Undeclared exception!
      try { 
        utilizador1.setCarrinho((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome("*zLars");
      utilizador0.getN_vendidos();
      try { 
        utilizador0.pendenteToVendido("s.`xVYfYM~0_x2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo s.`xVYfYM~0_x2 n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("u.-^l8y/]Kr)}5=", "u.-^l8y/]Kr)}5=", "u.-^l8y/]Kr)}5=", long0, "");
      Long.divideUnsigned(0L, 764L);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.getEmail();
      // Undeclared exception!
      try { 
        utilizador1.setFaturasCompras((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("jM7hq$K[`zA,HSo", long0);
      Long.getLong("C7_L3A-LEElX{l%qQ");
      Long.compare(0L, 0L);
      Utilizador utilizador0 = new Utilizador(";|HKi", "C7_L3A-LEElX{l%qQ", "", long1, "");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      Utilizador.criaCodigo();
      utilizador1.getMorada();
      utilizador1.setNome("");
      utilizador0.artigosCarrinho();
      utilizador1.getCarrinho();
      utilizador0.setEmail("4g((J/am?m");
      utilizador0.getId();
      utilizador1.removeCarrinho();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.get1FaturaCompra((-1L));
      try { 
        utilizador0.pendenteToAvenda("*4fjUBTW8\"F$}gZP");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo *4fjUBTW8\"F$}gZP n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Long long0 = new Long(295L);
      Utilizador utilizador0 = new Utilizador("TuCi=cdN=vrWpnn", "TuCi=cdN=vrWpnn", "TuCi=cdN=vrWpnn", long0, "J,1(5KZUlw");
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1332L);
      utilizador0.atualizaEncomenda(localDate0);
      utilizador0.getFaturasCompras();
      utilizador0.setN_vendidos(1);
      utilizador0.getProdutosVendidos();
      utilizador0.setN_vendidos((-682));
      utilizador0.getPassword();
      utilizador0.getNif();
      utilizador0.insereNovoArtigo("J,1(5KZUlw");
      utilizador0.setMorada("TuCi=cdN=vrWpnn");
      try { 
        utilizador0.finalizaEncomenda(localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador((String) null, "V6y.{'UjC'#[uz", (String) null, long0, "Encomenda");
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_vendidos());
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_vendidos());
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      assertEquals(2L, utilizador1.getCodigo());
      assertNull(utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("Encomenda", utilizador1.getPassword());
      assertNull(utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("V6y.{'UjC'#[uz", utilizador1.getNome());
      
      String string0 = utilizador1.getEmail();
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNull(string0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_vendidos());
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      assertEquals(2L, utilizador1.getCodigo());
      assertNull(utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("Encomenda", utilizador1.getPassword());
      assertNull(utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("V6y.{'UjC'#[uz", utilizador1.getNome());
      
      int int0 = utilizador0.compareTo(utilizador1);
      assertEquals(0, int0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_vendidos());
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      assertEquals(2L, utilizador1.getCodigo());
      assertNull(utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("Encomenda", utilizador1.getPassword());
      assertNull(utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("V6y.{'UjC'#[uz", utilizador1.getNome());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("EncomendaExistenteException", "JHk]y<AY\"e@?ncl2c-=", "", long0, "");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      utilizador0.atualizaEncomenda(localDate1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador0.compareTo(utilizador1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Long long0 = new Long((-2055L));
      Utilizador utilizador0 = new Utilizador("[8&%C~IY", "[8&%C~IY", "[8&%C~IY", long0, "[8&%C~IY");
      try { 
        utilizador0.vendidoToaVenda("[8&%C~IY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo [8&%C~IY n\u00E3o foi vendido
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Utilizador.criaCodigo();
      Utilizador utilizador0 = new Utilizador();
      utilizador0.artigosCarrinho();
      utilizador0.adicionaFaturaVendedor(false, 1L, 118L, "", 839.8, false, 1L, 0.0);
      Set<String> set0 = utilizador0.getPendentes();
      utilizador0.getComprei();
      utilizador0.adicionaFaturaComprador(false, 0L, 1L, set0, 394.14027701768, 0L, (-3403.38545563));
      Utilizador utilizador1 = utilizador0.clone();
      utilizador1.setN_vendidos(0);
      utilizador0.getFaturasVendas();
      utilizador0.getDevolvidos();
      utilizador0.getNif();
      utilizador1.getMorada();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Long long0 = Long.getLong("]jiPk'Of@", 1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador("", "", "<u[R1'Q", long0, "]jiPk'Of@");
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("<u[R1'Q", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("]jiPk'Of@", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      
      long long1 = Utilizador.criaCodigo();
      assertEquals(2L, long1);
      
      Long long2 = Long.getLong("<u[R1'Q", 2L);
      assertEquals(2L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      utilizador0.novoCarrinho();
      assertFalse(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", utilizador0.getEmail());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getId());
      assertEquals("<u[R1'Q", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals("]jiPk'Of@", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      
      Set<String> set0 = utilizador0.getPendentes();
      assertFalse(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertNotNull(set0);
      assertFalse(set0.contains("]jiPk'Of@"));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", utilizador0.getEmail());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getId());
      assertEquals("<u[R1'Q", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals("]jiPk'Of@", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      int int0 = utilizador0.numeroArtigos(set0);
      assertEquals(0, int0);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertFalse(set0.contains("]jiPk'Of@"));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", utilizador0.getEmail());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getId());
      assertEquals("<u[R1'Q", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals("]jiPk'Of@", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      Set<String> set0 = utilizador0.artigosCarrinho();
      assertNotNull(set0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      utilizador0.setProdutosVendidos(set0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador((String) null, "", (String) null, long0, "");
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getPassword());
      assertNull(utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getPassword());
      assertNull(utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals(0L, utilizador1.getNif());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("", utilizador1.getNome());
      assertNull(utilizador1.getMorada());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("", utilizador1.getPassword());
      assertNull(utilizador1.getEmail());
      
      utilizador1.setEmail((String) null);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getPassword());
      assertNull(utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals(0L, utilizador1.getNif());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("", utilizador1.getNome());
      assertNull(utilizador1.getMorada());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("", utilizador1.getPassword());
      assertNull(utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      
      utilizador0.setPassword("");
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      assertEquals(3L, encomenda0.getCodigo());
      assertEquals(2L, encomenda0.getId());
      assertEquals(0, encomenda0.numeroArtigos());
      
      utilizador0.setCarrinho(encomenda0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      assertEquals(3L, encomenda0.getCodigo());
      assertEquals(2L, encomenda0.getId());
      assertEquals(0, encomenda0.numeroArtigos());
      
      Map<Long, Fatura> map0 = utilizador0.getFaturasCompras();
      assertNotNull(map0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      utilizador0.setFaturasCompras(map0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Long long0 = new Long((-1937L));
      assertEquals((-1937L), (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador("", "Vrtv TP69Wqo28lmP`", " Artigos vendidos: ", long0, "IdZK-");
      assertNotNull(utilizador0);
      assertEquals((-1937L), utilizador0.getNif());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(" Artigos vendidos: ", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals("IdZK-", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("Vrtv TP69Wqo28lmP`", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      
      utilizador0.setN_comprados(0);
      assertEquals((-1937L), utilizador0.getNif());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(" Artigos vendidos: ", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals("IdZK-", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("Vrtv TP69Wqo28lmP`", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      
      Set<Long> set0 = utilizador1.getDevolvidos();
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(set0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      utilizador1.setComprei(set0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = utilizador1.insereNovoArtigo((String) null);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNull(string0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      
      utilizador1.setN_vendidos((-3601));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals((-3601), utilizador1.getN_vendidos());
      
      Set<Long> set1 = utilizador0.getDevolvidos();
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      utilizador1.setComprei(set1);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(set1, set0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals((-3601), utilizador1.getN_vendidos());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      utilizador1.setId((-3601));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals((-3601L), utilizador1.getId());
      assertEquals((-3601), utilizador1.getN_vendidos());
      
      Utilizador utilizador2 = utilizador1.clone();
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertNotNull(utilizador2);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals((-3601L), utilizador1.getId());
      assertEquals((-3601), utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador2.getNome());
      assertEquals("n/d", utilizador2.getMorada());
      assertEquals("n/d", utilizador2.getEmail());
      assertEquals((-3601L), utilizador2.getId());
      assertEquals(1L, utilizador2.getIdCarrinho());
      assertEquals((-1L), utilizador2.getNif());
      assertEquals(0, utilizador2.getN_comprados());
      assertEquals("n/d", utilizador2.getPassword());
      assertEquals(2L, utilizador2.getCodigo());
      assertEquals((-3601), utilizador2.getN_vendidos());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = utilizador2.equals(object0);
      assertFalse(boolean0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals((-3601L), utilizador1.getId());
      assertEquals((-3601), utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador2.getNome());
      assertEquals("n/d", utilizador2.getMorada());
      assertEquals("n/d", utilizador2.getEmail());
      assertEquals((-3601L), utilizador2.getId());
      assertEquals(1L, utilizador2.getIdCarrinho());
      assertEquals((-1L), utilizador2.getNif());
      assertEquals(0, utilizador2.getN_comprados());
      assertEquals("n/d", utilizador2.getPassword());
      assertEquals(2L, utilizador2.getCodigo());
      assertEquals((-3601), utilizador2.getN_vendidos());
      
      String string1 = " n\u00E3o foi comprada";
      try { 
        utilizador0.aVendaToPendente(" n\u00E3o foi comprada");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o foi comprada n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = 1L;
      Utilizador.setCodigo(1L);
      Long long1 = new Long((-681L));
      assertEquals((-681L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Utilizador utilizador0 = new Utilizador("\n", "\n", "}", long1, "\n");
      assertFalse(long1.equals((Object)long0));
      assertNotNull(utilizador0);
      assertEquals("\n", utilizador0.getNome());
      assertEquals("\n", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-681L), utilizador0.getNif());
      assertEquals("\n", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("}", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      
      int int0 = Long.compareUnsigned(1L, 1L);
      assertEquals(0, int0);
      
      Set<String> set0 = utilizador0.artigosCarrinho();
      assertFalse(long1.equals((Object)long0));
      assertNotNull(set0);
      assertFalse(set0.contains("\n"));
      assertEquals("\n", utilizador0.getNome());
      assertEquals("\n", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-681L), utilizador0.getNif());
      assertEquals("\n", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("}", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      long long2 = Long.min(1L, 0L);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertNotNull(utilizador1);
      assertEquals("\n", utilizador0.getNome());
      assertEquals("\n", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-681L), utilizador0.getNif());
      assertEquals("\n", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("}", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals("\n", utilizador1.getNome());
      assertEquals((-681L), utilizador1.getNif());
      assertEquals("\n", utilizador1.getPassword());
      assertEquals("}", utilizador1.getMorada());
      assertEquals("\n", utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      
      String string0 = utilizador1.getMorada();
      assertEquals("}", string0);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(string0);
      assertEquals("\n", utilizador0.getNome());
      assertEquals("\n", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-681L), utilizador0.getNif());
      assertEquals("\n", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("}", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals("\n", utilizador1.getNome());
      assertEquals((-681L), utilizador1.getNif());
      assertEquals("\n", utilizador1.getPassword());
      assertEquals("}", utilizador1.getMorada());
      assertEquals("\n", utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      
      Set<String> set1 = utilizador1.getProdutosVender();
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      assertEquals("\n", utilizador0.getNome());
      assertEquals("\n", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-681L), utilizador0.getNif());
      assertEquals("\n", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("}", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals("\n", utilizador1.getNome());
      assertEquals((-681L), utilizador1.getNif());
      assertEquals("\n", utilizador1.getPassword());
      assertEquals("}", utilizador1.getMorada());
      assertEquals("\n", utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      utilizador0.setN_vendidos(0);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertNotSame(utilizador0, utilizador1);
      assertEquals("\n", utilizador0.getNome());
      assertEquals("\n", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-681L), utilizador0.getNif());
      assertEquals("\n", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("}", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      
      utilizador1.setProdutosVender(set1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string0));
      assertEquals("\n", utilizador0.getNome());
      assertEquals("\n", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-681L), utilizador0.getNif());
      assertEquals("\n", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("}", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals("\n", utilizador1.getNome());
      assertEquals((-681L), utilizador1.getNif());
      assertEquals("\n", utilizador1.getPassword());
      assertEquals("}", utilizador1.getMorada());
      assertEquals("\n", utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      try { 
        utilizador1.compreiToDevolvido((-2015L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A encomenda -2015 n\u00E3o foi comprada
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getEmail());
      
      try { 
        utilizador0.compreiToDevolvido(1940L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A encomenda 1940 n\u00E3o foi comprada
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = ">7l";
      Long long0 = new Long((-132L));
      assertEquals((-132L), (long)long0);
      assertNotNull(long0);
      
      String string1 = "";
      Utilizador utilizador0 = new Utilizador("*v;#.C)^7Kb", "*v;#.C)^7Kb", ">7l", long0, "");
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("*v;#.C)^7Kb", utilizador0.getNome());
      assertEquals((-132L), utilizador0.getNif());
      assertEquals(">7l", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("*v;#.C)^7Kb", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("*v;#.C)^7Kb", utilizador0.getNome());
      assertEquals((-132L), utilizador0.getNif());
      assertEquals(">7l", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("*v;#.C)^7Kb", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("*v;#.C)^7Kb", utilizador1.getNome());
      assertEquals("*v;#.C)^7Kb", utilizador1.getEmail());
      assertEquals("", utilizador1.getPassword());
      assertEquals(">7l", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals((-132L), utilizador1.getNif());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(1L, utilizador1.getId());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      
      Utilizador.setCodigo((-2341L));
      try { 
        utilizador1.pendenteToAvenda("*v;#.C)^7Kb");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo *v;#.C)^7Kb n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      
      utilizador0.setId((-1L));
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getId());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      
      String string0 = utilizador0.getNome();
      assertEquals("n/d", string0);
      assertNotNull(string0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getId());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      
      Utilizador utilizador1 = new Utilizador();
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(2L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(2L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(3L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      
      Map<Long, Fatura> map0 = utilizador1.getFaturasCompras();
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(map0);
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(2L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(2L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(3L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      utilizador0.setFaturasCompras(map0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals((-1L), utilizador0.getId());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(2L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(2L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(3L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      try { 
        utilizador0.pendenteToAvenda("n/d");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo n/d n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Long long0 = new Long((-746L));
      assertEquals((-746L), (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador("", "$l'PUt-r-GhDjxK5", "bNB>RgsG->,GJyq#", long0, "NIF do comprador: ");
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("$l'PUt-r-GhDjxK5", utilizador0.getNome());
      assertEquals((-746L), utilizador0.getNif());
      assertEquals("bNB>RgsG->,GJyq#", utilizador0.getMorada());
      assertEquals("", utilizador0.getEmail());
      assertEquals("NIF do comprador: ", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getIdCarrinho());
      
      Utilizador utilizador1 = utilizador0.clone();
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(utilizador1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("$l'PUt-r-GhDjxK5", utilizador0.getNome());
      assertEquals((-746L), utilizador0.getNif());
      assertEquals("bNB>RgsG->,GJyq#", utilizador0.getMorada());
      assertEquals("", utilizador0.getEmail());
      assertEquals("NIF do comprador: ", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("", utilizador1.getEmail());
      assertEquals("bNB>RgsG->,GJyq#", utilizador1.getMorada());
      assertEquals((-746L), utilizador1.getNif());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("$l'PUt-r-GhDjxK5", utilizador1.getNome());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(1L, utilizador1.getId());
      assertEquals("NIF do comprador: ", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      Set<Long> set0 = utilizador0.getComprei();
      assertNotNull(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      utilizador0.setDevolvidos(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      utilizador0.setNif(0L);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0L, utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      try { 
        utilizador0.aVendaToPendente(" - ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  -  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      
      String string0 = "";
      try { 
        utilizador0.pendenteToVendido("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador("x h$R,V3~#3 sR%bXf", "", "", long0, "");
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals(0L, utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals("x h$R,V3~#3 sR%bXf", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals(0L, utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals("x h$R,V3~#3 sR%bXf", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getId());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("x h$R,V3~#3 sR%bXf", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      
      utilizador1.setId(2679L);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals(0L, utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals("x h$R,V3~#3 sR%bXf", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(2679L, utilizador1.getId());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("x h$R,V3~#3 sR%bXf", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(2L, utilizador1.getCodigo());
      
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay((-385), (-385));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -385
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      try { 
        utilizador0.aVendaToPendente("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long long0 = Utilizador.criaCodigo();
      assertEquals(1L, long0);
      
      Long long1 = Long.getLong("]rCwVi`UP)|kH=U6:l3", 1L);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Utilizador utilizador0 = new Utilizador("", "o r\" %Xh&7", "", long1, "");
      assertTrue(long1.equals((Object)long0));
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getNif());
      assertEquals("o r\" %Xh&7", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_vendidos());
      
      long long2 = utilizador0.getIdCarrinho();
      assertEquals(1L, long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long2 == long0);
      assertEquals(1L, utilizador0.getNif());
      assertEquals("o r\" %Xh&7", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "S)Bru{<Ws[f}&w |Or";
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      int int0 = Long.compare(0L, (-4107L));
      assertEquals(1, int0);
      
      Utilizador utilizador0 = new Utilizador("2np4:O#lK>F!t@ R#0", "2np4:O#lK>F!t@ R#0", "S)Bru{<Ws[f}&w |Or", long1, "S)Bru{<Ws[f}&w |Or");
      assertTrue(long1.equals((Object)long0));
      assertNotNull(utilizador0);
      assertEquals(0L, utilizador0.getNif());
      assertEquals("S)Bru{<Ws[f}&w |Or", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("2np4:O#lK>F!t@ R#0", utilizador0.getNome());
      assertEquals("2np4:O#lK>F!t@ R#0", utilizador0.getEmail());
      assertEquals("S)Bru{<Ws[f}&w |Or", utilizador0.getPassword());
      
      String string1 = "Medio";
      String string2 = utilizador0.adicionaArtigo("Medio");
      assertEquals("Medio", string2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0L, utilizador0.getNif());
      assertEquals("S)Bru{<Ws[f}&w |Or", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("2np4:O#lK>F!t@ R#0", utilizador0.getNome());
      assertEquals("2np4:O#lK>F!t@ R#0", utilizador0.getEmail());
      assertEquals("S)Bru{<Ws[f}&w |Or", utilizador0.getPassword());
      
      try { 
        utilizador0.removeArtigo("2np4:O#lK>F!t@ R#0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo 2np4:O#lK>F!t@ R#0 n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      
      Set<Long> set0 = utilizador0.getDevolvidos();
      assertNotNull(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      assertNotNull(map0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      utilizador0.setFaturasVendas(map0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Set<String> set1 = utilizador0.removeCarrinho();
      assertNotNull(set1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      String string0 = utilizador0.getMorada();
      assertEquals("n/d", string0);
      assertNotNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      
      try { 
        utilizador0.removeArtigo(":Ov$yOU7G)bFV=|WM'");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo :Ov$yOU7G)bFV=|WM' n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      
      String string0 = "";
      utilizador0.setMorada("");
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      
      long long0 = (-1L);
      int int0 = 0;
      utilizador0.setN_vendidos(0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      
      Set<String> set0 = utilizador0.removeCarrinho();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      double double0 = 946.445357;
      utilizador0.adicionaFaturaComprador(false, 0L, (-1L), set0, 0.0, 946.445357, 946.445357);
      assertFalse(set0.contains(string0));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals(2L, encomenda0.getId());
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      assertEquals(3L, encomenda0.getCodigo());
      assertEquals(0, encomenda0.numeroArtigos());
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      
      Encomenda.setCodigo(0L);
      LocalDate localDate0 = encomenda0.getData();
      assertNotNull(localDate0);
      assertEquals(2L, encomenda0.getId());
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      assertEquals(0, encomenda0.numeroArtigos());
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      assertEquals(0L, encomenda0.getCodigo());
      
      try { 
        utilizador0.finalizaEncomenda(localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      
      utilizador0.setMorada("");
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      
      utilizador0.setN_vendidos(0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      
      Set<String> set0 = utilizador0.removeCarrinho();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      utilizador0.adicionaFaturaComprador(false, 0L, (-1L), set0, (-35.757781293115805), 946.445357, 946.445357);
      assertFalse(set0.contains(""));
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals(2L, encomenda0.getId());
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      assertEquals(3L, encomenda0.getCodigo());
      assertEquals(0, encomenda0.numeroArtigos());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      
      Encomenda.setCodigo(0L);
      LocalDate localDate0 = encomenda0.getData();
      assertNotNull(localDate0);
      assertEquals(2L, encomenda0.getId());
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      assertEquals(0, encomenda0.numeroArtigos());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(0L, encomenda0.getCodigo());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      
      try { 
        utilizador0.finalizaEncomenda(localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Long long0 = new Long((-582L));
      assertEquals((-582L), (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador("3<1Nlhf\"", "!", "3<1Nlhf\"", long0, "2h");
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("2h", utilizador0.getPassword());
      assertEquals("!", utilizador0.getNome());
      assertEquals((-582L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("3<1Nlhf\"", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("3<1Nlhf\"", utilizador0.getMorada());
      
      String string0 = utilizador0.getMorada();
      assertEquals("3<1Nlhf\"", string0);
      assertNotNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("2h", utilizador0.getPassword());
      assertEquals("!", utilizador0.getNome());
      assertEquals((-582L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("3<1Nlhf\"", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("3<1Nlhf\"", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Long long0 = new Long((-2795L));
      assertEquals((-2795L), (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "O artigo ");
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-2795L), utilizador0.getNif());
      assertEquals("O artigo ", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      
      String string0 = utilizador0.insereNovoArtigo("C\u00F3digo: ");
      assertEquals("C\u00F3digo: ", string0);
      assertNotNull(string0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-2795L), utilizador0.getNif());
      assertEquals("O artigo ", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = Utilizador.criaCodigo();
      assertEquals(1L, long0);
      
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = " n\u00E3o existe na encomenda";
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Utilizador utilizador0 = new Utilizador(" n\u00E3o existe na encomenda", " ,L>lk", " n\u00E3o existe na encomenda", long1, "");
      assertTrue(long1.equals((Object)long0));
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(" n\u00E3o existe na encomenda", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0L, utilizador0.getNif());
      assertEquals(" ,L>lk", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(" n\u00E3o existe na encomenda", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      
      Utilizador.setCodigo(1L);
      utilizador0.setN_vendidos((-1));
      assertTrue(long1.equals((Object)long0));
      assertEquals("", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(" n\u00E3o existe na encomenda", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0L, utilizador0.getNif());
      assertEquals(" ,L>lk", utilizador0.getNome());
      assertEquals(" n\u00E3o existe na encomenda", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1), utilizador0.getN_vendidos());
      
      utilizador0.setN_vendidos((-1));
      assertTrue(long1.equals((Object)long0));
      assertEquals("", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(" n\u00E3o existe na encomenda", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0L, utilizador0.getNif());
      assertEquals(" ,L>lk", utilizador0.getNome());
      assertEquals(" n\u00E3o existe na encomenda", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1), utilizador0.getN_vendidos());
      
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaVenda(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("", "{0flENFE!D!/{", "{0flENFE!D!/{", (Long) null, "C\u00F3digo: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      Utilizador utilizador1 = new Utilizador();
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      assertEquals(2L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(2L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(3L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(2L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(2L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(3L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      
      Encomenda encomenda0 = utilizador0.getCarrinho();
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(encomenda0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(0, encomenda0.numeroArtigos());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      assertEquals(3L, encomenda0.getCodigo());
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(1L, encomenda0.getId());
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      
      String string0 = utilizador0.insereNovoArtigo("Kk&zIW%{C6N~;1g4#f\"");
      assertEquals("Kk&zIW%{C6N~;1g4#f\"", string0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(string0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      
      Set<String> set0 = utilizador0.artigosCarrinho();
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(set0);
      assertFalse(set0.contains("Kk&zIW%{C6N~;1g4#f\""));
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<Long> set1 = utilizador0.getComprei();
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(set1);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      Set<String> set2 = utilizador0.getProdutosVender();
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(set2.equals((Object)set0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(set2, set0);
      assertNotNull(set2);
      assertTrue(set2.contains("Kk&zIW%{C6N~;1g4#f\""));
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      assertFalse(set2.isEmpty());
      assertEquals(1, set2.size());
      
      utilizador0.setDevolvidos(set1);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      utilizador0.setProdutosVender(set0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(set0.equals((Object)set2));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(set0, set2);
      assertFalse(set0.contains("Kk&zIW%{C6N~;1g4#f\""));
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      utilizador0.setMorada("ArtigoExistenteException");
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertEquals("ArtigoExistenteException", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      
      Set<String> set3 = utilizador0.removeCarrinho();
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(set3, set0);
      assertNotSame(set3, set2);
      assertNotNull(set3);
      assertFalse(set3.contains("ArtigoExistenteException"));
      assertEquals("ArtigoExistenteException", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      assertTrue(set3.isEmpty());
      assertEquals(0, set3.size());
      
      Fatura fatura0 = utilizador0.get1FaturaVenda((-1792L));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertNull(fatura0);
      assertEquals("ArtigoExistenteException", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      
      String string1 = utilizador0.imprimeFaturasVendas();
      assertEquals("", string1);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(string1);
      assertEquals("ArtigoExistenteException", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      
      String string2 = utilizador0.getMorada();
      assertEquals("ArtigoExistenteException", string2);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(string2);
      assertEquals("ArtigoExistenteException", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      
      long long0 = utilizador0.getNif();
      assertEquals((-1L), long0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertEquals("ArtigoExistenteException", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(3L, utilizador0.getCodigo());
      
      long long1 = Utilizador.criaCodigo();
      assertEquals(3L, long1);
      assertFalse(long1 == long0);
      
      String string3 = utilizador0.getPassword();
      assertEquals("n/d", string3);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(string3);
      assertEquals("ArtigoExistenteException", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(4L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador("Utilizador", "Utilizador", "Utilizador", long0, "Utilizador");
      assertNotNull(utilizador0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      
      boolean boolean0 = utilizador0.equals(long0);
      assertFalse(boolean0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      
      Set<String> set0 = utilizador0.artigosCarrinho();
      assertNotNull(set0);
      assertFalse(set0.contains("Utilizador"));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Map<Long, Fatura> map0 = utilizador0.getFaturasCompras();
      assertNotNull(map0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      utilizador0.setFaturasCompras(map0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Set<String> set1 = utilizador0.getProdutosVendidos();
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.contains("Utilizador"));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      utilizador0.setProdutosVender(set1);
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertFalse(set1.contains("Utilizador"));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      Utilizador utilizador1 = utilizador0.clone();
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(utilizador1);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals("Utilizador", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(1L, utilizador1.getNif());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("Utilizador", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getEmail());
      
      String string0 = utilizador1.toString();
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(string0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals("Utilizador", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(1L, utilizador1.getNif());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("Utilizador", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getEmail());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = utilizador1.equals(object0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Utilizador", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("Utilizador", utilizador0.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals("Utilizador", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(1L, utilizador1.getNif());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("Utilizador", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      
      Set<String> set0 = utilizador0.getProdutosVender();
      assertNotNull(set0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      utilizador0.setProdutosVender(set0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<String> set1 = utilizador0.getProdutosVender();
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      try { 
        utilizador0.pendenteToVendido("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      
      utilizador0.setMorada("aIV QDzq~!U'9@Q.Bf");
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("aIV QDzq~!U'9@Q.Bf", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      
      utilizador0.novoCarrinho();
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("aIV QDzq~!U'9@Q.Bf", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      
      utilizador0.novoCarrinho();
      assertEquals(3L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("aIV QDzq~!U'9@Q.Bf", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      
      try { 
        utilizador0.vendidoToaVenda("aIV QDzq~!U'9@Q.Bf");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo aIV QDzq~!U'9@Q.Bf n\u00E3o foi vendido
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Long long0 = new Long((-1016L));
      assertEquals((-1016L), (long)long0);
      assertNotNull(long0);
      
      Utilizador utilizador0 = new Utilizador((String) null, "yF>R'F5;+;^Az", (String) null, long0, "");
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1016L), utilizador0.getNif());
      assertEquals("yF>R'F5;+;^Az", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertNull(utilizador0.getMorada());
      assertNull(utilizador0.getEmail());
      
      Set<Long> set0 = utilizador0.getComprei();
      assertNotNull(set0);
      assertFalse(set0.contains(long0));
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1016L), utilizador0.getNif());
      assertEquals("yF>R'F5;+;^Az", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertNull(utilizador0.getMorada());
      assertNull(utilizador0.getEmail());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Fatura fatura0 = utilizador0.get1FaturaVenda((-1016L));
      assertNull(fatura0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1016L), utilizador0.getNif());
      assertEquals("yF>R'F5;+;^Az", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertNull(utilizador0.getMorada());
      assertNull(utilizador0.getEmail());
      
      utilizador0.setDevolvidos(set0);
      assertFalse(set0.contains(long0));
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1016L), utilizador0.getNif());
      assertEquals("yF>R'F5;+;^Az", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertNull(utilizador0.getMorada());
      assertNull(utilizador0.getEmail());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      
      Set<String> set0 = utilizador0.getProdutosVender();
      assertNotNull(set0);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      utilizador0.setNif((-2411L));
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-2411L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      
      Set<String> set1 = utilizador0.artigosCarrinho();
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-2411L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      try { 
        utilizador0.eliminaArtigo("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      utilizador0.setN_vendidos(0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      Set<String> set0 = utilizador0.getProdutosVender();
      assertNotNull(set0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      utilizador0.setPendentes(set0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      utilizador0.setN_vendidos((-1));
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1), utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaVenda(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      long long0 = 0L;
      Utilizador.setCodigo(0L);
      String string0 = "NUXitETJ";
      try { 
        Long.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      
      utilizador1.setNif((-451L));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals((-451L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      
      Set<String> set0 = utilizador1.artigosCarrinho();
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(set0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals((-451L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = utilizador0.imprimeFaturasVendas();
      assertEquals("", string0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(string0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      
      try { 
        utilizador1.pendenteToAvenda("EncomendaExistenteException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo EncomendaExistenteException n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getId());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getId());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(2L, utilizador1.getCodigo());
      
      Encomenda encomenda0 = utilizador0.getCarrinho();
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(encomenda0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals(0, encomenda0.numeroArtigos());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      assertEquals(1L, encomenda0.getId());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      
      String string0 = utilizador1.adicionaArtigo("Fatura");
      assertEquals("Fatura", string0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(string0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador0.getId());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(2L, utilizador1.getCodigo());
      
      try { 
        utilizador0.vendidoToaVenda(" Id dos artigos a vender: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Id dos artigos a vender:  n\u00E3o foi vendido
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      
      int int0 = (-1);
      utilizador0.setN_comprados((-1));
      assertEquals((-1), utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      
      try { 
        utilizador0.aVendaToPendente("O carrinho est\u00E1 vazio!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo O carrinho est\u00E1 vazio! n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      
      String string0 = utilizador1.getNome();
      assertEquals("n/d", string0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(string0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(map0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      utilizador1.setFaturasVendas(map0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Utilizador.setCodigo(0L);
      int int0 = utilizador0.getN_comprados();
      assertEquals(0, int0);
      assertNotSame(utilizador0, utilizador1);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      
      int int1 = utilizador1.compareTo(utilizador0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      
      int int2 = utilizador0.getN_comprados();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(utilizador0, utilizador1);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      utilizador1.adicionaFaturaComprador(true, 0L, 0, linkedHashSet0, 0.0, 0.0, 0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Set<String> set0 = utilizador0.getProdutosVender();
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      utilizador0.adicionaFaturaVendedor(true, 0, 0L, "n/d", 0L, true, (-11.75593), 0.0);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      
      String string1 = utilizador0.getMorada();
      assertEquals("n/d", string1);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(string1);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      
      try { 
        utilizador0.eliminaArtigo("\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo 
         //  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Long long0 = new Long(4419L);
      assertEquals(4419L, (long)long0);
      assertNotNull(long0);
      
      int int0 = Long.compareUnsigned(4419L, 4419L);
      assertEquals(0, int0);
      
      Utilizador utilizador0 = new Utilizador("$Ik|-X=", "", "XI!6", long0, "");
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(4419L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals("XI!6", utilizador0.getMorada());
      assertEquals("", utilizador0.getPassword());
      assertEquals("$Ik|-X=", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      long long1 = Long.max(0L, 0L);
      assertEquals(0L, long1);
      
      String string0 = utilizador0.insereNovoArtigo((String) null);
      assertFalse(long0.equals((Object)long1));
      assertNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(4419L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals("XI!6", utilizador0.getMorada());
      assertEquals("", utilizador0.getPassword());
      assertEquals("$Ik|-X=", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      String string1 = utilizador0.toString();
      assertFalse(long0.equals((Object)long1));
      assertNotNull(string1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(4419L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals("XI!6", utilizador0.getMorada());
      assertEquals("", utilizador0.getPassword());
      assertEquals("$Ik|-X=", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      assertFalse(long0.equals((Object)long1));
      assertNotNull(map0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(4419L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals("XI!6", utilizador0.getMorada());
      assertEquals("", utilizador0.getPassword());
      assertEquals("$Ik|-X=", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      utilizador0.setFaturasCompras(map0);
      assertFalse(long0.equals((Object)long1));
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(4419L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals("XI!6", utilizador0.getMorada());
      assertEquals("", utilizador0.getPassword());
      assertEquals("$Ik|-X=", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      long long2 = utilizador0.getId();
      assertEquals(1L, long2);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long2 == long1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(4419L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getNome());
      assertEquals("XI!6", utilizador0.getMorada());
      assertEquals("", utilizador0.getPassword());
      assertEquals("$Ik|-X=", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      try { 
        utilizador0.pendenteToVendido("O artigo ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo O artigo  n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      long long0 = Utilizador.criaCodigo();
      assertEquals(1L, long0);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      
      Map<Long, Fatura> map0 = utilizador0.getFaturasCompras();
      assertNotNull(map0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean0 = utilizador0.equals(map0);
      assertFalse(boolean0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      utilizador0.adicionaFaturaVendedor(true, 0L, 0L, " Data de entrega: N/A", 0.0, true, 1.0, (-1.0));
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      
      Set<String> set0 = utilizador0.getPendentes();
      assertNotNull(set0);
      assertFalse(set0.contains(" Data de entrega: N/A"));
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Long> set1 = utilizador0.getComprei();
      assertNotNull(set1);
      assertFalse(set1.contains(0L));
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      utilizador0.setProdutosVendidos(set0);
      assertFalse(set0.contains(" Data de entrega: N/A"));
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      utilizador0.novoCarrinho();
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      
      utilizador0.setPendentes(set0);
      assertFalse(set0.contains(" Data de entrega: N/A"));
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Long> set2 = utilizador0.getDevolvidos();
      assertTrue(set2.equals((Object)set1));
      assertNotSame(set2, set1);
      assertNotNull(set2);
      assertFalse(set2.contains(0L));
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      
      utilizador0.setDevolvidos(set2);
      assertTrue(set2.equals((Object)set1));
      assertNotSame(set2, set1);
      assertFalse(set2.contains(0L));
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(3L, utilizador0.getCodigo());
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      
      utilizador0.setEmail("+,3G\"@=rJD?{z");
      assertEquals(2L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("+,3G\"@=rJD?{z", utilizador0.getEmail());
      assertEquals(3L, utilizador0.getCodigo());
      
      try { 
        utilizador0.compreiToDevolvido((-1L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A encomenda -1 n\u00E3o foi comprada
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      
      Period period0 = Period.ofWeeks(0);
      assertNotNull(period0);
      
      Period period1 = period0.withMonths(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      
      IsoChronology isoChronology0 = period1.getChronology();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      Period period2 = period0.withMonths(0);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertSame(period2, period0);
      assertSame(period2, period1);
      assertNotNull(period2);
      
      ZoneId zoneId0 = zoneOffset0.normalized();
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertNotNull(zoneId0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      assertSame(period0, period1);
      assertSame(period0, period2);
      assertSame(period1, period2);
      assertSame(period1, period0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertNotNull(localDate0);
      
      try { 
        utilizador0.finalizaEncomenda(localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Utilizador utilizador0 = new Utilizador("@<t3p", "@<t3p", "@<t3p", long1, "cd5_Okr\"P!cwwK&};");
      assertTrue(long1.equals((Object)long0));
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("@<t3p", utilizador0.getEmail());
      assertEquals("@<t3p", utilizador0.getMorada());
      assertEquals("@<t3p", utilizador0.getNome());
      assertEquals("cd5_Okr\"P!cwwK&};", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      
      String string0 = utilizador0.imprimeFaturasCompras();
      assertEquals("", string0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(string0);
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("@<t3p", utilizador0.getEmail());
      assertEquals("@<t3p", utilizador0.getMorada());
      assertEquals("@<t3p", utilizador0.getNome());
      assertEquals("cd5_Okr\"P!cwwK&};", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      
      long long2 = utilizador0.getId();
      assertEquals(1L, long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long2 == long0);
      assertEquals(1L, utilizador0.getNif());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("@<t3p", utilizador0.getEmail());
      assertEquals("@<t3p", utilizador0.getMorada());
      assertEquals("@<t3p", utilizador0.getNome());
      assertEquals("cd5_Okr\"P!cwwK&};", utilizador0.getPassword());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador0.getCodigo());
      
      try { 
        utilizador0.aVendaToPendente("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      String string0 = utilizador0.adicionaArtigo("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      utilizador0.setNif(1L);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      int int0 = utilizador0.getN_vendidos();
      assertEquals(0, int0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      String string1 = utilizador0.getNome();
      assertEquals("n/d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      boolean boolean0 = false;
      long long0 = 0L;
      String string2 = utilizador0.imprimeFaturasVendas();
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      
      long long1 = (-5228L);
      Map<Long, Fatura> map0 = utilizador0.getFaturasCompras();
      assertNotNull(map0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Set<String> set0 = utilizador0.getProdutosVendidos();
      assertNotNull(set0);
      assertFalse(set0.contains(string2));
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getNif());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(1L, utilizador1.getNif());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      
      // Undeclared exception!
      try { 
        utilizador0.equals(utilizador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      
      String string0 = utilizador0.adicionaArtigo("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      
      utilizador0.setNif(1L);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      
      int int0 = utilizador0.getN_vendidos();
      assertEquals(0, int0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      
      String string1 = utilizador0.getNome();
      assertEquals("n/d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      
      boolean boolean0 = true;
      long long0 = 0L;
      String string2 = utilizador0.imprimeFaturasVendas();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      
      long long1 = (-5228L);
      Map<Long, Fatura> map0 = utilizador0.getFaturasCompras();
      assertNotNull(map0);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Set<String> set0 = utilizador0.getProdutosVendidos();
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(1L, utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(1L, utilizador1.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      
      // Undeclared exception!
      try { 
        utilizador0.equals(utilizador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      long long1 = Long.divideUnsigned((-1L), 2584L);
      assertEquals(7138832845862829L, long1);
      
      Utilizador utilizador0 = new Utilizador((String) null, "V6y.{'UjC'#[uz", (String) null, long0, "Encomenda");
      assertFalse(long0.equals((Object)long1));
      assertNotNull(utilizador0);
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertFalse(long0.equals((Object)long1));
      assertNotNull(utilizador1);
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertNull(utilizador1.getMorada());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("V6y.{'UjC'#[uz", utilizador1.getNome());
      assertEquals("Encomenda", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      assertNull(utilizador1.getEmail());
      
      String string0 = utilizador1.getEmail();
      assertFalse(long0.equals((Object)long1));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNull(string0);
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertNull(utilizador1.getMorada());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("V6y.{'UjC'#[uz", utilizador1.getNome());
      assertEquals("Encomenda", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      assertNull(utilizador1.getEmail());
      
      int int0 = utilizador0.compareTo(utilizador1);
      assertEquals(0, int0);
      assertFalse(long0.equals((Object)long1));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertNull(utilizador1.getMorada());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("V6y.{'UjC'#[uz", utilizador1.getNome());
      assertEquals("Encomenda", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      assertNull(utilizador1.getEmail());
      
      Map<Long, Fatura> map0 = utilizador1.getFaturasVendas();
      assertFalse(long0.equals((Object)long1));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(map0);
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertNull(utilizador1.getMorada());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("V6y.{'UjC'#[uz", utilizador1.getNome());
      assertEquals("Encomenda", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      assertNull(utilizador1.getEmail());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      utilizador1.setFaturasCompras(map0);
      assertFalse(long0.equals((Object)long1));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertNull(utilizador1.getMorada());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("V6y.{'UjC'#[uz", utilizador1.getNome());
      assertEquals("Encomenda", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      assertNull(utilizador1.getEmail());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Set<String> set0 = utilizador1.artigosCarrinho();
      assertFalse(long0.equals((Object)long1));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(set0);
      assertFalse(set0.contains("Encomenda"));
      assertNull(utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0L, utilizador0.getNif());
      assertNull(utilizador0.getMorada());
      assertEquals("V6y.{'UjC'#[uz", utilizador0.getNome());
      assertEquals("Encomenda", utilizador0.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertNull(utilizador1.getMorada());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals(0L, utilizador1.getNif());
      assertEquals("V6y.{'UjC'#[uz", utilizador1.getNome());
      assertEquals("Encomenda", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      assertNull(utilizador1.getEmail());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Utilizador.criaCodigo();
      Long long0 = new Long((-4040L));
      String string0 = null;
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      Long.max((-4040L), (-4040L));
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.imprimeFaturasCompras();
      boolean boolean0 = false;
      utilizador1.setNome("(II-cAVM<y");
      utilizador1.adicionaFaturaVendedor(false, 1L, 163L, "", (-3750.098), false, 163L, (-4139.588586));
      Set<Long> set0 = utilizador0.getDevolvidos();
      utilizador1.setComprei(set0);
      // Undeclared exception!
      try { 
        utilizador1.imprime1FaturaCompra(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      Set<Long> set0 = utilizador0.getComprei();
      utilizador1.setDevolvidos(set0);
      utilizador1.compareTo(utilizador0);
      String string0 = "tbO]43";
      utilizador0.clone();
      try { 
        utilizador0.pendenteToAvenda("tbO]43");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo tbO]43 n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }
}
