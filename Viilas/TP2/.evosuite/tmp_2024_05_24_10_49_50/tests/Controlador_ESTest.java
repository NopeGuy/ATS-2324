/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 09:51:31 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controlador_ESTest extends Controlador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(menu0).atacadores();
      doReturn(0).when(menu0).pedir_ano_colecao(any(java.time.LocalDate.class));
      doReturn((String) null).when(menu0).pedir_cor();
      doReturn((String) null).when(menu0).pedir_descricao();
      doReturn(0).when(menu0).pedir_estado();
      doReturn((String) null).when(menu0).pedir_marca();
      doReturn(false).when(menu0).pedir_novo();
      doReturn(0).when(menu0).pedir_numero_utlizador();
      doReturn(0.0).when(menu0).pedir_preco();
      doReturn(false).when(menu0).pedir_premium();
      doReturn(0).when(menu0).pedir_tamanho_sapatilha();
      doReturn(0L, 0L, 0L, 0L, 0L).when(menu0).pedir_transportadora();
      doReturn((String) null).when(menu0).toString();
      Vintage vintage0 = mock(Vintage.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(vintage0).existe_transpotadoraNormal(anyLong());
      doReturn((LocalDate) null).when(vintage0).getData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(vintage0).imprimeTransportadorasNormais();
      doReturn((String) null).when(vintage0).toString();
      Controlador controlador0 = new Controlador(menu0, vintage0);
      Controlador controlador1 = new Controlador(controlador0);
      // Undeclared exception!
      controlador1.escolha_venda_sapatilhas();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_query();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_sapatilhas();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.parsing();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_pesquica();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(menu0).pedir_ano_colecao(any(java.time.LocalDate.class));
      doReturn((String) null).when(menu0).pedir_artigo_adicionar();
      doReturn((String) null).when(menu0).pedir_descricao();
      doReturn(0).when(menu0).pedir_estado();
      doReturn((String) null).when(menu0).pedir_marca();
      doReturn((String) null).when(menu0).pedir_material();
      doReturn(false).when(menu0).pedir_novo();
      doReturn(0).when(menu0).pedir_numero_utlizador();
      doReturn(0.0).when(menu0).pedir_preco();
      doReturn(false).when(menu0).pedir_premium();
      doReturn(0).when(menu0).pedir_tamanho_mala();
      doReturn(0L, 0L, 0L, 0L, 0L).when(menu0).pedir_transportadora();
      Vintage vintage0 = mock(Vintage.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(vintage0).existeTranspotadora(anyLong());
      doReturn((LocalDate) null).when(vintage0).getData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(vintage0).imprimeTransportadoras();
      doReturn((String) null).when(vintage0).imprimeTransportadorasNormais();
      Controlador controlador0 = new Controlador(menu0, vintage0);
      controlador0.adicionar_artigo_carrinho();
      // Undeclared exception!
      controlador0.escolha_venda_malas();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_venda();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vintage vintage0 = mock(Vintage.class, new ViolatedAssumptionAnswer());
      Controlador controlador0 = new Controlador((Menu) null, vintage0);
      // Undeclared exception!
      try { 
        controlador0.escolha_pesquica();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      Vintage vintage0 = mock(Vintage.class, new ViolatedAssumptionAnswer());
      doReturn((LocalDate) null).when(vintage0).getData();
      Controlador controlador0 = new Controlador(menu0, vintage0);
      // Undeclared exception!
      try { 
        controlador0.inicio_controlador();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(menu0).pedir_local_ficheiro();
      Vintage vintage0 = mock(Vintage.class, new ViolatedAssumptionAnswer());
      doReturn((LocalDate) null).when(vintage0).getData();
      Controlador controlador0 = new Controlador(menu0, vintage0);
      // Undeclared exception!
      try { 
        controlador0.parsing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Controlador controlador0 = null;
      try {
        controlador0 = new Controlador((Controlador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vintage vintage0 = mock(Vintage.class, new ViolatedAssumptionAnswer());
      Controlador controlador0 = new Controlador((Menu) null, vintage0);
      // Undeclared exception!
      try { 
        controlador0.escolha_venda();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.login();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
