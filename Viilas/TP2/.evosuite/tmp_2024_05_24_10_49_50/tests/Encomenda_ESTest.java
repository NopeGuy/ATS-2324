/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 09:54:51 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.chrono.MinguoDate;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      encomenda0.setIdComprador(2);
      LocalDate localDate0 = encomenda0.getData();
      encomenda0.setDataEntrega(localDate0);
      encomenda0.setDataEntrega(localDate0);
      encomenda0.removeTudo();
      LocalDate localDate1 = encomenda0.getDataEntrega();
      encomenda0.getEncomenda();
      encomenda0.equals((Object) null);
      encomenda0.numeroArtigos();
      Encomenda.getDiasDevolver();
      Encomenda.setDiasDevolver(79);
      Estado estado0 = Estado.Expedida;
      encomenda0.getEncomenda();
      encomenda0.setEstado(estado0);
      encomenda0.toString();
      encomenda0.podeDevolver(localDate1);
      encomenda0.podeDevolver(localDate1);
      encomenda0.getData();
      LocalDate localDate2 = encomenda0.getDataEntrega();
      encomenda0.setId((-4035L));
      Estado estado1 = Estado.Finalizada;
      encomenda0.setEstado(estado1);
      encomenda0.numeroArtigos();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.toString();
      encomenda1.getEncomenda();
      encomenda0.setData(localDate1);
      encomenda1.getId();
      encomenda1.defineTamanho();
      encomenda0.setData(localDate2);
      encomenda1.equals(encomenda0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.getEncomenda();
      Object object0 = new Object();
      encomenda0.setEncomenda(set0);
      String string0 = null;
      encomenda0.adicionaArtigo((String) null);
      encomenda0.equals(object0);
      encomenda0.defineTamanho();
      encomenda0.defineTamanho();
      encomenda0.defineTamanho();
      encomenda0.getEstado();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.removeArtigo((String) null);
      encomenda1.defineTamanho();
      encomenda0.removeTudo();
      // Undeclared exception!
      try { 
        encomenda1.equals(encomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, 0L, dimensao0, localDate0);
      encomenda0.setId(0L);
      encomenda0.defineTamanho();
      Set<String> set1 = encomenda0.removeTudo();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setEncomenda(set1);
      encomenda1.setDimensao(dimensao0);
      encomenda1.getEncomenda();
      encomenda1.equals(dimensao0);
      encomenda0.defineTamanho();
      encomenda0.toString();
      encomenda0.getDimensao();
      encomenda0.getEstado();
      encomenda0.getEncomenda();
      encomenda1.getEstado();
      encomenda1.getEstado();
      encomenda0.getEstado();
      Object object0 = new Object();
      encomenda0.equals(object0);
      encomenda1.adicionaArtigo("Encomenda:: { Artigos: java.util.HashSet@0000000004 C\u00F3digo: 0 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A}");
      encomenda0.adicionaArtigo("t$&uA}d*CJ#8a?");
      Encomenda.setDiasDevolver(440);
      encomenda0.getEstado();
      Encomenda encomenda2 = encomenda0.clone();
      encomenda2.getEncomenda();
      encomenda1.getEstado();
      encomenda1.getEstado();
      encomenda0.equals("t$&uA}d*CJ#8a?");
      LocalDate localDate1 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        encomenda2.podeDevolver(localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      ZoneId.getAvailableZoneIds();
      encomenda0.getIdComprador();
      Estado estado0 = Estado.Expedida;
      encomenda1.getEstado();
      encomenda1.setEstado(estado0);
      encomenda0.equals(encomenda1);
      encomenda1.defineTamanho();
      Encomenda.getCodigo();
      encomenda1.clone();
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Estado estado0 = Estado.Finalizada;
      encomenda1.equals(estado0);
      encomenda1.getEncomenda();
      encomenda1.setEstado(estado0);
      encomenda0.getEncomenda();
      encomenda1.getIdComprador();
      encomenda0.equals(encomenda1);
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      encomenda0.setIdComprador(2);
      LocalDate localDate0 = encomenda0.getData();
      encomenda0.setDataEntrega(localDate0);
      encomenda0.setDataEntrega(localDate0);
      encomenda0.removeTudo();
      LocalDate localDate1 = encomenda0.getDataEntrega();
      encomenda0.getEncomenda();
      encomenda0.equals((Object) null);
      encomenda0.numeroArtigos();
      Encomenda.getDiasDevolver();
      Encomenda.setDiasDevolver(0);
      Estado estado0 = Estado.Finalizada;
      encomenda0.getEncomenda();
      encomenda0.setEstado(estado0);
      encomenda0.toString();
      encomenda0.podeDevolver(localDate1);
      encomenda0.podeDevolver(localDate1);
      encomenda0.getData();
      LocalDate localDate2 = encomenda0.getDataEntrega();
      encomenda0.setId((-4035L));
      Estado estado1 = Estado.Finalizada;
      encomenda0.setEstado(estado1);
      encomenda0.numeroArtigos();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.toString();
      encomenda1.getEncomenda();
      encomenda0.setData(localDate1);
      encomenda1.getId();
      encomenda1.defineTamanho();
      encomenda0.setData(localDate2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda.setCodigo(0L);
      encomenda0.getIdComprador();
      encomenda0.clone();
      Encomenda.setDiasDevolver(0);
      Encomenda.getCodigo();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda.criaCodigo();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("zkv");
      encomenda0.setEncomenda(linkedHashSet0);
      encomenda0.setDataEntrega(localDate0);
      encomenda0.podeDevolver(localDate0);
      encomenda0.getId();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.removeArtigo("zkv");
      encomenda0.numeroArtigos();
      encomenda0.adicionaArtigo(" Dimens\u00E3o: ");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      encomenda0.setIdComprador(2);
      LocalDate localDate0 = encomenda0.getData();
      encomenda0.setDataEntrega(localDate0);
      encomenda0.setDataEntrega(localDate0);
      encomenda0.removeTudo();
      LocalDate localDate1 = encomenda0.getDataEntrega();
      encomenda0.getEncomenda();
      encomenda0.equals((Object) null);
      encomenda0.numeroArtigos();
      Encomenda.getDiasDevolver();
      Encomenda.setDiasDevolver(79);
      Estado estado0 = Estado.Finalizada;
      encomenda0.getEncomenda();
      encomenda0.setEstado(estado0);
      encomenda0.toString();
      encomenda0.podeDevolver(localDate1);
      encomenda0.podeDevolver(localDate1);
      encomenda0.getData();
      encomenda0.getDataEntrega();
      encomenda0.setId(0);
      Estado estado1 = Estado.Expedida;
      encomenda0.setEstado(estado1);
      encomenda0.numeroArtigos();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.toString();
      encomenda1.getEncomenda();
      encomenda0.setData(localDate1);
      encomenda1.getId();
      encomenda1.defineTamanho();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(";]E#ml");
      linkedHashSet0.add("7Rzg{B>&BN7");
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2237L);
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 2237L, dimensao0, localDate0);
      encomenda0.defineTamanho();
      encomenda0.setId((-756L));
      Encomenda.setCodigo(2237L);
      linkedHashSet0.add("Dj@l/_;Fy:1iSE+O#z");
      encomenda0.defineTamanho();
      linkedHashSet0.add("5DTkk[,oA0Zm*Rs0:T");
      encomenda0.getDimensao();
      Encomenda.getCodigo();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      try { 
        encomenda0.removeArtigo("Fuom]W !]H_hW*VrE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Fuom]W !]H_hW*VrE n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setId(0L);
      Encomenda encomenda1 = encomenda0.clone();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.CHINA;
      locale0.getDisplayVariant(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      encomenda1.setEncomenda(set0);
      Encomenda.criaCodigo();
      encomenda0.toString();
      encomenda0.getDimensao();
      encomenda0.getDimensao();
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        encomenda1.podeDevolver(localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Dimensao dimensao0 = Dimensao.Medio;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, (-1228L), dimensao0, localDate0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Encomenda encomenda2 = encomenda0.clone();
      MockLocalDate.ofEpochDay((-1228L));
      encomenda1.clone();
      System.setCurrentTimeMillis((-2144164506L));
      encomenda2.equals(encomenda1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.parallelStream();
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1100L));
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 1L, dimensao0, localDate0);
      Estado estado0 = Estado.Pendente;
      encomenda0.setEstado(estado0);
      encomenda0.setEncomenda(linkedHashSet0);
      encomenda0.getId();
      Set<String> set0 = encomenda0.removeTudo();
      linkedHashSet0.containsAll(set0);
      encomenda0.setData(localDate0);
      linkedHashSet0.add("gJ#HA\"xP%O_2,");
      encomenda0.setIdComprador(0L);
      encomenda0.equals(estado0);
      encomenda0.setEstado(estado0);
      encomenda0.setDimensao(dimensao0);
      Dimensao dimensao1 = Dimensao.Grande;
      encomenda0.defineTamanho();
      linkedHashSet0.add("#%*<XhsH7$;N");
      Encomenda.setCodigo((-1100L));
      encomenda0.setId((-1100L));
      encomenda0.setDimensao(dimensao1);
      encomenda0.removeTudo();
      encomenda0.setDimensao(dimensao0);
      encomenda0.numeroArtigos();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.removeTudo();
      Encomenda encomenda2 = encomenda1.clone();
      Encomenda.setDiasDevolver(0);
      Encomenda.setCodigo((-2906L));
      encomenda2.removeTudo();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      encomenda0.equals(minguoDate0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.defineTamanho();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Set<String> set0 = encomenda1.removeTudo();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda2 = new Encomenda(set0, (-1L), dimensao0, localDate0);
      encomenda2.setIdComprador((-1L));
      Encomenda encomenda3 = encomenda2.clone();
      encomenda3.getEncomenda();
      encomenda1.adicionaArtigo((String) null);
      encomenda2.setDataEntrega(localDate0);
      encomenda2.equals(encomenda0);
      encomenda0.adicionaArtigo("Grande");
      encomenda3.setDataEntrega(localDate0);
      encomenda2.removeTudo();
      Encomenda.criaCodigo();
      encomenda2.getDimensao();
      encomenda2.removeTudo();
      encomenda3.toString();
      encomenda3.defineTamanho();
      System.setCurrentTimeMillis((-1038L));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Object object0 = new Object();
      encomenda0.setDataEntrega((LocalDate) null);
      encomenda0.equals(object0);
      Encomenda.setCodigo(0L);
      long long0 = new Long(0L);
      encomenda0.clone();
      Encomenda.criaCodigo();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getIdComprador();
      Encomenda encomenda1 = new Encomenda();
      Encomenda.setDiasDevolver(0);
      Encomenda.getDiasDevolver();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      encomenda0.setIdComprador(2);
      LocalDate localDate0 = encomenda0.getData();
      encomenda0.setDataEntrega(localDate0);
      encomenda0.setDataEntrega(localDate0);
      encomenda0.removeTudo();
      LocalDate localDate1 = encomenda0.getDataEntrega();
      encomenda0.getEncomenda();
      encomenda0.equals((Object) null);
      encomenda0.numeroArtigos();
      Encomenda.getDiasDevolver();
      Encomenda.setDiasDevolver(79);
      Estado estado0 = Estado.Finalizada;
      encomenda0.getEncomenda();
      encomenda0.setEstado(estado0);
      encomenda0.toString();
      encomenda0.podeDevolver(localDate1);
      encomenda0.podeDevolver(localDate1);
      encomenda0.getData();
      LocalDate localDate2 = encomenda0.getDataEntrega();
      encomenda0.setId((-4035L));
      Estado estado1 = Estado.Finalizada;
      encomenda0.setEstado(estado1);
      encomenda0.numeroArtigos();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.toString();
      encomenda1.getEncomenda();
      encomenda0.setData(localDate1);
      encomenda1.getId();
      encomenda1.defineTamanho();
      encomenda0.setData(localDate2);
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertEquals(2L, encomenda0.getIdComprador());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.adicionaArtigo("");
      encomenda0.equals(encomenda1);
      encomenda1.getEstado();
      encomenda0.getEstado();
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Encomenda.setDiasDevolver(0);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getEstado();
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda.setCodigo((-2026L));
      Encomenda.criaCodigo();
      Dimensao dimensao0 = Dimensao.Pequeno;
      encomenda1.setDimensao(dimensao0);
      Set<String> set0 = new LinkedHashSet<String>();
      encomenda1.toString();
      encomenda0.setId(2);
      Dimensao dimensao1 = Dimensao.Pequeno;
      encomenda0.setDimensao(dimensao1);
      encomenda0.defineTamanho();
      encomenda0.adicionaArtigo("");
      Dimensao dimensao2 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 2);
      Encomenda.setCodigo((-2026L));
      encomenda0.setDataEntrega(localDate0);
      encomenda0.setDimensao(dimensao2);
      encomenda0.getId();
      encomenda0.getEncomenda();
      Encomenda.getCodigo();
      encomenda0.setIdComprador(2L);
      encomenda1.setIdComprador((-2992L));
      encomenda1.getDataEntrega();
      try { 
        encomenda0.adicionaArtigo("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  j\u00E1 existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockLocalDate.ofYearDay(2, 2);
      Encomenda encomenda0 = new Encomenda();
      Dimensao dimensao0 = Dimensao.Medio;
      encomenda0.setDimensao(dimensao0);
      // Undeclared exception!
      try { 
        encomenda0.setEncomenda((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getIdComprador();
      encomenda0.equals(encomenda0);
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Dimensao dimensao0 = Dimensao.Medio;
      encomenda1.setDimensao(dimensao0);
      encomenda0.setDimensao(dimensao0);
      encomenda1.adicionaArtigo((String) null);
      encomenda1.removeTudo();
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMonths(138L);
      period1.getChronology();
      // Undeclared exception!
      try { 
        ZoneOffset.of((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offsetId
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = null;
      encomenda0.setData((LocalDate) null);
      encomenda0.removeTudo();
      encomenda0.setId(0L);
      Estado estado0 = Estado.Finalizada;
      encomenda0.setEstado(estado0);
      Dimensao dimensao0 = Dimensao.Grande;
      encomenda0.toString();
      encomenda0.setDimensao(dimensao0);
      encomenda0.setIdComprador(0L);
      encomenda0.getDataEntrega();
      encomenda0.toString();
      Estado estado1 = Estado.Finalizada;
      encomenda0.setEstado(estado1);
      Dimensao dimensao1 = Dimensao.Grande;
      encomenda0.setDimensao(dimensao1);
      encomenda0.setIdComprador(1450L);
      Encomenda.setCodigo((-1L));
      encomenda0.getIdComprador();
      encomenda0.adicionaArtigo((String) null);
      encomenda0.adicionaArtigo("Encomenda:: { Artigos: java.util.HashSet@0000000002 C\u00F3digo: 0 Dimens\u00E3o: Pequeno Estado: Finalizada Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A}");
      encomenda0.setId(1L);
      encomenda0.removeArtigo("Encomenda:: { Artigos: java.util.HashSet@0000000002 C\u00F3digo: 0 Dimens\u00E3o: Pequeno Estado: Finalizada Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A}");
      // Undeclared exception!
      try { 
        encomenda0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      LocalDate localDate0 = encomenda1.getData();
      encomenda0.setDataEntrega(localDate0);
      Set<String> set0 = encomenda1.removeTudo();
      encomenda0.setId((-1980L));
      encomenda0.setEncomenda(set0);
      encomenda1.adicionaArtigo("");
      Set<String> set1 = encomenda1.getEncomenda();
      encomenda1.setEncomenda(set1);
      Set<String> set2 = encomenda1.getEncomenda();
      encomenda0.setData(localDate0);
      encomenda0.getDataEntrega();
      encomenda0.setIdComprador(826L);
      encomenda1.numeroArtigos();
      Encomenda.criaCodigo();
      encomenda0.adicionaArtigo("");
      encomenda1.toString();
      Encomenda.getCodigo();
      Object object0 = new Object();
      encomenda1.equals(object0);
      encomenda0.numeroArtigos();
      Encomenda.criaCodigo();
      encomenda0.getId();
      encomenda1.setEncomenda(set2);
      Encomenda.getCodigo();
      encomenda0.getId();
      encomenda0.removeTudo();
      encomenda1.removeArtigo("");
      encomenda1.setDataEntrega(localDate0);
      encomenda1.getEncomenda();
      encomenda0.removeTudo();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 0L, dimensao0, localDate0);
      linkedHashSet0.add("%");
      encomenda0.toString();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getIdComprador();
      long long0 = 1123L;
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, "3>%KYN|I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Set<String> set0 = null;
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.ofYearDay(2, 2);
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Set<String>) null, 615L, dimensao0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("D");
      linkedHashSet0.add("k092-]cO*n06]udEL4");
      Dimensao dimensao0 = Dimensao.Pequeno;
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, (-1361L), dimensao0, (LocalDate) null);
      encomenda0.getData();
      encomenda0.getId();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Encomenda.setDiasDevolver(0);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getEstado();
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda.setCodigo((-2026L));
      Encomenda.criaCodigo();
      Dimensao dimensao0 = Dimensao.Pequeno;
      encomenda1.setDimensao(dimensao0);
      encomenda1.getEncomenda();
      encomenda1.toString();
      encomenda0.setId(2);
      Dimensao dimensao1 = Dimensao.Pequeno;
      encomenda0.setDimensao(dimensao1);
      encomenda0.adicionaArtigo("");
      Dimensao dimensao2 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 2);
      Encomenda.setCodigo((-2026L));
      encomenda0.setDataEntrega(localDate0);
      encomenda0.setDimensao(dimensao2);
      encomenda0.getId();
      encomenda0.getEncomenda();
      Encomenda.getCodigo();
      encomenda0.setIdComprador(2L);
      encomenda1.setIdComprador((-2992L));
      encomenda1.getDataEntrega();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.parallelStream();
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1100L));
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 1L, dimensao0, localDate0);
      Estado estado0 = Estado.Pendente;
      encomenda0.setEstado(estado0);
      encomenda0.setEncomenda(linkedHashSet0);
      encomenda0.getId();
      Set<String> set0 = encomenda0.removeTudo();
      linkedHashSet0.containsAll(set0);
      encomenda0.setData(localDate0);
      linkedHashSet0.add("gJ#HA\"xP%O_2,");
      encomenda0.setIdComprador(0L);
      encomenda0.equals(estado0);
      encomenda0.setEstado(estado0);
      encomenda0.setDimensao(dimensao0);
      Dimensao dimensao1 = Dimensao.Grande;
      encomenda0.defineTamanho();
      linkedHashSet0.add("#%*<XhsH7$;N");
      encomenda0.setId((-1100L));
      encomenda0.setDimensao(dimensao1);
      encomenda0.removeTudo();
      encomenda0.setDimensao(dimensao0);
      encomenda0.numeroArtigos();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.removeTudo();
      Encomenda encomenda2 = encomenda1.clone();
      Encomenda.setDiasDevolver(0);
      Encomenda.setCodigo((-2906L));
      encomenda2.removeTudo();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.removeTudo();
      encomenda0.setEncomenda(set0);
      encomenda0.removeTudo();
      encomenda0.toString();
      Encomenda.setCodigo((-3430L));
      encomenda0.setId((-3430L));
      encomenda0.defineTamanho();
      encomenda0.removeTudo();
      encomenda0.getId();
      Object object0 = null;
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay((-1), (-1));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -1
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.getEncomenda();
      encomenda0.setId((-2109L));
      encomenda0.setIdComprador((-2109L));
      encomenda0.getEncomenda();
      encomenda0.getDimensao();
      encomenda0.setEncomenda(set0);
      encomenda0.equals((Object) null);
      encomenda0.setId(0L);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setIdComprador(1413L);
      encomenda0.removeTudo();
      Encomenda.setDiasDevolver((-1081));
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      encomenda0.setData(localDate0);
      encomenda0.clone();
      encomenda0.setId(2641L);
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda.getDiasDevolver();
      encomenda0.setData(localDate0);
      encomenda1.setId(1L);
      encomenda1.toString();
      encomenda1.setId(2641L);
      encomenda0.getData();
      Encomenda.criaCodigo();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 2571L, dimensao0, localDate0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getDimensao();
      linkedHashSet0.add("L|.NLp7js#V)[");
      Encomenda.setCodigo(0L);
      linkedHashSet0.clear();
      Estado estado0 = Estado.Pendente;
      encomenda1.setEstado(estado0);
      linkedHashSet0.add("m|i;]d{1)>(Vst94%U");
      encomenda1.numeroArtigos();
      encomenda1.removeTudo();
      encomenda1.getDataEntrega();
      Encomenda.setDiasDevolver(180);
      encomenda1.adicionaArtigo("m|i;]d{1)>(Vst94%U");
      encomenda0.setId(2571L);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 197L, dimensao0, localDate0);
      encomenda0.getIdComprador();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setIdComprador(1L);
      Dimensao dimensao0 = Dimensao.Pequeno;
      encomenda0.removeTudo();
      encomenda0.setDimensao(dimensao0);
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = MockLocalDate.now();
      encomenda0.setData(localDate0);
      Encomenda.criaCodigo();
      encomenda0.setIdComprador(0L);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      encomenda0.setEncomenda(linkedHashSet0);
      encomenda0.setDataEntrega(localDate0);
      Dimensao dimensao0 = Dimensao.Medio;
      encomenda0.setDimensao(dimensao0);
      encomenda0.podeDevolver(localDate0);
      encomenda0.getId();
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      encomenda0.removeTudo();
      encomenda0.getDataEntrega();
      encomenda0.numeroArtigos();
      encomenda0.getDimensao();
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda.setCodigo(0L);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getEncomenda();
      encomenda0.numeroArtigos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      encomenda0.setEncomenda(set0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.adicionaArtigo("");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setId((-645L));
      encomenda1.getIdComprador();
      encomenda0.toString();
      encomenda1.getDataEntrega();
      Dimensao dimensao0 = Dimensao.Medio;
      encomenda1.setDimensao(dimensao0);
      encomenda1.equals(encomenda0);
      encomenda1.setIdComprador((-2068L));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getId();
      encomenda0.defineTamanho();
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda.setDiasDevolver((-2664));
      encomenda0.toString();
      encomenda1.getDataEntrega();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      long long0 = 0L;
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, 0L, dimensao0, localDate0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.clone();
      encomenda0.getEncomenda();
      Estado estado0 = Estado.Expedida;
      encomenda0.setEstado(estado0);
      Encomenda.setCodigo(0L);
      // Undeclared exception!
      try { 
        encomenda0.podeDevolver(localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda.setCodigo(772L);
      encomenda0.defineTamanho();
      Dimensao dimensao0 = Dimensao.Grande;
      encomenda0.setDimensao(dimensao0);
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      try { 
        encomenda0.removeArtigo(" j\u00E1 existe na encomenda");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  j\u00E1 existe na encomenda n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3106L);
      // Undeclared exception!
      try { 
        encomenda1.podeDevolver(localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Estado estado0 = Estado.Expedida;
      encomenda1.setEstado(estado0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda.getCodigo();
      Encomenda encomenda0 = new Encomenda();
      Dimensao dimensao0 = Dimensao.Grande;
      encomenda0.setDimensao(dimensao0);
      encomenda0.removeTudo();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getDataEntrega();
      encomenda0.equals("");
      Encomenda.setCodigo(787L);
      encomenda0.getIdComprador();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.getEncomenda();
      encomenda1.getIdComprador();
      // Undeclared exception!
      try { 
        encomenda0.equals(encomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 0L, dimensao0, localDate0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      Encomenda.criaCodigo();
      encomenda0.clone();
      encomenda0.getEncomenda();
      try { 
        encomenda0.removeArtigo("Encomenda:: { Artigos: java.util.HashSet@0000000002 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Encomenda:: { Artigos: java.util.HashSet@0000000002 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A} n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getData();
      Dimensao dimensao0 = Dimensao.Medio;
      encomenda0.setDimensao(dimensao0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getDimensao();
      encomenda0.adicionaArtigo("8]3P)40m;9u2i");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.defineTamanho();
      LocalDate localDate0 = MockLocalDate.now();
      encomenda1.setDataEntrega(localDate0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = MockLocalDate.ofYearDay((-4476), 1);
      encomenda0.setData(localDate0);
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setId((-5454L));
      encomenda0.getEstado();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      Encomenda.criaCodigo();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.defineTamanho();
      Encomenda.setDiasDevolver(2);
      encomenda0.getEncomenda();
      encomenda0.getDimensao();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = MockLocalDate.now();
      encomenda0.setIdComprador(0L);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      encomenda0.setEncomenda(linkedHashSet0);
      encomenda0.setDataEntrega(localDate0);
      Dimensao dimensao0 = Dimensao.Medio;
      encomenda0.setDimensao(dimensao0);
      encomenda0.podeDevolver(localDate0);
      encomenda0.getId();
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = MockLocalDate.now();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      encomenda0.setEncomenda(linkedHashSet0);
      encomenda0.setDataEntrega(localDate0);
      encomenda0.podeDevolver(localDate0);
      encomenda0.getId();
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = MockLocalDate.now();
      encomenda0.setData(localDate0);
      Encomenda.criaCodigo();
      Encomenda.setDiasDevolver((-2144164506));
      encomenda0.setIdComprador(0L);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      encomenda0.setEncomenda(linkedHashSet0);
      encomenda0.setDataEntrega(localDate0);
      Dimensao dimensao0 = Dimensao.Medio;
      encomenda0.setDimensao(dimensao0);
      encomenda0.podeDevolver(localDate0);
      encomenda0.getId();
      encomenda0.clone();
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, 1L, dimensao0, localDate0);
      encomenda0.defineTamanho();
      encomenda0.getEncomenda();
      encomenda0.defineTamanho();
      encomenda0.setId(2012L);
      encomenda0.setId(1L);
      encomenda0.defineTamanho();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.toString();
      encomenda0.setDimensao(dimensao0);
      encomenda1.numeroArtigos();
      System.setCurrentTimeMillis(599);
      encomenda1.defineTamanho();
      encomenda1.toString();
      encomenda1.numeroArtigos();
      encomenda1.setData(localDate0);
      System.setCurrentTimeMillis(2L);
      try { 
        encomenda1.removeArtigo("Encomenda:: { Artigos: java.util.HashSet@0000000006 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Encomenda:: { Artigos: java.util.HashSet@0000000006 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A} n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("u]E#ml");
      linkedHashSet0.add("7Rzg{B>&BN7");
      Dimensao dimensao0 = Dimensao.Medio;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2237L);
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 2237L, dimensao0, localDate0);
      encomenda0.defineTamanho();
      long long0 = (-756L);
      encomenda0.setId((-756L));
      encomenda0.toString();
      Encomenda.setCodigo(2237L);
      linkedHashSet0.add("Dj@l/_;Fy:1iSE+O#z");
      encomenda0.defineTamanho();
      linkedHashSet0.add("5DTkk[,oA0Zm*Rs0:T");
      encomenda0.getDimensao();
      Encomenda.getCodigo();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      try { 
        encomenda0.removeArtigo("Fuom]W !]H_hW*VrE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Fuom]W !]H_hW*VrE n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda();
      encomenda0.getEncomenda();
      encomenda1.getIdComprador();
      encomenda0.equals(encomenda1);
      encomenda1.toString();
      encomenda1.getEstado();
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.getEncomenda();
      encomenda0.getIdComprador();
      // Undeclared exception!
      try { 
        encomenda0.equals(encomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Dimensao dimensao0 = Dimensao.Medio;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, (-1228L), dimensao0, localDate0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Encomenda encomenda2 = encomenda0.clone();
      MockLocalDate.ofEpochDay((-1228L));
      Encomenda encomenda3 = encomenda1.clone();
      encomenda3.clone();
      locale0.getScript();
      System.setCurrentTimeMillis((-2144164464L));
      encomenda2.equals(encomenda1);
      encomenda1.defineTamanho();
      encomenda1.getEstado();
      encomenda1.getDimensao();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Encomenda.getDiasDevolver();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      encomenda0.removeTudo();
      encomenda0.setIdComprador(2);
      LocalDate localDate0 = encomenda0.getData();
      encomenda0.setDataEntrega(localDate0);
      encomenda0.setDataEntrega(localDate0);
      encomenda0.removeTudo();
      LocalDate localDate1 = encomenda0.getDataEntrega();
      encomenda0.getEncomenda();
      encomenda0.equals((Object) null);
      encomenda0.numeroArtigos();
      Encomenda.getDiasDevolver();
      Encomenda.setDiasDevolver(79);
      Estado estado0 = Estado.Finalizada;
      encomenda0.getEncomenda();
      encomenda0.setEstado(estado0);
      encomenda0.toString();
      encomenda0.podeDevolver(localDate1);
      encomenda0.podeDevolver(localDate1);
      encomenda0.getData();
      LocalDate localDate2 = encomenda0.getDataEntrega();
      encomenda0.setId((-4035L));
      Estado estado1 = Estado.Finalizada;
      encomenda0.setEstado(estado1);
      Integer integer0 = new Integer(0);
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.toString();
      encomenda1.getEncomenda();
      encomenda0.setData(localDate1);
      encomenda1.getId();
      encomenda1.defineTamanho();
      encomenda0.setData(localDate2);
      encomenda1.equals(encomenda0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Encomenda.getCodigo();
      Encomenda encomenda0 = new Encomenda();
      Dimensao dimensao0 = Dimensao.Medio;
      LocalDate localDate0 = MockLocalDate.now();
      encomenda0.setData(localDate0);
      encomenda0.setData(localDate0);
      encomenda0.setDimensao(dimensao0);
      encomenda0.numeroArtigos();
      boolean boolean0 = encomenda0.equals(dimensao0);
      assertFalse(boolean0);
      
      int int0 = Encomenda.getDiasDevolver();
      assertEquals(2, int0);
      
      encomenda0.getEncomenda();
      Long long0 = new Long(0);
      long long1 = encomenda0.getIdComprador();
      assertEquals((-1L), long1);
      
      String string0 = encomenda0.toString();
      encomenda0.adicionaArtigo("Encomenda:: { Artigos: java.util.HashSet@0000000002 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A}");
      encomenda0.numeroArtigos();
      String string1 = encomenda0.removeArtigo("Encomenda:: { Artigos: java.util.HashSet@0000000002 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A}");
      assertTrue(string1.equals((Object)string0));
      
      encomenda0.getDimensao();
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.equals("");
      Dimensao dimensao0 = Dimensao.Grande;
      encomenda0.removeTudo();
      encomenda0.setDimensao(dimensao0);
      encomenda0.setId(1L);
      encomenda0.numeroArtigos();
      Encomenda encomenda1 = new Encomenda();
      encomenda0.adicionaArtigo(" n\u00E3o existe na encomenda");
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      encomenda1.setEncomenda(set0);
      Encomenda.setDiasDevolver(0);
      encomenda0.numeroArtigos();
      Encomenda.setCodigo(0);
      encomenda0.equals(encomenda1);
      Encomenda.setCodigo(1);
      encomenda1.setIdComprador(0);
      try { 
        encomenda0.adicionaArtigo(" n\u00E3o existe na encomenda");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o existe na encomenda j\u00E1 existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      locale0.getUnicodeLocaleKeys();
      LocalDate localDate0 = null;
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }
}
