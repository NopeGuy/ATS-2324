/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 09:54:00 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gestor_Transportadoras_ESTest extends Gestor_Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      gestor_Transportadoras0.criaTransportadora(")$Lq }[#<4S?ZGOS(", 0L, 0L, 0L, 0L, 0L, false, 1673);
      gestor_Transportadoras0.alteraFormula(1L, (-1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.setTransportadoras((Map<Long, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.precoTransporte((List<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.fatorouMais();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = null;
      try {
        gestor_Transportadoras0 = new Gestor_Transportadoras((Map<Long, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = null;
      try {
        gestor_Transportadoras0 = new Gestor_Transportadoras((Gestor_Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      Gestor_Transportadoras gestor_Transportadoras1 = new Gestor_Transportadoras(gestor_Transportadoras0);
      assertTrue(gestor_Transportadoras1.equals((Object)gestor_Transportadoras0));
      assertNotNull(gestor_Transportadoras1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      gestor_Transportadoras0.criaTransportadora("", 0.0, 0.0, 0.9, 0.9, (-4466.40151532), true, 359);
      String string0 = gestor_Transportadoras0.transportadorasPremium();
      assertNotNull(string0);
      assertEquals("Transportadora:: { Id: 1 Nome:  Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.9 Imposto: 0.9 Margem de lucro: -4466.40151532 \u00C9 premium: true Formula atual: 359 Total lucro: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      gestor_Transportadoras0.criaTransportadora("", 1.0, 0L, 1.0, 0.7, 3948.32855184488, false, 188);
      String string0 = gestor_Transportadoras0.transportadorasPremium();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      gestor_Transportadoras0.criaTransportadora(")$Lq }[#<4S?ZGOS(", 0L, 0L, 0L, 0L, 0L, false, 1673);
      String string0 = gestor_Transportadoras0.transportadorasNormais();
      assertNotNull(string0);
      assertEquals("Transportadora:: { Id: 1 Nome: )$Lq }[#<4S?ZGOS( Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 1673 Total lucro: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      gestor_Transportadoras0.criaTransportadora("tVF .A9tgz( ", 2776.4279235459658, 2776.4279235459658, 2776.4279235459658, 2776.4279235459658, 2776.4279235459658, true, 648);
      String string0 = gestor_Transportadoras0.transportadorasNormais();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      gestor_Transportadoras0.criaTransportadora("", 1.0, 0L, 1.0, 0.7, 3948.32855184488, false, 188);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraPremium(1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraPremium(1905L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraNormal(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      gestor_Transportadoras0.criaTransportadora("8O]", 1673, 76.55, 0L, 76.55, 76.55, false, (-1));
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadora(1L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadora(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      gestor_Transportadoras0.criaTransportadora("1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7", 0.7, 0.7, 0.7, 1077.8319, (-1467.24252), true, (-1431));
      String string0 = gestor_Transportadoras0.fatorouMais();
      assertNotNull(string0);
      assertEquals("Transportadora:: { Id: 1 Nome: 1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7 Valor da encomenda pequena: 0.7 Valor da encomenda m\u00E9dia: 0.7 Valor da encomenda grande: 0.7 Imposto: 1077.8319 Margem de lucro: -1467.24252 \u00C9 premium: true Formula atual: -1431 Total lucro: 0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      try { 
        gestor_Transportadoras0.removeTransportadora(1654L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A transportadora com ID 1654 n\u00E3o existe
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      boolean boolean0 = gestor_Transportadoras0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      boolean boolean0 = gestor_Transportadoras0.equals(gestor_Transportadoras0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      assertNotNull(gestor_Transportadoras0);
      
      Map<Long, Transportadora> map0 = gestor_Transportadoras0.getTransportadoras();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      boolean boolean0 = gestor_Transportadoras0.equals(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("", 0.0, 0.0, 0.9, 0.9, (-4466.40151532), true, 359);
      Map<Long, Transportadora> map0 = gestor_Transportadoras0.getTransportadoras();
      gestor_Transportadoras0.setTransportadoras(map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("", 0.9, 0.9, 0.0, 0.9, 0.0, false, 3);
      Map<Long, Transportadora> map0 = gestor_Transportadoras0.getTransportadoras();
      Gestor_Transportadoras gestor_Transportadoras1 = new Gestor_Transportadoras(map0);
      assertTrue(gestor_Transportadoras1.equals((Object)gestor_Transportadoras0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      String string0 = gestor_Transportadoras0.formulasNormais();
      assertEquals("1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      Gestor_Transportadoras gestor_Transportadoras1 = gestor_Transportadoras0.clone();
      boolean boolean0 = gestor_Transportadoras1.equals(gestor_Transportadoras0);
      assertNotSame(gestor_Transportadoras1, gestor_Transportadoras0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.alteraFormula((-24L), (-2427));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      String string0 = gestor_Transportadoras0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      String string0 = gestor_Transportadoras0.formulasDisponiveis();
      assertEquals("1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7\n3) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("tVF .A9tgz( ", 2776.4279235459658, 2776.4279235459658, 2776.4279235459658, 2776.4279235459658, 2776.4279235459658, true, 648);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraNormal(1L);
      assertFalse(boolean0);
  }
}
