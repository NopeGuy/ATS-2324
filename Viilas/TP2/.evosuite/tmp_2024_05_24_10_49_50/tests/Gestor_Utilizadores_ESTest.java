/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 09:54:43 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.format.DecimalStyle;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gestor_Utilizadores_ESTest extends Gestor_Utilizadores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<String, Long> map0 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<Long, Utilizador> map1 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      gestor_Utilizadores0.setUtilizadores(map1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = gestor_Utilizadores0.clone();
      assertNotNull(gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      long long0 = 906L;
      long long1 = gestor_Utilizadores0.adicionaUtilizador("BO0KlP5BFF3.`z", "", "y4", 906L, "");
      assertEquals(1L, long1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(long1 == long0);
      
      Map<Long, Utilizador> map2 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(map2, map1);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(map2.equals((Object)map1));
      assertEquals(1, map2.size());
      assertFalse(map2.isEmpty());
      
      try { 
        gestor_Utilizadores0.retiraArtigo("Mk|+12#(T_|+tmrAtL", 1L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Mk|+12#(T_|+tmrAtL n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.setUtilizadores((Map<Long, Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, Long> map1 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map1);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, hashMap0, map1);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.adicionaArtigoEncomenda("Gestor de Utilizadores:: { Utilizadores: java.util.HashMap@0000000003 Emails associados ao id do utilizador correspondente: java.util.HashMap@0000000004}", 1L, 0L, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Gestor_Utilizadores gestor_Utilizadores2 = gestor_Utilizadores1.clone();
      assertNotNull(gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      
      long long0 = gestor_Utilizadores0.verificaPassword("4xD}J}#|", "4xD}J}#|");
      assertEquals((-2L), long0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      
      boolean boolean0 = gestor_Utilizadores0.equals(gestor_Utilizadores0);
      assertTrue(boolean0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprimeFaturasVendas((-2L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      gestor_Utilizadores0.setUtilizadores(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      long long0 = (-1354L);
      boolean boolean0 = false;
      long long1 = (-1L);
      long long2 = (-277L);
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaComprador(1206L, false, (-115L), (-1354L), set0, 0.0, 1206L, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Long long0 = hashMap1.put("AGk7+D9jPtM", (Long) null);
      assertNull(long0);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, map0, hashMap1);
      assertNotNull(gestor_Utilizadores0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      Set<Long> set0 = gestor_Utilizadores0.chaves();
      assertNotNull(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = "";
      boolean boolean0 = gestor_Utilizadores0.existeIdUtilizador("");
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      gestor_Utilizadores0.setIdUtilizadores(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      long long1 = 0L;
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.verCarrinho(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores2 = gestor_Utilizadores1.clone();
      assertNotNull(gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores0);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      long long0 = (-2977L);
      long long1 = gestor_Utilizadores1.adicionaUtilizador("}", "+/75:", "", (-2977L), "wAg1");
      assertEquals(1L, long1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertFalse(long1 == long0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      gestor_Utilizadores1.adicionaFaturaComprador(1L, true, 1L, 1L, (Set<String>) null, 859.454459022, 1.0, 133.70972191680013);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.devolveNif(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long0 = Long.valueOf((-1810L));
      assertNotNull(long0);
      assertEquals((-1810L), (long)long0);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getEmail());
      
      Utilizador utilizador2 = hashMap0.put(long0, utilizador1);
      assertNull(utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(1L, utilizador0.getIdCarrinho());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getIdCarrinho());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getEmail());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Gestor_Utilizadores gestor_Utilizadores0 = null;
      try {
        gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, map0, (Map<String, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      long long0 = (-2114L);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2114L));
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaArtigoEncomenda("", (-2114L), (-2114L), localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.setIdUtilizadores((Map<String, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.get1IdUtilizador("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      String string0 = "";
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores1.getUtilizadores();
      assertNotNull(map0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      
      Map<String, Long> map2 = gestor_Utilizadores1.getIdUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores2);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      boolean boolean0 = gestor_Utilizadores0.equals(gestor_Utilizadores2);
      assertFalse(boolean0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaVendedor(1L, true, (-1431L), (-1977L), "", 194.4935340142632, true, 0.0, (-1497.807915));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, hashMap0, (Map<String, Long>) null);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(gestor_Utilizadores1);
      assertNotNull(gestor_Utilizadores2);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals(0, encomenda0.numeroArtigos());
      assertEquals(1L, encomenda0.getId());
      
      LocalDate localDate0 = encomenda0.getData();
      assertNotNull(localDate0);
      assertEquals(Dimensao.Pequeno, encomenda0.getDimensao());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(2, encomenda0.getDiasDevolver());
      assertEquals(Estado.Pendente, encomenda0.getEstado());
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals(0, encomenda0.numeroArtigos());
      assertEquals(1L, encomenda0.getId());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores2.finalizaEncomenda(2249L, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.get1IdUtilizador("oC ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.removeArtigoEncomenda("HK[S", 0L, 1979L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprime1FaturaVenda(0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.imprime1FaturaVenda(2296L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      long long0 = gestor_Utilizadores0.adicionaUtilizador("R@4Ok", "R@4Ok", " Id dos artigos comprados: ", (-1L), " Id dos artigos comprados: ");
      assertEquals(1L, long0);
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.getEncomendas(1671L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.vendeArtigo("Gestor_Utilizadores", (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      long long0 = (-401L);
      Set<Long> set0 = gestor_Utilizadores0.chaves();
      assertNotNull(set0);
      assertFalse(set0.contains(long0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getIdCarrinho((-401L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.vendeArtigo("3F6yUA(", (-2L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      long long0 = (-2537L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprimeFaturasCompras((-2537L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      boolean boolean0 = gestor_Utilizadores1.equals(map0);
      assertFalse(boolean0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      boolean boolean1 = gestor_Utilizadores0.existeUtilizador((-1378L));
      assertFalse(boolean1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.imprime1FaturaCompra(0L, (-1378L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      long long0 = (-2L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprimeFaturasCompras((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaVendedor(0L, true, 0L, 0L, "fOCf&d,I&j#v#u($</M", 0L, false, 0.0, 466.9666053071);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores1.getUtilizadores();
      assertNotNull(map0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      Map<String, Long> map2 = gestor_Utilizadores1.getIdUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      String string0 = "l";
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.voltaAVenderArtigo("l", (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      String string0 = "";
      long long0 = 0L;
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.voltaAVenderArtigo("", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.devolveEncomenda(1881L, 1881L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      String string0 = " Data de cria\u00E7\u00E3o: ";
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.devolveEncomenda((-468L), 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.imprimeFaturasVendas((-2763L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Utilizador utilizador0 = gestor_Utilizadores1.devolveUtilizador(0L);
      assertNull(utilizador0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      long long0 = (-1L);
      int int0 = 2108;
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.alteraQuantiComprada(0L, 2108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores1.getUtilizadores();
      assertNotNull(map0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, Long> map1 = gestor_Utilizadores1.getIdUtilizadores();
      assertNotNull(map1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(map0, hashMap0, map1);
      assertNotNull(gestor_Utilizadores2);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      gestor_Utilizadores0.setUtilizadores(map0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<Long, Utilizador> map2 = gestor_Utilizadores2.getUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(map0, map2);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores0);
      assertNotSame(map2, map0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.alteraQuantiComprada(1L, (-643));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores1.getUtilizadores();
      assertNotNull(map0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      long long0 = gestor_Utilizadores1.adicionaUtilizador("b;/Yp*GO", "b;/Yp*GO", "b;/Yp*GO", (-1L), "b;/Yp*GO");
      assertEquals(1L, long0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      String string0 = hashMap0.put("b;/Yp*GO", "b;/Yp*GO");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Map<String, Long> map1 = gestor_Utilizadores1.getIdUtilizadores();
      assertNotNull(map1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(map0, hashMap0, map1);
      assertNotNull(gestor_Utilizadores2);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      
      Map<Long, Utilizador> map2 = gestor_Utilizadores2.getUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(map0, map2);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores0);
      assertNotSame(map2, map0);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(map2.equals((Object)map0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      boolean boolean0 = gestor_Utilizadores1.existeIdUtilizador("b;/Yp*GO");
      assertTrue(boolean0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores2.meusArtigos((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores1.getUtilizadores();
      assertNotNull(map0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      long long0 = gestor_Utilizadores1.adicionaUtilizador("b;/Yp*GO", "b;/Yp*GO", "b;/Yp*GO", (-1L), "b;/Yp*GO");
      assertEquals(1L, long0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<String, Long> map1 = gestor_Utilizadores1.getIdUtilizadores();
      assertNotNull(map1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(map0, hashMap0, map1);
      assertNotNull(gestor_Utilizadores2);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      
      Map<Long, Utilizador> map2 = gestor_Utilizadores2.getUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(map0, map2);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores1);
      assertNotSame(map2, map0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(map2.equals((Object)map0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      boolean boolean0 = gestor_Utilizadores1.existeIdUtilizador("b;/Yp*GO");
      assertTrue(boolean0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores2.meusArtigos((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      long long0 = 1L;
      boolean boolean0 = false;
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.meusArtigos((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Map<Long, Utilizador> map0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = null;
      String string1 = hashMap0.put((String) null, "Mp]b8+a`Y 12p:CC?O");
      assertNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores0 = null;
      try {
        gestor_Utilizadores0 = new Gestor_Utilizadores((Map<Long, Utilizador>) null, hashMap0, (Map<String, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, Long> map1 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, hashMap0, map1);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.removeTodosComprador(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores1.getUtilizadores();
      assertNotNull(map0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores2);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      long long0 = gestor_Utilizadores2.verificaPassword("b;15,p>;q]o", "bs\nFA@hMUrOlKt");
      assertEquals((-2L), long0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      boolean boolean0 = gestor_Utilizadores0.existeIdUtilizador(" Data de entrega: ");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getIdCarrinho(1857L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, Long> map1 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, hashMap0, map1);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.removeTodosComprador((-777L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      long long0 = 0L;
      Utilizador utilizador0 = gestor_Utilizadores0.devolveUtilizador(0L);
      assertNull(utilizador0);
      
      long long1 = 0L;
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getEncomendasDevolvidas(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.passaVendidoParaVender("[%H", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      long long0 = (-2L);
      Gestor_Utilizadores gestor_Utilizadores1 = gestor_Utilizadores0.clone();
      assertNotNull(gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprime1FaturaCompra((-2L), (-2L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      long long0 = 0L;
      int int0 = 0;
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.alteraQuantiVendida(0L, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.getEncomendasDevolvidas(31L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      String string0 = "KJvj~K/";
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      gestor_Utilizadores0.setUtilizadores(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.passaVendidoParaVender("KJvj~K/", (-457L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, Long> map1 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, hashMap0, map1);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.verCarrinho(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(gestor_Utilizadores1);
      assertNotNull(gestor_Utilizadores2);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores2.imprime1FaturaCompra((-379L), (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores1.getUtilizadores();
      assertNotNull(map0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores2);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores2.alteraQuantiVendida((-1L), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.artigosVendidos2(2748L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Set<Long> set0 = gestor_Utilizadores0.chaves();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean0 = gestor_Utilizadores0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = (-94L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.devolveNif((-94L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, String> map1 = null;
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<String, Long> map2 = gestor_Utilizadores1.getIdUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      long long0 = (-1767L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.get1Utilizador((-1767L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = null;
      try {
        gestor_Utilizadores0 = new Gestor_Utilizadores((Gestor_Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores1.getUtilizadores();
      assertNotNull(map0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      Map<String, Long> map2 = gestor_Utilizadores1.getIdUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores2);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores2.artigosVendidos2(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      boolean boolean0 = gestor_Utilizadores1.equals((Object) null);
      assertFalse(boolean0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      
      Map<String, Long> map1 = gestor_Utilizadores1.getIdUtilizadores();
      assertNotNull(map1);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      Gestor_Utilizadores gestor_Utilizadores2 = null;
      try {
        gestor_Utilizadores2 = new Gestor_Utilizadores((Map<Long, Utilizador>) null, map0, map1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.get1Utilizador((-2124L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getCarrinho(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = ":y(=d";
      String string1 = hashMap0.put(":y(=d", ":y(=d");
      assertNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.passaArtigoParaVendido(":y(=d", 771L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<String, Long> map0 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      gestor_Utilizadores0.setIdUtilizadores(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getEncomendas(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.retiraArtigo((String) null, 230L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, Long> map1 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map1);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, hashMap0, map1);
      assertNotNull(gestor_Utilizadores1);
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(gestor_Utilizadores1);
      assertNotNull(gestor_Utilizadores2);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      Map<Long, Utilizador> map2 = gestor_Utilizadores2.getUtilizadores();
      assertNotNull(map2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(map0, map2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores1);
      assertNotSame(map2, map0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertTrue(map2.equals((Object)map0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      String string0 = gestor_Utilizadores1.toString();
      assertNotNull(string0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(map0, map2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertTrue(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertTrue(map0.equals((Object)map2));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      assertNotNull(gestor_Utilizadores0);
      
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      assertNotNull(map2);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      assertNotNull(gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(gestor_Utilizadores1);
      assertNotNull(gestor_Utilizadores2);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      boolean boolean0 = gestor_Utilizadores2.existeUtilizador(2260L);
      assertFalse(boolean0);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores0, gestor_Utilizadores1);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores2);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores0);
      assertNotSame(gestor_Utilizadores2, gestor_Utilizadores1);
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores0.equals((Object)gestor_Utilizadores1));
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores1.equals((Object)gestor_Utilizadores2));
      assertFalse(gestor_Utilizadores2.equals((Object)gestor_Utilizadores0));
      assertTrue(gestor_Utilizadores2.equals((Object)gestor_Utilizadores1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      gestor_Utilizadores1.chaves();
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, Long> map1 = gestor_Utilizadores0.getIdUtilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, hashMap0, map1);
      Map<String, Long> map2 = gestor_Utilizadores1.getIdUtilizadores();
      assertTrue(map2.equals((Object)map1));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getCarrinho(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      String string0 = "]z&'%";
      long long0 = (-2L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.passaArtigoParaVendido("]z&'%", (-2L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.getEncomendas((-3664L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.novoCarrinho(1279L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<String, Long> map0 = gestor_Utilizadores0.getIdUtilizadores();
      gestor_Utilizadores0.setIdUtilizadores(map0);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.meusArtigos(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.getUtilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprime1FaturaCompra(0L, 4439L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.getIdUtilizadores();
      gestor_Utilizadores0.devolveUtilizador(1L);
      gestor_Utilizadores0.toString();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getCarrinho(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      Map<Long, Utilizador> map0 = gestor_Utilizadores1.getUtilizadores();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, Long> map2 = gestor_Utilizadores1.getIdUtilizadores();
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(map0, map1, map2);
      long long0 = 1L;
      boolean boolean0 = true;
      long long1 = 2620L;
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.verCarrinho(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, Long> map1 = gestor_Utilizadores0.getIdUtilizadores();
      hashMap0.replace(" C\u00F3digo: ", " C\u00F3digo: ", " C\u00F3digo: ");
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, hashMap0, map1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        gestor_Utilizadores1.devolveEncomenda((-1170L), (-1170L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      gestor_Utilizadores1.clone();
      gestor_Utilizadores0.verificaPassword("4xD}J}#|", "4xD}J}#|");
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(gestor_Utilizadores0);
      gestor_Utilizadores0.equals(gestor_Utilizadores2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprimeFaturasVendas((-2L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      gestor_Utilizadores0.setUtilizadores(map0);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaVendedor((-1354L), false, (-1L), (-277L), "", (-2428.990180991), false, (-1L), (-1354L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(gestor_Utilizadores1);
      long long0 = (-1L);
      gestor_Utilizadores2.devolveUtilizador((-1L));
      gestor_Utilizadores1.equals(gestor_Utilizadores2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores2.artigosVendidos((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.getUtilizadores();
      gestor_Utilizadores0.chaves();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.alteraQuantiVendida(17L, 852);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.getIdUtilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      gestor_Utilizadores0.setUtilizadores(map0);
      gestor_Utilizadores0.clone();
      gestor_Utilizadores0.adicionaUtilizador("BO0KlP5BFF3.`z", "", "BO0KlP5BFF3.`z", 565L, "BO0KlP5BFF3.`z");
      long long0 = 906L;
      gestor_Utilizadores0.adicionaUtilizador("BO0KlP5BFF3.`z", "Tc sGgL)*.? y4WX", "y4", 906L, "");
      gestor_Utilizadores0.devolveNif(1L);
      gestor_Utilizadores0.getUtilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.retiraArtigo("Mk|+12#(T_|+tmrAtL", (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.get1Utilizador(2756L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      Gestor_Utilizadores gestor_Utilizadores2 = gestor_Utilizadores1.clone();
      long long0 = (-2310L);
      int int0 = 1;
      gestor_Utilizadores1.adicionaUtilizador("}", "+/75:", "", (-2310L), "wAg1");
      gestor_Utilizadores1.removeTodosComprador(1);
      gestor_Utilizadores1.adicionaFaturaComprador(1L, true, 1L, 1L, (Set<String>) null, 859.454459022, 1.0, 133.70972191680013);
      Gestor_Utilizadores gestor_Utilizadores3 = new Gestor_Utilizadores(map0, map1, map2);
      gestor_Utilizadores2.equals(gestor_Utilizadores3);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.devolveNif(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, map2);
      gestor_Utilizadores1.clone();
      long long0 = (-2310L);
      gestor_Utilizadores1.adicionaUtilizador("}", "+/75:", "", (-2310L), "wAg1");
      gestor_Utilizadores1.adicionaFaturaComprador(1L, true, 1L, 1L, (Set<String>) null, 859.454459022, 1.0, 133.70972191680013);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.artigosVendidos2(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      String string0 = null;
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      gestor_Utilizadores0.setUtilizadores(map0);
      gestor_Utilizadores0.equals((Object) null);
      long long0 = (-2390L);
      gestor_Utilizadores0.existeUtilizador((-2390L));
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.passaArtigoParaVendido("Gestor de Utilizadores:: { Utilizadores: java.util.HashMap@0000000003 Emails associados ao id do utilizador correspondente: java.util.HashMap@0000000004}", 1867L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }
}
