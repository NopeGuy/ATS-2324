/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 09:56:07 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Mala_ESTest extends Mala_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = new Mala(mala0);
      mala1.setPremium(true);
      mala0.equals(mala1);
      LocalDate localDate0 = mala1.getData_venda();
      mala0.preco_atual(localDate0);
      mala1.preco_atual(localDate0);
      mala0.clone();
      mala0.toString();
      mala0.clone();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setTransportadora((-3871L));
      Mala mala1 = mala0.clone();
      mala0.setEstado_uso(2130);
      mala0.setDisponivel(true);
      mala0.setMarca("8@>!HP.,$");
      LocalDate localDate0 = mala0.getData_venda();
      mala0.mostrar(localDate0);
      mala0.setAno_colecao(0);
      mala0.setMarca("`}47cua!c");
      mala0.setMarca("r30p]TN:&E(Q0");
      mala0.setPreco_base(0.01);
      mala0.setValorizacao(0);
      mala0.setMarca("`}47cua!c");
      mala0.setDescricao(" Ano da Cole\u00E7\u00E3o: ");
      mala0.setDescricao("r30p]TN:&E(Q0");
      mala0.setDimensao(0);
      mala0.getMaterial();
      mala0.getAno_colecao();
      mala0.setMaterial("r30p]TN:&E(Q0");
      mala0.preco_atual(localDate0);
      mala0.toString();
      mala0.equals("");
      mala0.setPremium(true);
      mala1.getValorizacao();
      mala0.toString();
      LocalDate localDate1 = mala1.getData_venda();
      mala0.preco_atual(localDate1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long((-1L));
      Mala mala0 = new Mala("m", "", double0, false, (-23), (-23), long0, long0, (-23), "R# ", (-23), true, (-23));
      mala0.setTransportadora((-23));
      LocalDate localDate0 = mala0.getData_venda();
      mala0.preco_atual(localDate0);
      Mala mala1 = mala0.clone();
      Artigo.contador = 2L;
      mala1.setAno_colecao((-23));
      mala0.setAno_colecao((-2093));
      mala0.toString();
      LocalDate localDate1 = mala1.getData_venda();
      mala1.preco_atual(localDate1);
      mala1.preco_atual(localDate1);
      mala0.getValorizacao();
      mala1.getDimensao();
      mala0.getAno_colecao();
      mala1.setAno_colecao(1);
      mala0.setDisponivel(false);
      // Undeclared exception!
      try { 
        mala0.preco_atual((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Mala", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = mala0.clone();
      mala0.getDimensao();
      LocalDate localDate0 = mala1.getData_venda();
      mala0.mostrar(localDate0);
      LocalDate localDate1 = mala1.getData_venda();
      mala1.preco_atual(localDate1);
      mala0.setDimensao((-1986));
      mala0.setMaterial(" VO;*xK/<U");
      mala0.setDimensao(304);
      mala0.getValorizacao();
      mala0.setMaterial("G?($pkx!`>rqR9");
      mala0.setAno_colecao(3111);
      mala0.getDimensao();
      mala1.setPremium(false);
      mala0.setAno_colecao(0);
      Mala mala2 = mala0.clone();
      mala0.mostrar(localDate1);
      mala1.setDimensao(0);
      mala0.setValorizacao((-4760.357F));
      mala2.toString();
      mala2.isPremium();
      Artigo.setContador(1658L);
      mala2.setPremium(false);
      mala1.preco_atual(localDate1);
      mala2.getDimensao();
      mala2.getDimensao();
      mala1.equals(mala0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setDisponivel(true);
      mala0.setPreco_base(1403.6172);
      mala0.setDisponivel(true);
      mala0.setMaterial("<>$yB");
      Mala mala1 = new Mala(mala0);
      mala1.toString();
      mala0.setAno_colecao((-1));
      mala1.setN_utilizadores((-1));
      LocalDate localDate0 = mala0.getData_venda();
      mala1.setData_venda((LocalDate) null);
      mala1.preco_atual(localDate0);
      // Undeclared exception!
      try { 
        mala1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = new Mala(mala0);
      mala1.setMaterial("A");
      mala1.getDimensao();
      mala1.getValorizacao();
      mala1.equals(mala0);
      LocalDate localDate0 = mala0.getData_venda();
      mala1.preco_atual(localDate0);
      mala0.setValorizacao(1.0F);
      mala0.setNovo(false);
      mala1.setValorizacao(0.0F);
      mala1.setCodigo_barras("4X>*u^<dg");
      mala1.getMaterial();
      mala1.setPremium(false);
      mala1.setN_utilizadores(0);
      mala1.setAno_colecao(0);
      mala1.preco_atual(localDate0);
      Mala mala2 = mala1.clone();
      mala2.setData_venda(localDate0);
      mala1.setData_venda(localDate0);
      Artigo.setContador(2L);
      mala2.setPreco_base(1.0);
      mala2.setNovo(false);
      mala2.getDimensao();
      mala2.getAno_colecao();
      mala1.getAno_colecao();
      mala2.getDimensao();
      mala2.getValorizacao();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Mala mala0 = new Mala();
      Artigo.codigo = "A";
      mala0.toString();
      mala0.setDimensao(0);
      mala0.setN_utilizadores(0);
      mala0.setDimensao(0);
      Mala mala1 = mala0.clone();
      mala1.clone();
      Artigo.codigo = "A";
      Artigo.setContador(0L);
      mala1.toString();
      mala0.getValorizacao();
      mala0.clone();
      Mala mala2 = mala0.clone();
      mala2.getMaterial();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setDimensao(2456);
      mala0.setMarca("D;CR");
      LocalDate localDate0 = mala0.getData_venda();
      mala0.preco_atual(localDate0);
      Mala mala1 = new Mala(mala0);
      mala1.setN_utilizadores(2456);
      mala0.setN_utilizadores((-2492));
      Artigo.setContador((-1L));
      mala1.setDimensao(2456);
      mala1.setDimensao(10);
      mala1.preco_atual(localDate0);
      mala1.setDisponivel(false);
      mala1.setPremium(false);
      mala0.clone();
      mala0.setValorizacao((-2492));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.toString();
      Artigo.setContador(2L);
      mala0.equals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}");
      mala0.setTransportadora(2452L);
      mala0.toString();
      mala0.getValorizacao();
      mala0.setDescricao("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2452 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}");
      Artigo.setCodigo("A");
      mala0.setMaterial((String) null);
      Mala mala1 = mala0.clone();
      Artigo.codigo = null;
      mala0.setPreco_base((-832.007279218557));
      mala1.isPremium();
      mala0.getDimensao();
      mala0.getValorizacao();
      mala1.getMaterial();
      mala1.toString();
      mala1.getDimensao();
      mala0.getDimensao();
      mala0.getDimensao();
      mala1.setPremium(false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double(1.0);
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      Mala mala0 = new Mala(" L2-/1rC1p6", " L2-/1rC1p6", double0, true, (-4193), (-4193), long0, long1, 2189, " L2-/1rC1p6", 1190, false, 100.0F);
      Mala mala1 = new Mala(mala0);
      mala1.setDescricao(" L2-/1rC1p6");
      LocalDate localDate0 = mala1.getData_venda();
      mala1.preco_atual(localDate0);
      Mala mala2 = new Mala();
      mala0.equals(mala2);
      mala0.setAno_colecao(2189);
      mala0.isPremium();
      mala2.getValorizacao();
      mala1.equals(mala0);
      mala0.toString();
      mala0.toString();
      mala0.setDimensao(2189);
      mala2.setValorizacao((-1.0F));
      mala0.setAno_colecao(0);
      mala0.clone();
      mala0.setMaterial("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  L2-/1rC1p6 Marca:  L2-/1rC1p6 Pre\u00E7o base: 1.0 Novo: true Estado de uso: -4193 N\u00FAmero de utilizadores: -4193 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Dimens\u00E3o: 2189 Material:  L2-/1rC1p6 Ano da Cole\u00E7\u00E3o: 2189 Premium: false Valoriza\u00E7\u00E3o: 100.0}");
      mala2.getValorizacao();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long((-2946));
      Mala mala0 = new Mala(" Dimens\u00E3o: ", "dR>i", double0, false, (-2946), 1215, long0, long0, 1215, " N\u00FAmero de utilizadores: ", 1215, false, 1215);
      mala0.getDimensao();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long((-4040));
      Long long1 = new Long((-4040));
      Mala mala0 = new Mala("3 F\"lLEs}!(6U,51}.9", "3 F\"lLEs}!(6U,51}.9", double0, true, (-4040), (-4040), long0, long1, (-4040), "3 F\"lLEs}!(6U,51}.9", (-4040), true, 0.0F);
      mala0.getDimensao();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double((-2670.063703));
      Long long0 = new Long((-1447));
      Long long1 = new Long(1L);
      Mala mala0 = new Mala("}7", "*;c2C?Fw@3dp^o6A", double0, false, (-1447), (-1447), long0, long1, (-1447), "ff7=kYpM_`8|L", (-1447), false, (-1447));
      Mala mala1 = new Mala();
      LocalDate localDate0 = mala1.getData_venda();
      mala0.setMaterial("A");
      mala0.preco_atual(localDate0);
      mala0.getMaterial();
      mala1.setAno_colecao(1);
      mala1.toString();
      mala0.getAno_colecao();
      mala0.setValorizacao((-1447));
      mala0.getMaterial();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(3859.2);
      Long long0 = new Long((-1874));
      Mala mala0 = new Mala("", "<", double0, true, 1862, (-1874), long0, long0, (-264), "h'*t)<BK>5gF#2", 4430, false, (-2355.1067F));
      LocalDate localDate0 = mala0.getData_venda();
      mala0.preco_atual(localDate0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Long long0 = new Long(0L);
      Long long1 = new Long(452L);
      Mala mala0 = new Mala("6%[4co,n7g", "6%[4co,n7g", double0, true, 0, 0, long0, long1, 0, "6%[4co,n7g", 0, true, 0.0F);
      mala0.setNovo(true);
      Mala mala1 = mala0.clone();
      mala1.isPremium();
      mala0.equals(mala0);
      mala0.getMaterial();
      mala1.setValorizacao((-5366.1F));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.toString();
      mala0.toString();
      Mala mala1 = new Mala(mala0);
      mala1.setPreco_base(0.0);
      mala0.equals(mala1);
      mala1.toString();
      Mala mala2 = mala0.clone();
      LocalDate localDate0 = mala0.getData_venda();
      mala2.preco_atual(localDate0);
      mala2.toString();
      mala2.equals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}");
      mala1.equals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}");
      Mala mala3 = mala0.clone();
      mala3.clone();
      Artigo.setCodigo("4XY_W77S72.,M");
      mala3.setMaterial("gHUI");
      mala1.clone();
      mala3.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Mala mala0 = new Mala();
      Artigo.codigo = null;
      mala0.setDimensao(0);
      mala0.setCodigo_barras((String) null);
      Artigo.setContador(2L);
      mala0.toString();
      mala0.toString();
      mala0.getDimensao();
      mala0.equals("Mala:: {Artigo:: { C\u00F3digo de barras: null Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}");
      mala0.setPremium(false);
      mala0.getValorizacao();
      Mala mala1 = mala0.clone();
      mala1.getAno_colecao();
      Mala mala2 = mala1.clone();
      LocalDate localDate0 = mala0.getData_venda();
      mala2.mostrar(localDate0);
      mala0.setEstado_uso(254);
      mala2.setDisponivel(false);
      mala2.setDimensao(0);
      mala1.setDimensao(0);
      // Undeclared exception!
      try { 
        mala1.equals(mala0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = new Mala();
      mala1.setCodigo_barras("NCJw$e]Z\"tWgDm!/g");
      mala0.equals(mala1);
      Artigo.criaCodigo();
      mala1.setDisponivel(false);
      mala0.setPremium(true);
      mala0.setN_utilizadores(1);
      mala0.setAno_colecao(1);
      mala0.getValorizacao();
      mala0.getAno_colecao();
      mala0.getAno_colecao();
      mala0.isPremium();
      mala1.getValorizacao();
      mala1.getMaterial();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long((-1966));
      Long long1 = new Long(2928L);
      Mala mala0 = new Mala("K#N3IPiJXH*`?/<", "K#N3IPiJXH*`?/<", double0, true, (-1966), 1149, long0, long1, 1736, " Valoriza\u00E7\u00E3o: ", 1149, true, (-1966));
      mala0.clone();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setMaterial("");
      mala0.setNovo(true);
      mala0.setMaterial(" Marca: ");
      mala0.setMaterial(",!Exx.T+Es8e$8*m");
      mala0.isPremium();
      mala0.setValorizacao((-1015.0F));
      mala0.setAno_colecao((-1));
      mala0.getValorizacao();
      mala0.getDimensao();
      mala0.equals(" Marca: ");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(1.0);
      Long long0 = new Long(1L);
      Mala mala0 = new Mala(" Premium: ", "", double0, false, (-2508), 1, long0, long0, (-983), "", (-2508), false, 1);
      LocalDate localDate0 = mala0.getData_venda();
      mala0.preco_atual(localDate0);
      Mala mala1 = mala0.clone();
      mala1.preco_atual(localDate0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double double0 = new Double(1.0);
      Long long0 = new Long((-2855L));
      Mala mala0 = new Mala("T:th^zSk&", "T:th^zSk&", double0, false, 0, 1597, long0, long0, 1035, "T:th^zSk&", 0, false, 1597);
      Mala mala1 = new Mala(mala0);
      mala1.setAno_colecao(1597);
      mala1.setPremium(true);
      mala1.getValorizacao();
      mala1.toString();
      mala1.setValorizacao((-6197.247F));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long(0);
      Long long1 = new Long((-2314L));
      Mala mala0 = new Mala(":;baIwWKZ%V_yI", "", double0, false, 0, 0, long0, long1, 0, "", (-7000), false, (-1.0F));
      mala0.clone();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long(0L);
      Mala mala0 = new Mala("Mala:: {", "Mala:: {", double0, true, 98, 98, long0, long0, 98, "", 0, true, 98);
      mala0.clone();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = mala0.clone();
      LocalDate localDate0 = mala0.getData_venda();
      mala1.preco_atual(localDate0);
      mala1.clone();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Double double0 = new Double((-588.9));
      Long long0 = new Long(634);
      Mala mala0 = new Mala("\u20AC ", "YZ#8+3 ~/", double0, true, 634, 634, long0, long0, 711, "YZ#8+3 ~/", 711, true, 711);
      mala0.setDimensao(634);
      mala0.toString();
      mala0.getDimensao();
      LocalDate localDate0 = mala0.getData_venda();
      mala0.preco_atual(localDate0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Double double0 = new Double((-2397.142998));
      Long long0 = new Long(0);
      Mala mala0 = new Mala((String) null, "", double0, false, 0, 0, long0, long0, 0, (String) null, (-1), false, (-1));
      Mala mala1 = mala0.clone();
      mala0.toString();
      mala0.setCodigo_barras("");
      LocalDate localDate0 = mala1.getData_venda();
      mala1.preco_atual(localDate0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Double double0 = new Double(0.0);
      int int0 = 0;
      Mala mala0 = null;
      try {
        mala0 = new Mala("", "", double0, false, 0, 0, (Long) null, (Long) null, 0, "", 0, true, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Mala mala0 = null;
      try {
        mala0 = new Mala((Mala) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setAno_colecao((-1054));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Mala mala0 = new Mala();
      Artigo.codigo = "qv6";
      mala0.setPremium(false);
      mala0.setCodigo_barras(" Dimens\u00E3o: ");
      mala0.setNovo(true);
      Artigo.setCodigo("qv6");
      mala0.setPreco_base(1.0);
      mala0.setDisponivel(true);
      Artigo.criaCodigo();
      mala0.equals("qv6");
      Mala mala1 = mala0.clone();
      mala0.toString();
      mala1.setValorizacao(3L);
      mala1.toString();
      LocalDate localDate0 = mala1.getData_venda();
      mala0.preco_atual(localDate0);
      mala1.equals((Object) null);
      mala1.setN_utilizadores(0);
      mala0.clone();
      mala1.clone();
      mala0.preco_atual(localDate0);
      Double double0 = new Double(4102.524941);
      Long long0 = new Long(3L);
      Long long1 = new Long(3L);
      Mala mala2 = new Mala("qv6", "Mala:: {Artigo:: { C\u00F3digo de barras:  Dimens\u00E3o:  Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 1.0 Novo: true Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: true Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", double0, true, (-1730), 0, long0, long1, (-1730), "qv6", 1146670231, false, 4L);
      mala0.equals(mala2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Double double0 = new Double(698.73138361);
      Long long0 = new Long((-944));
      Mala mala0 = new Mala(" C\u00F3digo de barras: ", " C\u00F3digo de barras: ", double0, false, (-944), (-944), long0, long0, (-944), "#n", 0, true, 0);
      Mala mala1 = mala0.clone();
      mala1.setAno_colecao(1146670254);
      mala1.setEstado_uso((-1));
      mala0.toString();
      LocalDate localDate0 = mala0.getData_venda();
      mala0.preco_atual(localDate0);
      mala0.toString();
      mala0.toString();
      Artigo.setContador(2L);
      mala0.equals("]n");
      Mala mala2 = mala0.clone();
      mala1.setMarca("A");
      mala2.toString();
      mala1.toString();
      Mala mala3 = new Mala(mala0);
      mala3.setPremium(false);
      mala0.equals(mala3);
      Mala mala4 = new Mala(mala3);
      mala0.equals(mala4);
      mala3.clone();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Double double0 = new Double((-2140.3991572925));
      assertNotNull(double0);
      assertEquals((-2140.3991572925), (double)double0, 0.01);
      
      boolean boolean0 = true;
      Long long0 = new Long((-1425L));
      assertNotNull(long0);
      assertEquals((-1425L), (long)long0);
      
      Mala mala0 = new Mala("", "", double0, true, 587, 587, long0, long0, 587, "", (-2146680225), true, (-4428.0F));
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala0);
      assertEquals(587, mala0.getN_utilizadores());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("", mala0.getMaterial());
      assertTrue(mala0.getNovo());
      assertEquals((-4428.0F), mala0.getValorizacao(), 0.01F);
      assertEquals("", mala0.getDescricao());
      assertEquals("", mala0.getMarca());
      assertEquals("A", mala0.getCodigo());
      assertTrue(mala0.isPremium());
      assertEquals(587, mala0.getDimensao());
      assertEquals(2L, mala0.getContador());
      assertEquals((-1425L), mala0.getIdTransportadora());
      assertEquals((-1425L), mala0.getIdVendedor());
      assertEquals(587, mala0.getEstado_uso());
      assertTrue(mala0.getDisponivel());
      assertEquals((-2140.3991572925), mala0.getPreco_base(), 0.01);
      assertEquals((-2146680225), mala0.getAno_colecao());
      
      Mala mala1 = mala0.clone();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala1);
      assertTrue(mala1.equals((Object)mala0));
      assertEquals(587, mala0.getN_utilizadores());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("", mala0.getMaterial());
      assertTrue(mala0.getNovo());
      assertEquals((-4428.0F), mala0.getValorizacao(), 0.01F);
      assertEquals("", mala0.getDescricao());
      assertEquals("", mala0.getMarca());
      assertEquals("A", mala0.getCodigo());
      assertTrue(mala0.isPremium());
      assertEquals(587, mala0.getDimensao());
      assertEquals(2L, mala0.getContador());
      assertEquals((-1425L), mala0.getIdTransportadora());
      assertEquals((-1425L), mala0.getIdVendedor());
      assertEquals(587, mala0.getEstado_uso());
      assertTrue(mala0.getDisponivel());
      assertEquals((-2140.3991572925), mala0.getPreco_base(), 0.01);
      assertEquals((-2146680225), mala0.getAno_colecao());
      assertEquals(587, mala1.getEstado_uso());
      assertEquals((-1425L), mala1.getIdVendedor());
      assertEquals("A", mala1.getCodigo());
      assertTrue(mala1.getNovo());
      assertTrue(mala1.isPremium());
      assertEquals((-2140.3991572925), mala1.getPreco_base(), 0.01);
      assertEquals(587, mala1.getDimensao());
      assertEquals("", mala1.getMarca());
      assertEquals((-4428.0F), mala1.getValorizacao(), 0.01F);
      assertEquals("", mala1.getDescricao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals((-2146680225), mala1.getAno_colecao());
      assertEquals(2L, mala1.getContador());
      assertEquals(587, mala1.getN_utilizadores());
      assertEquals((-1425L), mala1.getIdTransportadora());
      assertEquals("", mala1.getMaterial());
      assertTrue(mala1.getDisponivel());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      Artigo.codigo = "A";
      boolean boolean1 = mala0.equals("");
      assertEquals(2L, Artigo.contador);
      assertTrue(mala0.equals((Object)mala1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(587, mala0.getN_utilizadores());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("", mala0.getMaterial());
      assertTrue(mala0.getNovo());
      assertEquals((-4428.0F), mala0.getValorizacao(), 0.01F);
      assertEquals("", mala0.getDescricao());
      assertEquals("", mala0.getMarca());
      assertEquals("A", mala0.getCodigo());
      assertTrue(mala0.isPremium());
      assertEquals(587, mala0.getDimensao());
      assertEquals(2L, mala0.getContador());
      assertEquals((-1425L), mala0.getIdTransportadora());
      assertEquals((-1425L), mala0.getIdVendedor());
      assertEquals(587, mala0.getEstado_uso());
      assertTrue(mala0.getDisponivel());
      assertEquals((-2140.3991572925), mala0.getPreco_base(), 0.01);
      assertEquals((-2146680225), mala0.getAno_colecao());
      assertNotSame(mala0, mala1);
      
      LocalDate localDate0 = mala1.getData_venda();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(localDate0);
      assertTrue(mala0.equals((Object)mala1));
      assertTrue(mala1.equals((Object)mala0));
      assertEquals(587, mala0.getN_utilizadores());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("", mala0.getMaterial());
      assertTrue(mala0.getNovo());
      assertEquals((-4428.0F), mala0.getValorizacao(), 0.01F);
      assertEquals("", mala0.getDescricao());
      assertEquals("", mala0.getMarca());
      assertEquals("A", mala0.getCodigo());
      assertTrue(mala0.isPremium());
      assertEquals(587, mala0.getDimensao());
      assertEquals(2L, mala0.getContador());
      assertEquals((-1425L), mala0.getIdTransportadora());
      assertEquals((-1425L), mala0.getIdVendedor());
      assertEquals(587, mala0.getEstado_uso());
      assertTrue(mala0.getDisponivel());
      assertEquals((-2140.3991572925), mala0.getPreco_base(), 0.01);
      assertEquals((-2146680225), mala0.getAno_colecao());
      assertEquals(587, mala1.getEstado_uso());
      assertEquals((-1425L), mala1.getIdVendedor());
      assertEquals("A", mala1.getCodigo());
      assertTrue(mala1.getNovo());
      assertTrue(mala1.isPremium());
      assertEquals((-2140.3991572925), mala1.getPreco_base(), 0.01);
      assertEquals(587, mala1.getDimensao());
      assertEquals("", mala1.getMarca());
      assertEquals((-4428.0F), mala1.getValorizacao(), 0.01F);
      assertEquals("", mala1.getDescricao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals((-2146680225), mala1.getAno_colecao());
      assertEquals(2L, mala1.getContador());
      assertEquals(587, mala1.getN_utilizadores());
      assertEquals((-1425L), mala1.getIdTransportadora());
      assertEquals("", mala1.getMaterial());
      assertTrue(mala1.getDisponivel());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      // Undeclared exception!
      mala1.preco_atual(localDate0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "iZ~";
      Double double0 = new Double((-3244.0));
      assertNotNull(double0);
      assertEquals((-3244.0), (double)double0, 0.01);
      
      int int0 = (-1073741822);
      int int1 = (-1745);
      Long long0 = null;
      Long long1 = new Long((-1745));
      assertNotNull(long1);
      assertEquals((-1745L), (long)long1);
      
      Mala mala0 = null;
      try {
        mala0 = new Mala("iZ~", "iZ~", double0, false, (-1073741822), (-1745), (Long) null, long1, (-999997640), "iZ~", (-381), true, (-1337.9882F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Mala mala0 = new Mala();
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala0);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      
      Mala mala1 = new Mala(mala0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala1);
      assertTrue(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      
      boolean boolean0 = mala1.equals(mala0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertTrue(mala0.equals((Object)mala1));
      assertTrue(mala1.equals((Object)mala0));
      assertTrue(boolean0);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala1.setEstado_uso(2225);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      Mala mala2 = new Mala(mala1);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala2);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertTrue(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals("A1", mala2.getCodigo_barras());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      
      String string0 = mala2.toString();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string0);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertTrue(mala1.equals((Object)mala2));
      assertTrue(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", string0);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals("A1", mala2.getCodigo_barras());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala1);
      
      mala2.setCodigo_barras("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}");
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala1));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala2.getCodigo_barras());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala1);
      
      boolean boolean1 = mala1.equals(mala2);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala2.getCodigo_barras());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala1);
      
      mala0.setMaterial("JaUi5]s'z)oe]\"!");
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      
      boolean boolean2 = mala1.equals("5o2~)");
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      
      LocalDate localDate0 = mala1.getData_venda();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(localDate0);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      
      double double0 = mala2.preco_atual(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala1));
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala2.getCodigo_barras());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala1);
      
      boolean boolean3 = mala2.equals((Object) null);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala2.getCodigo_barras());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala1);
      
      Mala mala3 = mala2.clone();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala3);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala3.equals((Object)mala0));
      assertFalse(mala3.equals((Object)mala1));
      assertTrue(mala3.equals((Object)mala2));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala2.getCodigo_barras());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(0.0F, mala3.getValorizacao(), 0.01F);
      assertEquals(2L, mala3.getContador());
      assertEquals((-1), mala3.getN_utilizadores());
      assertEquals("Artigo invalido", mala3.getDescricao());
      assertEquals((-1L), mala3.getIdVendedor());
      assertFalse(mala3.isPremium());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala3.getCodigo_barras());
      assertEquals(2225, mala3.getEstado_uso());
      assertFalse(mala3.getDisponivel());
      assertEquals("A", mala3.getCodigo());
      assertEquals("", mala3.getMaterial());
      assertEquals(0, mala3.getDimensao());
      assertEquals((-1L), mala3.getIdTransportadora());
      assertEquals(0.0, mala3.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala3.getMarca());
      assertFalse(mala3.getNovo());
      assertEquals(0, mala3.getAno_colecao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala3);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala3);
      assertNotSame(mala1, mala2);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala3);
      assertNotSame(mala2, mala1);
      assertNotSame(mala3, mala0);
      assertNotSame(mala3, mala2);
      assertNotSame(mala3, mala1);
      
      boolean boolean4 = mala3.equals((Object) null);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala3));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala3));
      assertFalse(mala1.equals((Object)mala2));
      assertTrue(mala2.equals((Object)mala3));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala3.equals((Object)mala0));
      assertFalse(mala3.equals((Object)mala1));
      assertTrue(mala3.equals((Object)mala2));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala2.getCodigo_barras());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(0.0F, mala3.getValorizacao(), 0.01F);
      assertEquals(2L, mala3.getContador());
      assertEquals((-1), mala3.getN_utilizadores());
      assertEquals("Artigo invalido", mala3.getDescricao());
      assertEquals((-1L), mala3.getIdVendedor());
      assertFalse(mala3.isPremium());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala3.getCodigo_barras());
      assertEquals(2225, mala3.getEstado_uso());
      assertFalse(mala3.getDisponivel());
      assertEquals("A", mala3.getCodigo());
      assertEquals("", mala3.getMaterial());
      assertEquals(0, mala3.getDimensao());
      assertEquals((-1L), mala3.getIdTransportadora());
      assertEquals(0.0, mala3.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala3.getMarca());
      assertFalse(mala3.getNovo());
      assertEquals(0, mala3.getAno_colecao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala3);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala3);
      assertNotSame(mala1, mala2);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala3);
      assertNotSame(mala2, mala1);
      assertNotSame(mala3, mala0);
      assertNotSame(mala3, mala2);
      assertNotSame(mala3, mala1);
      
      String string1 = mala3.toString();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string1);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala3));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala3));
      assertFalse(mala1.equals((Object)mala2));
      assertTrue(mala2.equals((Object)mala3));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala3.equals((Object)mala0));
      assertFalse(mala3.equals((Object)mala1));
      assertTrue(mala3.equals((Object)mala2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0} Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", string1);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala2.getCodigo_barras());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(0.0F, mala3.getValorizacao(), 0.01F);
      assertEquals(2L, mala3.getContador());
      assertEquals((-1), mala3.getN_utilizadores());
      assertEquals("Artigo invalido", mala3.getDescricao());
      assertEquals((-1L), mala3.getIdVendedor());
      assertFalse(mala3.isPremium());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala3.getCodigo_barras());
      assertEquals(2225, mala3.getEstado_uso());
      assertFalse(mala3.getDisponivel());
      assertEquals("A", mala3.getCodigo());
      assertEquals("", mala3.getMaterial());
      assertEquals(0, mala3.getDimensao());
      assertEquals((-1L), mala3.getIdTransportadora());
      assertEquals(0.0, mala3.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala3.getMarca());
      assertFalse(mala3.getNovo());
      assertEquals(0, mala3.getAno_colecao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala3);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala3);
      assertNotSame(mala1, mala2);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala3);
      assertNotSame(mala2, mala1);
      assertNotSame(mala3, mala0);
      assertNotSame(mala3, mala2);
      assertNotSame(mala3, mala1);
      
      Mala mala4 = mala1.clone();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala4);
      assertFalse(mala4.equals((Object)mala2));
      assertTrue(mala4.equals((Object)mala1));
      assertFalse(mala4.equals((Object)mala0));
      assertFalse(mala4.equals((Object)mala3));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala3));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala3));
      assertFalse(mala1.equals((Object)mala2));
      assertEquals(2225, mala4.getEstado_uso());
      assertFalse(mala4.getDisponivel());
      assertEquals(0.0F, mala4.getValorizacao(), 0.01F);
      assertEquals(2L, mala4.getContador());
      assertFalse(mala4.getNovo());
      assertEquals((-1L), mala4.getIdVendedor());
      assertEquals("Artigo invalido", mala4.getMarca());
      assertEquals("Artigo invalido", mala4.getDescricao());
      assertEquals((-1L), mala4.getIdTransportadora());
      assertEquals("A", mala4.getCodigo());
      assertEquals(0, mala4.getDimensao());
      assertEquals("A1", mala4.getCodigo_barras());
      assertEquals("", mala4.getMaterial());
      assertEquals(0, mala4.getAno_colecao());
      assertEquals((-1), mala4.getN_utilizadores());
      assertFalse(mala4.isPremium());
      assertEquals(0.0, mala4.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertNotSame(mala4, mala2);
      assertNotSame(mala4, mala1);
      assertNotSame(mala4, mala0);
      assertNotSame(mala4, mala3);
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala3);
      assertNotSame(mala0, mala4);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala3);
      assertNotSame(mala1, mala4);
      assertNotSame(mala1, mala2);
      
      boolean boolean5 = mala4.equals(mala3);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala4.equals((Object)mala2));
      assertTrue(mala4.equals((Object)mala1));
      assertFalse(mala4.equals((Object)mala0));
      assertFalse(mala4.equals((Object)mala3));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala3));
      assertFalse(mala0.equals((Object)mala4));
      assertFalse(mala0.equals((Object)mala2));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala3));
      assertTrue(mala1.equals((Object)mala4));
      assertFalse(mala1.equals((Object)mala2));
      assertTrue(mala2.equals((Object)mala3));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala4));
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala3.equals((Object)mala0));
      assertFalse(mala3.equals((Object)mala1));
      assertTrue(mala3.equals((Object)mala2));
      assertFalse(mala3.equals((Object)mala4));
      assertFalse(boolean5);
      assertEquals(2225, mala4.getEstado_uso());
      assertFalse(mala4.getDisponivel());
      assertEquals(0.0F, mala4.getValorizacao(), 0.01F);
      assertEquals(2L, mala4.getContador());
      assertFalse(mala4.getNovo());
      assertEquals((-1L), mala4.getIdVendedor());
      assertEquals("Artigo invalido", mala4.getMarca());
      assertEquals("Artigo invalido", mala4.getDescricao());
      assertEquals((-1L), mala4.getIdTransportadora());
      assertEquals("A", mala4.getCodigo());
      assertEquals(0, mala4.getDimensao());
      assertEquals("A1", mala4.getCodigo_barras());
      assertEquals("", mala4.getMaterial());
      assertEquals(0, mala4.getAno_colecao());
      assertEquals((-1), mala4.getN_utilizadores());
      assertFalse(mala4.isPremium());
      assertEquals(0.0, mala4.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("", mala2.getMaterial());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala2.getCodigo_barras());
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals(2L, mala2.getContador());
      assertEquals((-1), mala2.getN_utilizadores());
      assertFalse(mala2.isPremium());
      assertEquals(2225, mala2.getEstado_uso());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.getNovo());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(0.0F, mala3.getValorizacao(), 0.01F);
      assertEquals(2L, mala3.getContador());
      assertEquals((-1), mala3.getN_utilizadores());
      assertEquals("Artigo invalido", mala3.getDescricao());
      assertEquals((-1L), mala3.getIdVendedor());
      assertFalse(mala3.isPremium());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala3.getCodigo_barras());
      assertEquals(2225, mala3.getEstado_uso());
      assertFalse(mala3.getDisponivel());
      assertEquals("A", mala3.getCodigo());
      assertEquals("", mala3.getMaterial());
      assertEquals(0, mala3.getDimensao());
      assertEquals((-1L), mala3.getIdTransportadora());
      assertEquals(0.0, mala3.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala3.getMarca());
      assertFalse(mala3.getNovo());
      assertEquals(0, mala3.getAno_colecao());
      assertNotSame(mala4, mala2);
      assertNotSame(mala4, mala1);
      assertNotSame(mala4, mala0);
      assertNotSame(mala4, mala3);
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala3);
      assertNotSame(mala0, mala4);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala3);
      assertNotSame(mala1, mala4);
      assertNotSame(mala1, mala2);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala3);
      assertNotSame(mala2, mala4);
      assertNotSame(mala2, mala1);
      assertNotSame(mala3, mala0);
      assertNotSame(mala3, mala2);
      assertNotSame(mala3, mala1);
      assertNotSame(mala3, mala4);
      
      String string2 = mala1.toString();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string2);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala3));
      assertFalse(mala0.equals((Object)mala4));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala3));
      assertTrue(mala1.equals((Object)mala4));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: 2225 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", string2);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("JaUi5]s'z)oe]\"!", mala0.getMaterial());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertFalse(mala1.getDisponivel());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.isPremium());
      assertEquals("", mala1.getMaterial());
      assertEquals(2225, mala1.getEstado_uso());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala3);
      assertNotSame(mala0, mala4);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala3);
      assertNotSame(mala1, mala4);
      assertNotSame(mala1, mala2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Mala mala0 = new Mala();
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala0);
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      
      Mala mala1 = new Mala(mala0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala1);
      assertTrue(mala1.equals((Object)mala0));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      
      mala1.setMaterial("A");
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      int int0 = mala1.getDimensao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(0, int0);
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      float float0 = mala1.getValorizacao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      boolean boolean0 = mala1.equals(mala0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(boolean0);
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      LocalDate localDate0 = mala0.getData_venda();
      assertEquals(2L, Artigo.contador);
      assertNotNull(localDate0);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertNotSame(mala0, mala1);
      
      double double0 = mala1.preco_atual(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala0.setValorizacao(1.0F);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertNotSame(mala0, mala1);
      
      mala1.setValorizacao(0.0F);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala1.setCodigo_barras("4X>qk^<dg");
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      String string0 = mala1.getMaterial();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string0);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("A", string0);
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala1.setPremium(false);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala1.setN_utilizadores(0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala1.setAno_colecao(0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      double double1 = mala1.preco_atual(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      Mala mala2 = mala1.clone();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala2);
      assertTrue(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getMaterial());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getNovo());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertEquals((-1), mala2.getEstado_uso());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(2L, mala2.getContador());
      assertEquals("4X>qk^<dg", mala2.getCodigo_barras());
      assertFalse(mala2.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
      
      mala2.setData_venda(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertTrue(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(mala1.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getMaterial());
      assertEquals("A", mala2.getCodigo());
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getNovo());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertEquals((-1), mala2.getEstado_uso());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals(2L, mala2.getContador());
      assertEquals("4X>qk^<dg", mala2.getCodigo_barras());
      assertFalse(mala2.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
      
      mala1.setData_venda(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(mala1.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
      
      Artigo.setContador(2L);
      mala2.setPreco_base(1.0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getMaterial());
      assertEquals("A", mala2.getCodigo());
      assertEquals(1.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getNovo());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertEquals((-1), mala2.getEstado_uso());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(2L, mala2.getContador());
      assertEquals("4X>qk^<dg", mala2.getCodigo_barras());
      assertFalse(mala2.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
      
      mala2.setNovo(false);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getMaterial());
      assertEquals("A", mala2.getCodigo());
      assertEquals(1.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getNovo());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertEquals((-1), mala2.getEstado_uso());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(2L, mala2.getContador());
      assertEquals("4X>qk^<dg", mala2.getCodigo_barras());
      assertFalse(mala2.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
      
      int int1 = mala2.getDimensao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getMaterial());
      assertEquals("A", mala2.getCodigo());
      assertEquals(1.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getNovo());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertEquals((-1), mala2.getEstado_uso());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(2L, mala2.getContador());
      assertEquals("4X>qk^<dg", mala2.getCodigo_barras());
      assertFalse(mala2.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
      
      int int2 = mala2.getAno_colecao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getMaterial());
      assertEquals("A", mala2.getCodigo());
      assertEquals(1.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getNovo());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertEquals((-1), mala2.getEstado_uso());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(2L, mala2.getContador());
      assertEquals("4X>qk^<dg", mala2.getCodigo_barras());
      assertFalse(mala2.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
      
      int int3 = mala1.getAno_colecao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
      
      int int4 = mala2.getDimensao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getMaterial());
      assertEquals("A", mala2.getCodigo());
      assertEquals(1.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getNovo());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertEquals((-1), mala2.getEstado_uso());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(2L, mala2.getContador());
      assertEquals("4X>qk^<dg", mala2.getCodigo_barras());
      assertFalse(mala2.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
      
      float float1 = mala2.getValorizacao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(mala2.getDisponivel());
      assertEquals("A", mala2.getMaterial());
      assertEquals("A", mala2.getCodigo());
      assertEquals(1.0, mala2.getPreco_base(), 0.01);
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertFalse(mala2.getNovo());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertEquals((-1), mala2.getEstado_uso());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0, mala2.getAno_colecao());
      assertEquals(2L, mala2.getContador());
      assertEquals("4X>qk^<dg", mala2.getCodigo_barras());
      assertFalse(mala2.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.isPremium());
      assertEquals(2L, mala0.getContador());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("A", mala0.getCodigo());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertFalse(mala0.getNovo());
      assertFalse(mala1.getDisponivel());
      assertFalse(mala1.getNovo());
      assertEquals("A", mala1.getMaterial());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(0, mala1.getN_utilizadores());
      assertEquals("4X>qk^<dg", mala1.getCodigo_barras());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals("A", mala1.getCodigo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala2);
      assertNotSame(mala1, mala0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Mala mala0 = new Mala();
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala0);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals((-1), mala0.getN_utilizadores());
      
      Mala mala1 = new Mala(mala0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala1);
      assertTrue(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals(2L, mala1.getContador());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdVendedor());
      assertFalse(mala1.isPremium());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      
      LocalDate localDate0 = mala0.getData_venda();
      assertEquals(2L, Artigo.contador);
      assertNotNull(localDate0);
      assertTrue(mala0.equals((Object)mala1));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertNotSame(mala0, mala1);
      
      double double0 = mala1.preco_atual(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertTrue(mala0.equals((Object)mala1));
      assertTrue(mala1.equals((Object)mala0));
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals(2L, mala1.getContador());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdVendedor());
      assertFalse(mala1.isPremium());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala1.setAno_colecao(2863);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2863, mala1.getAno_colecao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals(2L, mala1.getContador());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdVendedor());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala0.setCodigo_barras("V{-");
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertNotSame(mala0, mala1);
      
      mala1.setDimensao(2863);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2863, mala1.getAno_colecao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals(2L, mala1.getContador());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdVendedor());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(2863, mala1.getDimensao());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala0.setAno_colecao((-1625));
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertEquals((-1625), mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertNotSame(mala0, mala1);
      
      int int0 = mala1.getDimensao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(2863, int0);
      assertEquals((-1625), mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2863, mala1.getAno_colecao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals(2L, mala1.getContador());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdVendedor());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(2863, mala1.getDimensao());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala0.setAno_colecao(2863);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertNotSame(mala0, mala1);
      
      Mala mala2 = mala0.clone();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala2);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala1));
      assertTrue(mala2.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("A", mala2.getCodigo());
      assertEquals("", mala2.getMaterial());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("V{-", mala2.getCodigo_barras());
      assertEquals(2L, mala2.getContador());
      assertFalse(mala2.getDisponivel());
      assertEquals(2863, mala2.getAno_colecao());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals((-1), mala2.getN_utilizadores());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.isPremium());
      assertFalse(mala2.getNovo());
      assertEquals((-1), mala2.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      
      mala2.setNovo(false);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(mala0.equals((Object)mala2));
      assertFalse(mala2.equals((Object)mala1));
      assertTrue(mala2.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertFalse(mala0.isPremium());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("A", mala2.getCodigo());
      assertEquals("", mala2.getMaterial());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("V{-", mala2.getCodigo_barras());
      assertEquals(2L, mala2.getContador());
      assertFalse(mala2.getDisponivel());
      assertEquals(2863, mala2.getAno_colecao());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals((-1), mala2.getN_utilizadores());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.isPremium());
      assertFalse(mala2.getNovo());
      assertEquals((-1), mala2.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      
      mala0.setPremium(true);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      
      String string0 = mala2.getMaterial();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string0);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertEquals("", string0);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("A", mala2.getCodigo());
      assertEquals("", mala2.getMaterial());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("V{-", mala2.getCodigo_barras());
      assertEquals(2L, mala2.getContador());
      assertFalse(mala2.getDisponivel());
      assertEquals(2863, mala2.getAno_colecao());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals((-1), mala2.getN_utilizadores());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.isPremium());
      assertFalse(mala2.getNovo());
      assertEquals((-1), mala2.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      
      float float0 = mala1.getValorizacao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2863, mala1.getAno_colecao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals(2L, mala1.getContador());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdVendedor());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(2863, mala1.getDimensao());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      
      String string1 = mala2.toString();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string1);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: V{- Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 2863 Premium: false Valoriza\u00E7\u00E3o: 0.0}", string1);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getDimensao());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("A", mala2.getCodigo());
      assertEquals("", mala2.getMaterial());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("V{-", mala2.getCodigo_barras());
      assertEquals(2L, mala2.getContador());
      assertFalse(mala2.getDisponivel());
      assertEquals(2863, mala2.getAno_colecao());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals((-1), mala2.getN_utilizadores());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.isPremium());
      assertFalse(mala2.getNovo());
      assertEquals((-1), mala2.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      
      mala0.setDimensao(2863);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(2863, mala0.getDimensao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      
      int int1 = mala1.getAno_colecao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertTrue(int1 == int0);
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertEquals(2863, int1);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(2863, mala0.getDimensao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2863, mala1.getAno_colecao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals(2L, mala1.getContador());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdVendedor());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(2863, mala1.getDimensao());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      
      double double1 = mala2.preco_atual(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertEquals(double1, double0, 0.01);
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(2863, mala0.getDimensao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("A", mala2.getCodigo());
      assertEquals("", mala2.getMaterial());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("V{-", mala2.getCodigo_barras());
      assertEquals(2L, mala2.getContador());
      assertFalse(mala2.getDisponivel());
      assertEquals(2863, mala2.getAno_colecao());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals((-1), mala2.getN_utilizadores());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.isPremium());
      assertFalse(mala2.getNovo());
      assertEquals((-1), mala2.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      
      String string2 = mala2.toString();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string2);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.equals((Object)mala0));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: V{- Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 2863 Premium: false Valoriza\u00E7\u00E3o: 0.0}", string2);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(2863, mala0.getDimensao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala2.getDimensao());
      assertEquals((-1L), mala2.getIdTransportadora());
      assertEquals("A", mala2.getCodigo());
      assertEquals("", mala2.getMaterial());
      assertEquals(0.0, mala2.getPreco_base(), 0.01);
      assertEquals("Artigo invalido", mala2.getMarca());
      assertEquals("V{-", mala2.getCodigo_barras());
      assertEquals(2L, mala2.getContador());
      assertFalse(mala2.getDisponivel());
      assertEquals(2863, mala2.getAno_colecao());
      assertEquals((-1L), mala2.getIdVendedor());
      assertEquals((-1), mala2.getN_utilizadores());
      assertEquals(0.0F, mala2.getValorizacao(), 0.01F);
      assertEquals("Artigo invalido", mala2.getDescricao());
      assertFalse(mala2.isPremium());
      assertFalse(mala2.getNovo());
      assertEquals((-1), mala2.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala2, mala1);
      assertNotSame(mala2, mala0);
      
      float float1 = mala1.getValorizacao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(mala1.equals((Object)mala2));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(2863, mala0.getDimensao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(2863, mala1.getAno_colecao());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals(2L, mala1.getContador());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdVendedor());
      assertFalse(mala1.isPremium());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals(2863, mala1.getDimensao());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
      assertNotSame(mala1, mala0);
      assertNotSame(mala1, mala2);
      
      boolean boolean0 = mala0.equals("V{-");
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(boolean0);
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("V{-", mala0.getCodigo_barras());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertTrue(mala0.isPremium());
      assertFalse(mala0.getDisponivel());
      assertEquals(2863, mala0.getAno_colecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals(2863, mala0.getDimensao());
      assertEquals((-1), mala0.getN_utilizadores());
      assertNotSame(mala0, mala1);
      assertNotSame(mala0, mala2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Mala mala0 = new Mala();
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala0);
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      
      Artigo.contador = 2L;
      mala0.setTransportadora(2038L);
      assertEquals(2L, Artigo.contador);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      
      mala0.setMaterial("h");
      assertEquals(2L, Artigo.contador);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("h", mala0.getMaterial());
      
      mala0.setMaterial((String) null);
      assertEquals(2L, Artigo.contador);
      assertEquals("A1", mala0.getCodigo_barras());
      assertNull(mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      
      int int0 = mala0.getAno_colecao();
      assertEquals(2L, Artigo.contador);
      assertEquals(0, int0);
      assertEquals("A1", mala0.getCodigo_barras());
      assertNull(mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      
      Artigo.codigo = "A";
      mala0.setDescricao("h");
      assertEquals(2L, Artigo.contador);
      assertEquals("A1", mala0.getCodigo_barras());
      assertNull(mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      
      mala0.setMaterial("A");
      assertEquals(2L, Artigo.contador);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      
      mala0.setMaterial("A");
      assertEquals(2L, Artigo.contador);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      
      Mala mala1 = mala0.clone();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala1);
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(2038L, mala1.getIdTransportadora());
      assertFalse(mala1.getDisponivel());
      assertEquals("A", mala1.getCodigo());
      assertEquals("A", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(0, mala1.getDimensao());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("h", mala1.getDescricao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala1.setPreco_base(220.024307241453);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(2038L, mala1.getIdTransportadora());
      assertFalse(mala1.getDisponivel());
      assertEquals("A", mala1.getCodigo());
      assertEquals("A", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(220.024307241453, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("h", mala1.getDescricao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      boolean boolean0 = mala1.equals("A");
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(boolean0);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(2038L, mala1.getIdTransportadora());
      assertFalse(mala1.getDisponivel());
      assertEquals("A", mala1.getCodigo());
      assertEquals("A", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(220.024307241453, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("h", mala1.getDescricao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      boolean boolean1 = mala0.equals(mala1);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(2038L, mala1.getIdTransportadora());
      assertFalse(mala1.getDisponivel());
      assertEquals("A", mala1.getCodigo());
      assertEquals("A", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(220.024307241453, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("h", mala1.getDescricao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      String string0 = mala1.getMaterial();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string0);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("A", string0);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(2038L, mala1.getIdTransportadora());
      assertFalse(mala1.getDisponivel());
      assertEquals("A", mala1.getCodigo());
      assertEquals("A", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(220.024307241453, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("h", mala1.getDescricao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala0.setDimensao(0);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertNotSame(mala0, mala1);
      
      LocalDate localDate0 = mala0.getData_venda();
      assertEquals(2L, Artigo.contador);
      assertNotNull(localDate0);
      assertFalse(mala0.equals((Object)mala1));
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertNotSame(mala0, mala1);
      
      double double0 = mala1.preco_atual(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(2038L, mala1.getIdTransportadora());
      assertFalse(mala1.getDisponivel());
      assertEquals("A", mala1.getCodigo());
      assertEquals("A", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(220.024307241453, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("h", mala1.getDescricao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      int int1 = mala1.getDimensao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(int1 == int0);
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(0, int1);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(2038L, mala1.getIdTransportadora());
      assertFalse(mala1.getDisponivel());
      assertEquals("A", mala1.getCodigo());
      assertEquals("A", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(220.024307241453, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("h", mala1.getDescricao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      int int2 = mala0.getDimensao();
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertNotSame(mala0, mala1);
      
      boolean boolean2 = mala1.equals("A");
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(boolean2);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(2038L, mala1.getIdTransportadora());
      assertFalse(mala1.getDisponivel());
      assertEquals("A", mala1.getCodigo());
      assertEquals("A", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(220.024307241453, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("h", mala1.getDescricao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      boolean boolean3 = mala1.equals(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(boolean3);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals((-1), mala1.getN_utilizadores());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getContador());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(2038L, mala1.getIdTransportadora());
      assertFalse(mala1.getDisponivel());
      assertEquals("A", mala1.getCodigo());
      assertEquals("A", mala1.getMaterial());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertEquals(0, mala1.getDimensao());
      assertEquals("A1", mala1.getCodigo_barras());
      assertEquals(220.024307241453, mala1.getPreco_base(), 0.01);
      assertFalse(mala1.getNovo());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("h", mala1.getDescricao());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      String string1 = mala0.toString();
      assertEquals(2L, Artigo.contador);
      assertNotNull(string1);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: h Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2038 Id do vendedor: -1 } Dimens\u00E3o: 0 Material: A Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", string1);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertNotSame(mala0, mala1);
      
      boolean boolean4 = mala0.isPremium();
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("A", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertNotSame(mala0, mala1);
      
      mala0.setMaterial("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: h Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2038 Id do vendedor: -1 } Dimens\u00E3o: 0 Material: A Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}");
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: h Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2038 Id do vendedor: -1 } Dimens\u00E3o: 0 Material: A Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertNotSame(mala0, mala1);
      
      float float0 = mala0.getValorizacao();
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: h Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2038 Id do vendedor: -1 } Dimens\u00E3o: 0 Material: A Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertNotSame(mala0, mala1);
      
      Double double1 = new Double(0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.01, (double)double1, 0.01);
      
      Long long0 = new Long(2038L);
      assertNotNull(long0);
      assertEquals(2038L, (long)long0);
      
      Mala mala2 = new Mala("A", (String) null, double1, false, 0, 0, long0, (Long) 3L, 0, (String) null, 0, false, (-1181.1578F));
      assertEquals(3L, Artigo.contador);
      assertNotNull(mala2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala1));
      assertFalse(mala2.isPremium());
      assertEquals(0, mala2.getAno_colecao());
      assertNull(mala2.getMarca());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0.01, mala2.getPreco_base(), 0.01);
      assertEquals(3L, mala2.getIdVendedor());
      assertFalse(mala2.getNovo());
      assertEquals("A2", mala2.getCodigo_barras());
      assertEquals(0, mala2.getEstado_uso());
      assertEquals(0, mala2.getDimensao());
      assertEquals("A", mala2.getCodigo());
      assertEquals("A", mala2.getDescricao());
      assertTrue(mala2.getDisponivel());
      assertEquals((-1181.1578F), mala2.getValorizacao(), 0.01F);
      assertEquals(2038L, mala2.getIdTransportadora());
      assertNull(mala2.getMaterial());
      assertEquals(3L, mala2.getContador());
      
      boolean boolean5 = mala0.equals(mala2);
      assertEquals(3L, Artigo.contador);
      assertEquals(3L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala2));
      assertFalse(mala0.equals((Object)mala1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(mala2.equals((Object)mala0));
      assertFalse(mala2.equals((Object)mala1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: h Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2038 Id do vendedor: -1 } Dimens\u00E3o: 0 Material: A Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: 0.0}", mala0.getMaterial());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("h", mala0.getDescricao());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(3L, mala0.getContador());
      assertFalse(mala0.getNovo());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(2038L, mala0.getIdTransportadora());
      assertFalse(mala0.getDisponivel());
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertFalse(mala2.isPremium());
      assertEquals(0, mala2.getAno_colecao());
      assertNull(mala2.getMarca());
      assertEquals(0, mala2.getN_utilizadores());
      assertEquals(0.01, mala2.getPreco_base(), 0.01);
      assertEquals(3L, mala2.getIdVendedor());
      assertFalse(mala2.getNovo());
      assertEquals("A2", mala2.getCodigo_barras());
      assertEquals(0, mala2.getEstado_uso());
      assertEquals(0, mala2.getDimensao());
      assertEquals("A", mala2.getCodigo());
      assertEquals("A", mala2.getDescricao());
      assertTrue(mala2.getDisponivel());
      assertEquals((-1181.1578F), mala2.getValorizacao(), 0.01F);
      assertEquals(2038L, mala2.getIdTransportadora());
      assertNull(mala2.getMaterial());
      assertEquals(3L, mala2.getContador());
      assertNotSame(mala0, mala2);
      assertNotSame(mala0, mala1);
      assertNotSame(mala2, mala0);
      assertNotSame(mala2, mala1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Mala mala0 = new Mala();
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala0);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      
      Mala mala1 = new Mala(mala0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(mala1);
      assertTrue(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      
      mala1.setValorizacao((-2869.9417F));
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      boolean boolean0 = mala0.equals(mala1);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(boolean0);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdTransportadora());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala1.setTransportadora(2L);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getIdTransportadora());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      String string0 = mala1.toString();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string0);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417}", string0);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals("Artigo invalido", mala1.getDescricao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getIdTransportadora());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      String string1 = mala0.getMaterial();
      assertEquals(2L, Artigo.contador);
      assertNotNull(string1);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertNotSame(mala0, mala1);
      
      mala1.setDescricao("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417}");
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getIdTransportadora());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417}", mala1.getDescricao());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      LocalDate localDate0 = mala1.getData_venda();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(localDate0);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1L), mala0.getIdVendedor());
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getIdTransportadora());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417}", mala1.getDescricao());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      mala0.setVendedor(2L);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(2L, mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertNotSame(mala0, mala1);
      
      double double0 = mala0.preco_atual(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(2L, mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getIdTransportadora());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417}", mala1.getDescricao());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      boolean boolean1 = mala0.equals((Object) null);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(2L, mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertNotSame(mala0, mala1);
      
      boolean boolean2 = mala0.isPremium();
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(2L, mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertNotSame(mala0, mala1);
      
      int int0 = mala1.getAno_colecao();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(0, int0);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(2L, mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getIdTransportadora());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417}", mala1.getDescricao());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      String string2 = mala1.toString();
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertNotNull(string2);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417} Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417}", string2);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(2L, mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getIdTransportadora());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417}", mala1.getDescricao());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
      
      double double1 = mala1.preco_atual(localDate0);
      assertEquals(2L, Artigo.contador);
      assertEquals(2L, Artigo.contador);
      assertFalse(mala0.equals((Object)mala1));
      assertFalse(mala1.equals((Object)mala0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals("Artigo invalido", mala0.getMarca());
      assertEquals(0, mala0.getDimensao());
      assertEquals("A", mala0.getCodigo());
      assertEquals("", mala0.getMaterial());
      assertFalse(mala0.getNovo());
      assertEquals((-1L), mala0.getIdTransportadora());
      assertEquals("A1", mala0.getCodigo_barras());
      assertEquals(0.0, mala0.getPreco_base(), 0.01);
      assertEquals((-1), mala0.getN_utilizadores());
      assertEquals(0, mala0.getAno_colecao());
      assertEquals(2L, mala0.getIdVendedor());
      assertEquals("Artigo invalido", mala0.getDescricao());
      assertFalse(mala0.isPremium());
      assertEquals((-1), mala0.getEstado_uso());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(2L, mala0.getContador());
      assertFalse(mala0.getDisponivel());
      assertEquals(0, mala1.getAno_colecao());
      assertEquals((-1), mala1.getEstado_uso());
      assertEquals((-1), mala1.getN_utilizadores());
      assertEquals((-2869.9417F), mala1.getValorizacao(), 0.01F);
      assertEquals(0.0, mala1.getPreco_base(), 0.01);
      assertEquals(2L, mala1.getContador());
      assertFalse(mala1.isPremium());
      assertEquals(2L, mala1.getIdTransportadora());
      assertEquals("A", mala1.getCodigo());
      assertEquals("", mala1.getMaterial());
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: 2 Id do vendedor: -1 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -2869.9417}", mala1.getDescricao());
      assertFalse(mala1.getDisponivel());
      assertEquals("A1", mala1.getCodigo_barras());
      assertFalse(mala1.getNovo());
      assertEquals(0, mala1.getDimensao());
      assertEquals((-1L), mala1.getIdVendedor());
      assertEquals("Artigo invalido", mala1.getMarca());
      assertNotSame(mala0, mala1);
      assertNotSame(mala1, mala0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setPremium(false);
      mala0.setPremium(true);
      mala0.getMaterial();
      LocalDate localDate0 = mala0.getData_venda();
      double double0 = mala0.preco_atual(localDate0);
      assertTrue(mala0.isPremium());
      assertEquals(0.01, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long((-2950));
      Long long1 = new Long(1762L);
      Mala mala0 = new Mala((String) null, "UdQB*{L)),v6%<q", double0, false, (-2950), (-2950), long0, long1, (-2950), "UdQB*{L)),v6%<q", 0, true, (-2950));
      Mala mala1 = new Mala(mala0);
      assertTrue(mala1.isPremium());
      assertEquals((-2950), mala1.getDimensao());
      assertEquals((-2950.0F), mala1.getValorizacao(), 0.01F);
      
      String string0 = mala0.toString();
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: null Marca: UdQB*{L)),v6%<q Pre\u00E7o base: 0.0 Novo: false Estado de uso: -2950 N\u00FAmero de utilizadores: -2950 Disponivel: true Id da transportadora: -2950 Id do vendedor: 1762 } Dimens\u00E3o: -2950 Material: UdQB*{L)),v6%<q Ano da Cole\u00E7\u00E3o: 0 Premium: true Valoriza\u00E7\u00E3o: -2950.0}", string0);
      assertEquals((-2950.0F), mala0.getValorizacao(), 0.01F);
      assertEquals(0, mala0.getAno_colecao());
      assertEquals("UdQB*{L)),v6%<q", mala0.getMaterial());
      assertEquals((-2950), mala0.getDimensao());
  }
}
